<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
	<assembly>
		<name>netstandard.dll</name>
	</assembly>
	<members>
		<MF-System.BitConverter>
			<member name="T:System.BitConverter">
				<summary>
					将基数据类型转换为一个字节数组以及将一个字节数组转换为基数据类型。
				</summary>
			</member>
			<member name="F:System.BitConverter.IsLittleEndian">
				<summary>
					指示数据存储在此计算机体系结构中的字节顺序（“endianness”）。
				</summary>
			</member>
			<member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
				<summary>
					将指定的双精度浮点数转换为 64 位有符号整数。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>64 位有符号整数，其值等于 value。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.UInt32)">
				<summary>
					以字节数组的形式返回指定的 32 位无符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 4 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.UInt16)">
				<summary>
					以字节数组的形式返回指定的 16 位无符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 2 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Single)">
				<summary>
					以字节数组的形式返回指定的单精度浮点值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 4 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Int64)">
				<summary>
					以字节数组的形式返回指定 64 位带符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 8 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.UInt64)">
				<summary>
					以字节数组的形式返回指定的 64 位无符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 8 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Int16)">
				<summary>
					以字节数组的形式返回指定的 16 位有符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 2 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Double)">
				<summary>
					以字节数组的形式返回指定的双精度浮点值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 8 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Char)">
				<summary>
					以字节数组的形式返回指定的 Unicode 字符值。
				</summary>
				<param name="value">要转换的字符。</param>
				<returns>长度为 2 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Boolean)">
				<summary>
					以字节数组的形式返回指定的布尔值。
				</summary>
				<param name="value">要转换的值。</param>
				<returns>长度为 1 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.GetBytes(System.Int32)">
				<summary>
					以字节数组的形式返回指定 32 位有符号整数值。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>长度为 4 的字节数组。</returns>
			</member>
			<member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
				<summary>
					将指定的 32 位整数重新解释为单精度浮点值。
				</summary>
				<param name="value">要转换的整数。</param>
				<returns>单精度浮点数，其值等于 value</returns>
			</member>
			<member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
				<summary>
					将指定的 64 位带符号整数重新解释成双精度浮点数。
				</summary>
				<param name="value">要转换的数字。</param>
				<returns>双精度浮点数，其值等于 value。</returns>
			</member>
			<member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
				<summary>
					将单精度浮点值转换为整数。
				</summary>
				<param name="value">要转换的单精度浮点值。</param>
				<returns>表示已转换单精度浮点值的整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为布尔值。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的布尔值。</returns>
			</member>
			<member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的一个字节转换来的布尔值。
				</summary>
				<param name="value">一个字节数组。</param>
				<param name="startIndex">要转换的字节 value 的索引。</param>
				<returns>如果 startIndex 中的 value 处的字节非零，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。
				</summary>
				<param name="value">包含要转换的两个字节的数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>以两个字节开头 startIndex的字符。</returns>
			</member>
			<member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为字符。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的字符。</returns>
			</member>
			<member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的八个字节转换来的双精度浮点数。
				</summary>
				<param name="value">包含要转换的八个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>以八个字节开头 startIndex的双精度浮点数。</returns>
			</member>
			<member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为双精度浮点值。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的双精度浮点值。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。
				</summary>
				<param name="value">包含要转换的两个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由两个字节构成、从 startIndex 开始的 16 位有符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为 16 位带符号整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 16 位带符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为 32 位带符号整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 32 位带符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
				</summary>
				<param name="value">包含要转换的四个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由四个字节构成、从 startIndex 开始的 32 位有符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。
				</summary>
				<param name="value">包含要转换的八个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由八个字节构成、从 startIndex 开始的 64 位有符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为 64 位带符号整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 64 位带符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的四个字节转换来的单精度浮点数。
				</summary>
				<param name="value">字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由四个字节构成、从 startIndex 开始的单精度浮点数。</returns>
			</member>
			<member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为单精度浮点值。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示转换后的字节的单精度浮点值。</returns>
			</member>
			<member name="M:System.BitConverter.ToString(System.Byte[])">
				<summary>
					将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
				</summary>
				<param name="value">字节数组。</param>
				<returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 value 中对应的元素；例如“7F-2C-4A”。</returns>
			</member>
			<member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
				<summary>
					将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
				</summary>
				<param name="value">字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 value 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
			</member>
			<member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
				<summary>
					将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
				</summary>
				<param name="value">包含要转换的字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<param name="length">要转换的 value 中的数组元素数。</param>
				<returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 value 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。
				</summary>
				<param name="value">包含要转换的两个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由两个字节构成、从 startIndex 开始的 16 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为 16 位无符号整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 16 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。
				</summary>
				<param name="value">字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由四个字节构成、从 startIndex 开始的 32 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为 32 位无符号整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 32 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
				<summary>
					将只读字节范围转换为无符号长整数。
				</summary>
				<param name="value">包含要转换的字节的只读范围。</param>
				<returns>表示已转换字节的 64 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
				<summary>
					返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。
				</summary>
				<param name="value">包含要转换的八个字节的字节数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<returns>由八个字节构成、从 startIndex 开始的 64 位无符号整数。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
				<summary>
					将布尔值转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的布尔值的字节。</param>
				<param name="value">要转换的布尔值。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
				<summary>
					将字符转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的字符的字节。</param>
				<param name="value">要转换的字符。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
				<summary>
					将双精度浮点值转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的双精度浮点值的字节。</param>
				<param name="value">要转换的双精度浮点值。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
				<summary>
					将 16 位带符号整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的 16 位带符号整数的字节。</param>
				<param name="value">要转换的 16 位带符号整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
				<summary>
					将 32 位带符号整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的 32 位带符号整数的字节。</param>
				<param name="value">要转换的 32 位带符号整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
				<summary>
					将 64 位带符号整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的 64 位带符号整数的字节。</param>
				<param name="value">要转换的 64 位带符号整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
				<summary>
					将单精度浮点值转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的单精度浮点值的字节。</param>
				<param name="value">要转换的单精度浮点值。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
				<summary>
					将无符号 16 位整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的无符号 16 位整数的字节。</param>
				<param name="value">要转换的无符号 16 位整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
				<summary>
					将 32 位无符号整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的无符号 32 位整数的字节。</param>
				<param name="value">要转换的无符号 32 位整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
				<summary>
					将无符号 64 位整数转换为字节范围。
				</summary>
				<param name="destination">此方法返回时，表示转换后的无符号 64 位整数的字节。</param>
				<param name="value">要转换的无符号 64 位整数。</param>
				<returns>如果转换成功，则为 true；否则为 false。</returns>
			</member>
		</MF-System.BitConverter>
		<MF-System.Text.Encoding>
			<member name="T:System.Text.Encoding">
				<summary>
					表示字符编码。
				</summary>
			</member>
			<member name="M:System.Text.Encoding.#ctor">
				<summary>
					初始化 Encoding 类的新实例。
				</summary>
			</member>
			<member name="M:System.Text.Encoding.#ctor(System.Int32)">
				<summary>
					初始化对应于指定代码页的 Encoding 类的新实例。
				</summary>
				<param name="codePage">首选编码的代码页标识符。</param>
			</member>
			<member name="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
				<summary>
					使用指定编码器和解码器回退策略初始化对应于指定代码页的 Encoding 类的新实例。
				</summary>
				<param name="codePage">编码的代码页标识符。</param>
				<param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
				<param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
			</member>
			<member name="P:System.Text.Encoding.UTF8">
				<summary>
					获取 UTF-8 格式的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.UTF7">
				<summary>
					获取 UTF-7 格式的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.UTF32">
				<summary>
					获取使用 Little-Endian 字节顺序的 UTF-32 格式的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.Unicode">
				<summary>
					获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.BigEndianUnicode">
				<summary>
					获取使用 Big Endian 字节顺序的 UTF-16 格式的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.ASCII">
				<summary>
					获取 ASCII（7 位）字符集的编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.Default">
				<summary>
					获取此 .NET 实现的默认编码。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.BodyName">
				<summary>
					在派生类中重写时，获取可与邮件代理正文标记一起使用的当前编码的名称。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.CodePage">
				<summary>
					在派生类中重写时，获取当前 Encoding 的代码页标识符。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.DecoderFallback">
				<summary>
					获取或设置当前 DecoderFallback 对象的 Encoding 对象。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.EncoderFallback">
				<summary>
					获取或设置当前 EncoderFallback 对象的 Encoding 对象。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.EncodingName">
				<summary>
					在派生类中重写时，获取当前编码的用户可读说明。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsMailNewsDisplay">
				<summary>
					在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码显示内容。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsBrowserDisplay">
				<summary>
					在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码显示内容。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsBrowserSave">
				<summary>
					在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码保存内容。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsMailNewsSave">
				<summary>
					在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码保存内容。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsReadOnly">
				<summary>
					在派生类中重写时，获取一个值，该值指示当前的编码是否为只读。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.IsSingleByte">
				<summary>
					在派生类中重写时，获取一个值，该值指示当前的编码是否使用单字节码位。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.Preamble">
				<summary>
					在派生类中重写时，返回包含指定所用编码的字节序列的范围。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.HeaderName">
				<summary>
					在派生类中重写时，获取可与邮件代理头标记一起使用的当前编码的名称。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.WebName">
				<summary>
					在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。
				</summary>
			</member>
			<member name="P:System.Text.Encoding.WindowsCodePage">
				<summary>
					在派生类中重写时，获取与当前编码最紧密对应的 Windows 操作系统代码页。
				</summary>
			</member>
			<member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
				<summary>
					将整个字节数组从一种编码转换为另一种编码。
				</summary>
				<param name="srcEncoding">bytes 的编码格式。</param>
				<param name="dstEncoding">目标编码格式。</param>
				<param name="bytes">要转换的字节。</param>
				<returns>Byte 类型的数组，其中包含将 bytes 从 srcEncoding 转换为 dstEncoding 的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
				<summary>
					将字节数组内某个范围的字节从一种编码转换为另一种编码。
				</summary>
				<param name="srcEncoding">源数组 bytes 的编码。</param>
				<param name="dstEncoding">输出数组的编码。</param>
				<param name="bytes">要转换的字节数组。</param>
				<param name="index">要转换的 bytes 中第一个元素的索引。</param>
				<param name="count">要转换的字节数。</param>
				<returns>一个 Byte 类型的数组，其中包含将 bytes 中某个范围的字节从 srcEncoding 转换为 dstEncoding 的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncoding(System.String)">
				<summary>
					返回与指定代码页名称关联的编码。
				</summary>
				<param name="name">首选编码的代码页名称。 WebName 属性返回的所有值均有效。 有关可能值的列表，请参见 Encoding。</param>
				<returns>与指定的代码页关联的编码。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
				<summary>
					返回与指定代码页名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
				</summary>
				<param name="name">首选编码的代码页名称。 WebName 属性返回的所有值均有效。 可能值均在 Encoding 类主题中出现的表的“名称”一列中列出。</param>
				<param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
				<param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
				<returns>与指定代码页关联的编码。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
				<summary>
					返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
				</summary>
				<param name="codepage">首选编码的代码页标识符。 有关可能值的列表，请参见 Encoding。</param>
				<param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
				<param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
				<returns>与指定代码页关联的编码。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
				<summary>
					返回与指定代码页标识符关联的编码。
				</summary>
				<param name="codepage">首选编码的代码页标识符。 有关可能值的列表，请参见 Encoding。</param>
				<returns>与指定代码页关联的编码。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncodings">
				<summary>
					返回包含所有编码的数组。
				</summary>
				<returns>包含所有编码的数组。</returns>
			</member>
			<member name="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
				<summary>
					注册编码提供程序。
				</summary>
				<param name="provider">提供对其他字符编码的访问权限的 EncodingProvider 的子类。</param>
			</member>
			<member name="M:System.Text.Encoding.Clone">
				<summary>
					当在派生类中重写时，创建当前 Encoding 对象的一个卷影副本。
				</summary>
				<returns>当前 Encoding 对象的副本。</returns>
			</member>
			<member name="M:System.Text.Encoding.Equals(System.Object)">
				<summary>
					确定指定的 Object 是否等同于当前实例。
				</summary>
				<param name="value">与当前实例进行比较的 Object。</param>
				<returns>如果 value 是 Encoding 的一个实例并且等于当前实例，则为 true；否则，为 false。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.String)">
				<summary>
					在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。
				</summary>
				<param name="s">包含要编码的字符集的字符串。</param>
				<returns>对指定字符进行编码后生成的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
				<summary>
					在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。
				</summary>
				<param name="chars">指向第一个要编码的字符的指针。</param>
				<param name="count">要编码的字符的数目。</param>
				<returns>对指定字符进行编码后生成的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
				<summary>
					在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。
				</summary>
				<param name="chars">包含要编码的字符的字符数组。</param>
				<returns>对指定字符数组中的所有字符进行编码后产生的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。
				</summary>
				<param name="chars">包含要编码的字符集的字符数组。</param>
				<param name="index">第一个要编码的字符的索引。</param>
				<param name="count">要编码的字符的数目。</param>
				<returns>对指定字符进行编码后生成的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})">
				<summary>
					在派生类中重写时，计算对指定字符范围的字符进行编码所产生的字节数。
				</summary>
				<param name="chars">要编码的字符范围。</param>
				<returns>对指定字符范围进行编码所产生的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，计算对指定字符串中的一组字符进行编码所产生的字节数。
				</summary>
				<param name="s">包含要编码的字符集的字符串。</param>
				<param name="index">第一个要编码的字符的索引。</param>
				<param name="count">要编码的字符的数目。</param>
				<returns>对字符串进行编码后生成的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.String)">
				<summary>
					在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。
				</summary>
				<param name="s">包含要编码的字符的字符串。</param>
				<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。
				</summary>
				<param name="chars">包含要编码的字符集的字符数组。</param>
				<param name="index">第一个要编码的字符的索引。</param>
				<param name="count">要编码的字符的数目。</param>
				<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
				<summary>
					在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。
				</summary>
				<param name="s">包含要编码的字符集的字符串。</param>
				<param name="charIndex">第一个要编码的字符的索引。</param>
				<param name="charCount">要编码的字符的数目。</param>
				<param name="bytes">要包含所产生的字节序列的字节数组。</param>
				<param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
				<returns>写入 bytes 的实际字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.Char[])">
				<summary>
					在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。
				</summary>
				<param name="chars">包含要编码的字符的字符数组。</param>
				<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，从指定的 index 开始，将指定字符串中由 count 指定的字符数编码为字节数组。
				</summary>
				<param name="s">包含要编码的字符的字符串。</param>
				<param name="index">字符串内的索引，要从该位置开始编码。</param>
				<param name="count">要编码的字符的数目。</param>
				<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
				<summary>
					在派生类中重写时，将指定只读范围中的一组字符编码为字节范围。
				</summary>
				<param name="chars">包含要编码的字符集的范围。</param>
				<param name="bytes">用于保存已编码字节的字节范围。</param>
				<returns>已编码的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
				<summary>
					在派生类中重写时，将一组字符（从指定的字符指针开始）编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
				</summary>
				<param name="chars">指向第一个要编码的字符的指针。</param>
				<param name="charCount">要编码的字符的数目。</param>
				<param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
				<param name="byteCount">最多写入的字节数。</param>
				<returns>在由 bytes 参数指示的位置处写入的实际字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
				<summary>
					在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。
				</summary>
				<param name="chars">包含要编码的字符集的字符数组。</param>
				<param name="charIndex">第一个要编码的字符的索引。</param>
				<param name="charCount">要编码的字符的数目。</param>
				<param name="bytes">要包含所产生的字节序列的字节数组。</param>
				<param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
				<returns>写入 bytes 的实际字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})">
				<summary>
					在派生类中重写时，计算对提供的只读字节范围进行解码所产生的字符数。
				</summary>
				<param name="bytes">要解码的只读字节范围。</param>
				<returns>对字节范围进行解码所产生的字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
				<summary>
					在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<returns>对指定字节序列进行解码所产生的字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
				<summary>
					在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。
				</summary>
				<param name="bytes">指向第一个要解码的字节的指针。</param>
				<param name="count">要解码的字节数。</param>
				<returns>对指定字节序列进行解码所产生的字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<param name="index">第一个要解码的字节的索引。</param>
				<param name="count">要解码的字节数。</param>
				<returns>对指定字节序列进行解码所产生的字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<param name="index">第一个要解码的字节的索引。</param>
				<param name="count">要解码的字节数。</param>
				<returns></returns>
			</member>
			<member name="M:System.Text.Encoding.GetChars(System.Byte[])">
				<summary>
					在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
				<summary>
					在派生类中重写时，将一个字节序列（从指定的字节指针开始）解码为一组字符，并从指定的字符指针开始存储该组字符。
				</summary>
				<param name="bytes">指向第一个要解码的字节的指针。</param>
				<param name="byteCount">要解码的字节数。</param>
				<param name="chars">一个指针，指向开始写入所产生的字符集的位置。</param>
				<param name="charCount">要写入的最大字符数。</param>
				<returns></returns>
			</member>
			<member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
				<summary>
					在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<param name="byteIndex">第一个要解码的字节的索引。</param>
				<param name="byteCount">要解码的字节数。</param>
				<param name="chars">要用于包含所产生的字符集的字符数组。</param>
				<param name="charIndex">开始写入所产生的字符集的索引位置。</param>
				<returns>写入 chars 的实际字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})">
				<summary>
					在派生类中重写时，将指定只读字节范围中的所有字节解码为字符范围。
				</summary>
				<param name="bytes">包含要解码的字节序列的只读范围。</param>
				<param name="chars">接收已解码字节的字符范围。</param>
				<returns>已解码的字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetDecoder">
				<summary>
					在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。
				</summary>
				<returns>一个 Decoder，它将已编码的字节序列转换为字符序列。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetEncoder">
				<summary>
					在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。
				</summary>
				<returns>一个 Encoder，它将 Unicode 字符序列转换为已编码的字节序列。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetHashCode">
				<summary>
					返回当前实例的哈希代码。
				</summary>
				<returns>当前实例的哈希代码。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
				<summary>
					在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。
				</summary>
				<param name="charCount">要编码的字符的数目。</param>
				<returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
				<summary>
					在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。
				</summary>
				<param name="byteCount">要解码的字节数。</param>
				<returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetPreamble">
				<summary>
					在派生类中重写时，返回指定所用编码的字节序列。
				</summary>
				<returns>一个字节数组，包含指定所用编码的字节序列。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})">
				<summary>
					在派生类中重写时，将指定字节范围中的所有字节解码为一个字符串。
				</summary>
				<param name="bytes">要解码为 Unicode 字符串的只读字节范围。</param>
				<returns>一个字符串，其中包含提供的只读范围中的已解码字节。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
				<summary>
					在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<param name="index">第一个要解码的字节的索引。</param>
				<param name="count">要解码的字节数。</param>
				<returns>包含指定字节序列解码结果的字符串。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetString(System.Byte[])">
				<summary>
					在派生类中重写时，将指定字节数组中的所有字节解码为一个字符串。
				</summary>
				<param name="bytes">包含要解码的字节序列的字节数组。</param>
				<returns>包含指定字节序列解码结果的字符串。</returns>
			</member>
			<member name="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
				<summary>
					在派生类中重写时，将在指定地址开始的指定字节数解码为字符串。
				</summary>
				<param name="bytes">指向字节数组的指针。</param>
				<param name="byteCount">要解码的字节数。</param>
				<returns>包含指定字节序列解码结果的字符串。</returns>
			</member>
			<member name="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
				<summary>
					在派生类中重写时，使用指定范式获取一个值，该值指示当前编码是否始终被规范化。
				</summary>
				<param name="form">NormalizationForm 值之一。</param>
				<returns>如果始终使用指定的 true 值规范化当前 Encoding 对象，则为 NormalizationForm；否则为 false。 默认值为 false。</returns>
			</member>
			<member name="M:System.Text.Encoding.IsAlwaysNormalized">
				<summary>
					使用默认范式获取一个值，该值指示当前编码是否始终被规范化。
				</summary>
				<returns>如果当前 Encoding 始终被规范化，则为 true；否则，为 false。 默认值为 false。</returns>
			</member>
		</MF-System.Text.Encoding>
		<MF-System.IO.File>
			<member name="T:System.IO.File">
				<summary>
					提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建 FileStream 对象。
				</summary>
			</member>
			<member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
				<summary>
					向一个文件中追加行，然后关闭该文件。 如果指定文件不存在，此方法会创建一个文件，向其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要向其中追加行的文件。 如果文件尚不存在，则创建该文件。</param>
				<param name="contents">要追加到文件中的行。</param>
			</member>
			<member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
				<summary>
					使用指定的编码向一个文件中追加行，然后关闭该文件。 如果指定文件不存在，此方法会创建一个文件，向其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要向其中追加行的文件。 如果文件尚不存在，则创建该文件。</param>
				<param name="contents">要追加到文件中的行。</param>
				<param name="encoding">要使用的字符编码。</param>
			</member>
			<member name="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					使用指定的编码以异步形式向一个文件中追加行，然后关闭该文件。 如果指定文件不存在，此方法会创建一个文件，向其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要向其中追加行的文件。 如果文件尚不存在，则创建该文件。</param>
				<param name="contents">要追加到文件中的行。</param>
				<param name="encoding">要使用的字符编码。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步追加操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
				<summary>
					以异步形式向一个文件中追加行，然后关闭该文件。 如果指定文件不存在，此方法会创建一个文件，向其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要向其中追加行的文件。 如果文件尚不存在，则创建该文件。</param>
				<param name="contents">要追加到文件中的行。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步追加操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.AppendAllText(System.String,System.String)">
				<summary>
					打开一个文件，向其中追加指定的字符串，然后关闭该文件。 如果文件不存在，此方法将创建一个文件，将指定的字符串写入文件，然后关闭该文件。
				</summary>
				<param name="path">要将指定的字符串追加到的文件。</param>
				<param name="contents">要追加到文件中的字符串。</param>
			</member>
			<member name="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
				<summary>
					使用指定的编码将指定的字符串追加到文件中，如果文件还不存在则创建该文件。
				</summary>
				<param name="path">要将指定的字符串追加到的文件。</param>
				<param name="contents">要追加到文件中的字符串。</param>
				<param name="encoding">要使用的字符编码。</param>
			</member>
			<member name="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					以异步方式打开文件或创建文件（如果文件尚不存在），使用指定的编码将指定的字符串追加到该文件，然后关闭文件。
				</summary>
				<param name="path">要将指定的字符串追加到的文件。</param>
				<param name="contents">要追加到文件中的字符串。</param>
				<param name="encoding">要使用的字符编码。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步追加操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
				<summary>
					以异步方式打开文件或创建文件（如果文件尚不存在），将指定的字符串追加到该文件，然后关闭文件。
				</summary>
				<param name="path">要将指定的字符串追加到的文件。</param>
				<param name="contents">要追加到文件中的字符串。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步追加操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.AppendText(System.String)">
				<summary>
					创建一个 StreamWriter，它将 UTF-8 编码文本追加到现有文件或新文件（如果指定文件不存在）。
				</summary>
				<param name="path">要向其中追加内容的文件的路径。</param>
				<returns>一个流写入器，它将 UTF-8 编码文本追加到指定文件或新文件。</returns>
			</member>
			<member name="M:System.IO.File.Copy(System.String,System.String)">
				<summary>
					将现有文件复制到新文件。 不允许覆盖同名的文件。
				</summary>
				<param name="sourceFileName">要复制的文件。</param>
				<param name="destFileName">目标文件的名称。 它不能是一个目录或现有文件。</param>
			</member>
			<member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
				<summary>
					将现有文件复制到新文件。 允许覆盖同名的文件。
				</summary>
				<param name="sourceFileName">要复制的文件。</param>
				<param name="destFileName">目标文件的名称。 不能是目录。</param>
				<param name="overwrite">如果可以覆盖目标文件，则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.File.Create(System.String)">
				<summary>
					在指定路径中创建或覆盖文件。
				</summary>
				<param name="path">要创建的文件的路径及名称。</param>
				<returns>一个 FileStream，它提供对 path 中指定的文件的读/写访问。</returns>
			</member>
			<member name="M:System.IO.File.Create(System.String,System.Int32)">
				<summary>
					在指定路径中创建或覆盖文件，指定缓冲区大小。
				</summary>
				<param name="path">要创建的文件的路径及名称。</param>
				<param name="bufferSize">用于读取和写入到文件的已放入缓冲区的字节数。</param>
				<returns>一个具有指定缓冲区大小的 FileStream，它提供对 path 中指定的文件的读/写访问。</returns>
			</member>
			<member name="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)">
				<summary>
					创建或覆盖指定路径中的文件，指定缓冲区大小和一个描述如何创建或覆盖该文件的选项。
				</summary>
				<param name="path">要创建的文件的路径及名称。</param>
				<param name="bufferSize">用于读取和写入到文件的已放入缓冲区的字节数。</param>
				<param name="options">FileOptions 值之一，它描述如何创建或覆盖该文件。</param>
				<returns>具有指定缓冲区大小的新文件。</returns>
			</member>
			<member name="M:System.IO.File.CreateText(System.String)">
				<summary>
					创建或打开用于写入 UTF-8 编码文本的文件。 如果该文件已存在，将覆盖其内容。
				</summary>
				<param name="path">要打开以进行写入的文件的路径。</param>
				<returns>一个 StreamWriter，它使用 UTF-8 编码写入到指定的文件。</returns>
			</member>
			<member name="M:System.IO.File.Decrypt(System.String)">
				<summary>
					使用 Encrypt(String) 方法解密由当前帐户加密的文件。
				</summary>
				<param name="path">描述要解密的文件的路径。</param>
			</member>
			<member name="M:System.IO.File.Delete(System.String)">
				<summary>
					删除指定的文件。
				</summary>
				<param name="path">要删除的文件的名称。 不支持通配符。</param>
			</member>
			<member name="M:System.IO.File.Encrypt(System.String)">
				<summary>
					将某个文件加密，使得只有加密该文件的帐户才能将其解密。
				</summary>
				<param name="path">描述要加密的文件的路径。</param>
			</member>
			<member name="M:System.IO.File.Exists(System.String)">
				<summary>
					确定指定的文件是否存在。
				</summary>
				<param name="path">要检查的文件。</param>
				<returns></returns>
			</member>
			<member name="M:System.IO.File.GetAttributes(System.String)">
				<summary>
					获取在此路径上的文件的 FileAttributes。
				</summary>
				<param name="path">文件的路径。</param>
				<returns>路径上文件的 FileAttributes。</returns>
			</member>
			<member name="M:System.IO.File.GetCreationTime(System.String)">
				<summary>
					返回指定文件或目录的创建日期和时间。
				</summary>
				<param name="path">要获取其创建日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为指定文件或目录的创建日期和时间。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.File.GetCreationTimeUtc(System.String)">
				<summary>
					返回指定的文件或目录的创建日期及时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要获取其创建日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为指定文件或目录的创建日期和时间。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.File.GetLastAccessTime(System.String)">
				<summary>
					返回上次访问指定文件或目录的日期和时间。
				</summary>
				<param name="path">要获取其访问日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.File.GetLastAccessTimeUtc(System.String)">
				<summary>
					返回上次访问指定的文件或目录的日期及时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要获取其访问日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.File.GetLastWriteTime(System.String)">
				<summary>
					返回上次写入指定文件或目录的日期和时间。
				</summary>
				<param name="path">要获取其写入日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.File.GetLastWriteTimeUtc(System.String)">
				<summary>
					返回上次写入指定的文件或目录的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要获取其写入日期和时间信息的文件或目录。</param>
				<returns>一个 DateTime 结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.File.Move(System.String,System.String)">
				<summary>
					将指定文件移到新位置，提供要指定新文件名的选项。
				</summary>
				<param name="sourceFileName">要移动的文件的名称。 可以包括相对或绝对路径。</param>
				<param name="destFileName">文件的新路径和名称。</param>
			</member>
			<member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
				<summary>
					通过不共享的读/写访问权限打开指定路径上的 FileStream。
				</summary>
				<param name="path">要打开的文件。</param>
				<param name="mode">FileMode 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。</param>
				<returns>以读/写访问与不共享权限打开的指定模式和路径上的 FileStream。</returns>
			</member>
			<member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
				<summary>
					通过指定的模式和不共享的访问权限打开指定路径上的 FileStream。
				</summary>
				<param name="path">要打开的文件。</param>
				<param name="mode">FileMode 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。</param>
				<param name="access">一个 FileAccess 值，它指定可以对文件执行的操作。</param>
				<returns>一个非共享的 FileStream，它提供对指定文件的访问，并且具有指定的模式和访问权限。</returns>
			</member>
			<member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
				<summary>
					打开指定路径上的 FileStream，具有带读、写或读/写访问的指定模式和指定的共享选项。
				</summary>
				<param name="path">要打开的文件。</param>
				<param name="mode">FileMode 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。</param>
				<param name="access">一个 FileAccess 值，它指定可以对文件执行的操作。</param>
				<param name="share">一个 FileShare 值，它指定其他线程所具有的对该文件的访问类型。</param>
				<returns>指定路径上的 FileStream，具有带读、写或读/写访问的指定模式以及指定的共享选项。</returns>
			</member>
			<member name="M:System.IO.File.OpenRead(System.String)">
				<summary>
					打开现有文件以进行读取。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<returns>指定路径上的只读 FileStream。</returns>
			</member>
			<member name="M:System.IO.File.OpenText(System.String)">
				<summary>
					打开现有 UTF-8 编码文本文件以进行读取。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<returns>指定路径上的 StreamReader。</returns>
			</member>
			<member name="M:System.IO.File.OpenWrite(System.String)">
				<summary>
					打开一个现有文件或创建一个新文件以进行写入。
				</summary>
				<param name="path">要打开以进行写入的文件。</param>
				<returns>指定路径上具有 FileStream 访问权限的非共享的 Write 对象。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllBytes(System.String)">
				<summary>
					打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<returns>包含文件内容的字节数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
				<summary>
					以异步形式打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务，该任务包装包含文件内容的字节数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllLines(System.String)">
				<summary>
					打开一个文本文件，读取文件的所有行，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<returns>包含文件所有行的字符串数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)">
				<summary>
					打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="encoding">应用到文件内容的编码。</param>
				<returns>包含文件所有行的字符串数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					以异步形式打开一个文本文件，使用指定的编码读取文件的所有行，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="encoding">应用到文件内容的编码。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务，该任务包装包含文件所有行的字符串数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
				<summary>
					以异步形式打开一个文本文件，读取文件的所有行，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务，该任务包装包含文件所有行的字符串数组。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllText(System.String)">
				<summary>
					打开一个文本文件，读取文件中的所有文本，然后关闭此文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<returns>包含文件中所有文本的字符串。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)">
				<summary>
					打开一个文件，使用指定的编码读取文件中的所有文本，然后关闭此文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="encoding">应用到文件内容的编码。</param>
				<returns>包含文件中所有文本的字符串。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					以异步形式打开一个文本文件，使用指定的编码读取文件的所有文本，然后关闭该文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="encoding">应用到文件内容的编码。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务，该任务包装包含文件中所有文本的字符串。</returns>
			</member>
			<member name="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
				<summary>
					以异步形式打开一个文本文件，读取文件中的所有文本，然后关闭此文件。
				</summary>
				<param name="path">要打开以进行读取的文件。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务，该任务包装包含文件中所有文本的字符串。</returns>
			</member>
			<member name="M:System.IO.File.ReadLines(System.String)">
				<summary>
					读取文件的行。
				</summary>
				<param name="path">要读取的文件。</param>
				<returns>该文件的所有行或查询结果所示的行。</returns>
			</member>
			<member name="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)">
				<summary>
					读取具有指定编码的文件的行。
				</summary>
				<param name="path">要读取的文件。</param>
				<param name="encoding">应用到文件内容的编码。</param>
				<returns>该文件的所有行或查询结果所示的行。</returns>
			</member>
			<member name="M:System.IO.File.Replace(System.String,System.String,System.String)">
				<summary>
					使用其他文件的内容替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。
				</summary>
				<param name="sourceFileName">替换由 destinationFileName 指定的文件的文件名。</param>
				<param name="destinationFileName">被替换文件的名称。</param>
				<param name="destinationBackupFileName">备份文件的名称。</param>
			</member>
			<member name="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)">
				<summary>
					用其他文件的内容替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份，还可以忽略合并错误。
				</summary>
				<param name="sourceFileName">替换由 destinationFileName 指定的文件的文件名。</param>
				<param name="destinationFileName">被替换文件的名称。</param>
				<param name="destinationBackupFileName">备份文件的名称。</param>
				<param name="ignoreMetadataErrors">如果忽略从被替换文件到替换文件的合并错误（如特性和访问控制列表 (ACL)），则为 true，否则为 false。</param>
			</member>
			<member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
				<summary>
					获取指定路径上的文件的指定 FileAttributes。
				</summary>
				<param name="path">文件的路径。</param>
				<param name="fileAttributes">枚举值的按位组合。</param>
			</member>
			<member name="M:System.IO.File.SetCreationTime(System.String,System.DateTime)">
				<summary>
					设置创建该文件的日期和时间。
				</summary>
				<param name="path">要设置其创建日期和时间信息的文件。</param>
				<param name="creationTime">一个 DateTime，它包含要为 path 的创建日期和时间设置的值。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)">
				<summary>
					设置文件创建的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要设置其创建日期和时间信息的文件。</param>
				<param name="creationTimeUtc">一个 DateTime，它包含要为 path 的创建日期和时间设置的值。 该值用 UTC 时间表示。</param>
			</member>
			<member name="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)">
				<summary>
					设置上次访问指定文件的日期和时间。
				</summary>
				<param name="path">要设置其访问日期和时间信息的文件。</param>
				<param name="lastAccessTime">一个 DateTime，它包含要为 path 的上次访问日期和时间设置的值。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
				<summary>
					设置上次访问指定的文件的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要设置其访问日期和时间信息的文件。</param>
				<param name="lastAccessTimeUtc">一个 DateTime，它包含要为 path 的上次访问日期和时间设置的值。 该值用 UTC 时间表示。</param>
			</member>
			<member name="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)">
				<summary>
					设置上次写入指定文件的日期和时间。
				</summary>
				<param name="path">要设置其日期和时间信息的文件。</param>
				<param name="lastWriteTime">一个 DateTime，它包含要为 path 的上次写入日期和时间设置的值。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
				<summary>
					设置上次写入指定的文件的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要设置其日期和时间信息的文件。</param>
				<param name="lastWriteTimeUtc">一个 DateTime，它包含要为 path 的上次写入日期和时间设置的值。 该值用 UTC 时间表示。</param>
			</member>
			<member name="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])">
				<summary>
					创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="bytes">要写入文件的字节。</param>
			</member>
			<member name="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
				<summary>
					以异步形式创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="bytes">要写入文件的字节。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
				<summary>
					创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入到文件中的行。</param>
			</member>
			<member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
				<summary>
					使用指定的编码创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入到文件中的行。</param>
				<param name="encoding">要使用的字符编码。</param>
			</member>
			<member name="M:System.IO.File.WriteAllLines(System.String,System.String[])">
				<summary>
					创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串数组。</param>
			</member>
			<member name="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
				<summary>
					创建一个新文件，使用指定编码在其中写入指定的字符串数组，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串数组。</param>
				<param name="encoding">一个 Encoding 对象，它表示应用于字符串数组的字符编码。</param>
			</member>
			<member name="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					以异步形式创建一个新文件，使用指定编码在其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入到文件中的行。</param>
				<param name="encoding">要使用的字符编码。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
				<summary>
					以异步形式创建一个新文件，在其中写入指定的行，然后关闭该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入到文件中的行。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.File.WriteAllText(System.String,System.String)">
				<summary>
					创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串。</param>
			</member>
			<member name="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
				<summary>
					创建一个新文件，使用指定编码向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串。</param>
				<param name="encoding">应用于字符串的编码。</param>
			</member>
			<member name="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
				<summary>
					以异步形式创建一个新文件，使用指定编码在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串。</param>
				<param name="encoding">应用于字符串的编码。</param>
				<param name="cancellationToken"></param>
				<returns>要监视取消请求的标记。 默认值是 None。</returns>
			</member>
			<member name="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
				<summary>
					异步形式创建一个新文件，在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。
				</summary>
				<param name="path">要写入的文件。</param>
				<param name="contents">要写入文件的字符串。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
		</MF-System.IO.File>
		<MF-System.IO.FileStream>
			<member name="T:System.IO.FileStream">
				<summary>
					为文件提供 Stream，既支持同步读写操作，也支持异步读写操作。
				</summary>
			</member>
			<member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
				<summary>
					使用指定的读/写权限为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">当前 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
				<summary>
					使用指定的读/写权限为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">当前 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
				<summary>
					使用指定的路径和创建模式初始化 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
				<summary>
					使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">当前 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">一个 FileAccess 常数，它设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
				<summary>
					使用指定的读/写权限和 FileStream 实例所属权为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">当前 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
				<param name="ownsHandle">如果文件句柄将由此 FileStream 实例所有，则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
				<summary>
					使用指定的路径、创建模式和读/写权限初始化 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
				<param name="access">枚举值的按位组合，这些枚举值确定 FileStream 对象访问文件的方式。 该常数还可以确定由 FileStream 对象的 CanRead 和 CanWrite 属性返回的值。 如果 path 指定磁盘文件，则 CanSeek 为 true。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
				<summary>
					使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">此 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
				<param name="isAsync">如果异步打开句柄（即以重叠的 I/O 模式），则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
				<summary>
					使用指定的读/写权限、FileStream 实例所属权和缓冲区大小为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">此 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
				<param name="ownsHandle">如果文件句柄将由此 FileStream 实例所有，则为 true；否则为 false。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
				<summary>
					使用指定的路径、创建模式、读/写权限和共享权限创建 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
				<param name="access">枚举值的按位组合，这些枚举值确定 FileStream 对象访问文件的方式。 该常数还可以确定由 FileStream 对象的 CanRead 和 CanWrite 属性返回的值。 如果 path 指定磁盘文件，则 CanSeek 为 true。</param>
				<param name="share">枚举值的按位组合，这些枚举值确定进程共享文件的方式。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
				<summary>
					用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
				<param name="access">枚举值的按位组合，这些枚举值确定 FileStream 对象访问文件的方式。 该常数还可以确定由 FileStream 对象的 CanRead 和 CanWrite 属性返回的值。 如果 path 指定磁盘文件，则 CanSeek 为 true。</param>
				<param name="share">枚举值的按位组合，这些枚举值确定进程共享文件的方式。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
				<summary>
					使用指定的读/写权限、FileStream 实例所属权、缓冲区大小和同步或异步状态为指定的文件句柄初始化 FileStream 类的新实例。
				</summary>
				<param name="handle">此 FileStream 对象将封装的文件的文件句柄。</param>
				<param name="access">枚举值的按位组合，它用于设置 FileStream 对象的 CanRead 和 CanWrite 属性。</param>
				<param name="ownsHandle">如果文件句柄将由此 FileStream 实例所有，则为 true；否则为 false。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
				<param name="isAsync">如果异步打开句柄（即以重叠的 I/O 模式），则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
				<summary>
					使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
				<param name="access">枚举值的按位组合，这些枚举值确定 FileStream 对象访问文件的方式。 该常数还可以确定由 FileStream 对象的 CanRead 和 CanWrite 属性返回的值。 如果 path 指定磁盘文件，则 CanSeek 为 true。</param>
				<param name="share">枚举值的按位组合，这些枚举值确定进程共享文件的方式。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
				<param name="useAsync">指定使用异步 I/O 还是同步 I/O。 但是，请注意，基础操作系统可能不支持异步 I/O，因此在指定 true 后，根据所用平台，句柄可能同步打开。 当异步打开时，BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) 和 BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) 方法在执行大量读或写时效果更好，但对于少量的读/写，这些方法速度可能要慢得多。 如果应用程序打算利用异步 I/O，将 useAsync 参数设置为 true。 正确使用异步 I/O 可以使应用程序的速度加快 10 倍，但是如果在没有为异步 I/O 重新设计应用程序的情况下使用异步 I/O，则可能使性能降低 10 倍。</param>
			</member>
			<member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
				<summary>
					使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化 FileStream 类的新实例。
				</summary>
				<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。</param>
				<param name="mode">用于确定文件的打开或创建方式的枚举值之一。</param>
				<param name="access">枚举值的按位组合，这些枚举值确定 FileStream 对象访问文件的方式。 该常数还可以确定由 FileStream 对象的 CanRead 和 CanWrite 属性返回的值。 如果 path 指定磁盘文件，则 CanSeek 为 true。</param>
				<param name="share">枚举值的按位组合，这些枚举值确定进程共享文件的方式。</param>
				<param name="bufferSize">一个大于零的正 Int32 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
				<param name="options">枚举值的按位组合，它用于指定其他文件选项。</param>
			</member>
			<member name="M:System.IO.FileStream.Finalize">
				<summary>
					确保垃圾回收器回收 FileStream 时释放资源并执行其他清理操作。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.Name">
				<summary>
					获取 FileStream 中已打开的文件的绝对路径。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.Length">
				<summary>
					获取流的长度（以字节为单位）。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.IsAsync">
				<summary>
					获取一个值，它指示 FileStream 是异步打开还是同步打开的。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.Handle">
				<summary>
					获取当前 FileStream 对象所封装文件的操作系统文件句柄。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.CanWrite">
				<summary>
					获取一个值，该值指示当前流是否支持写入。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.CanSeek">
				<summary>
					获取一个值，该值指示当前流是否支持查找。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.CanRead">
				<summary>
					获取一个值，该值指示当前流是否支持读取。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.Position">
				<summary>
					获取或设置此流的当前位置。
				</summary>
			</member>
			<member name="P:System.IO.FileStream.SafeFileHandle">
				<summary>
					获取 SafeFileHandle 对象，它代表当前 FileStream 对象所封装的文件的操作系统文件句柄。
				</summary>
			</member>
			<member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步读操作。 请考虑改用 ReadAsync(Byte[], Int32, Int32, CancellationToken)。
				</summary>
				<param name="array">将数据读入的缓冲区。</param>
				<param name="offset">array 中的字节偏移量，从此处开始读取。</param>
				<param name="numBytes">最多读取的字节数。</param>
				<param name="callback">异步读操作完成后调用的方法。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
				<returns>引用异步读取的对象。</returns>
			</member>
			<member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步写操作。 请考虑改用 WriteAsync(Byte[], Int32, Int32, CancellationToken)。
				</summary>
				<param name="array">包含要写入当前流的数据的缓冲区。</param>
				<param name="offset">array 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
				<param name="numBytes">最多写入的字节数。</param>
				<param name="callback">异步写操作完成后调用的方法。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
				<returns>引用异步写入的对象。</returns>
			</member>
			<member name="M:System.IO.FileStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
				<summary>
					使用指定的缓冲区大小和取消令牌，从当前文件流中异步读取字节并将其写入到另一个流中。
				</summary>
				<param name="destination">向其中复制当前文件流的内容的流。</param>
				<param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值为 None。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.FileStream.DisposeAsync">
				<summary>
					异步释放 FileStream 使用的非托管资源。
				</summary>
				<returns>一个表示异步释放操作的任务。</returns>
			</member>
			<member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
				<summary>
					等待挂起的异步读操作完成。 （请考虑改用 ReadAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="asyncResult">对所等待的挂起异步请求的引用。</param>
				<returns>从流中读取的字节数，介于 0 和所请求的字节数之间。 流仅在流结尾返回 0，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
			</member>
			<member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
				<summary>
					结束异步写入操作，在 I/O 操作完成之前一直阻止。 （请考虑改用 WriteAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="asyncResult">挂起的异步 I/O 请求。</param>
			</member>
			<member name="M:System.IO.FileStream.Flush">
				<summary>
					清除此流的缓冲区，使得所有缓冲数据都写入到文件中。
				</summary>
			</member>
			<member name="M:System.IO.FileStream.Flush(System.Boolean)">
				<summary>
					清除此流的缓冲区，将所有缓冲数据都写入到文件中，并且也清除所有中间文件缓冲区。
				</summary>
				<param name="flushToDisk">如果刷新所有中间文件缓冲区，则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
				<summary>
					异步清理此流的所有缓冲区，导致所有缓冲数据都写入基础设备，并且监控取消请求。
				</summary>
				<param name="cancellationToken">要监视取消请求的标记。</param>
				<returns>表示异步刷新操作的任务。</returns>
			</member>
			<member name="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
				<summary>
					防止其他进程读取或写入 FileStream。
				</summary>
				<param name="position">要锁定的范围的起始处。 此参数的值必须大于或等于零 (0)。</param>
				<param name="length">要锁定的范围。</param>
			</member>
			<member name="M:System.IO.FileStream.Read(System.Span{System.Byte})">
				<summary>
					从当前文件流中读取字节序列，并在该文件流中按照读取的字节数提升位置。
				</summary>
				<param name="buffer">内存的区域。 当此方法返回时，此区域的内容将替换为从当前文件流读取的字节。</param>
				<returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
			</member>
			<member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
				<summary>
					从流中读取字节块并将该数据写入给定缓冲区中。
				</summary>
				<param name="array">当此方法返回时，包含指定的字节数组，此数组中 offset 和 (offset + count - 1) 之间的值被从当前源中读取的字节所替换。</param>
				<param name="offset">array 中的字节偏移量，将在此处放置读取的字节。</param>
				<param name="count">最多读取的字节数。</param>
				<returns>读入缓冲区中的总字节数。 如果字节数当前不可用，则总字节数可能小于所请求的字节数；如果已到达流结尾，则为零。</returns>
			</member>
			<member name="M:System.IO.FileStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					从当前文件流异步读取字节的序列，将其写入某内存区域，按读取的字节数向前移动文件流中的位置，并监视取消请求。
				</summary>
				<param name="buffer">要写入数据的缓冲区。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值为 None。</param>
				<returns>一个表示异步读取操作并将读取的总字节数包装到缓冲区中的任务。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
			</member>
			<member name="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					从当前文件流异步读取字节的序列，将其写入从指定偏移量开始的字节数组，按读取的字节数向前移动文件流中的位置，并监视取消请求。
				</summary>
				<param name="buffer">要写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。</param>
				<returns>一个表示异步读取操作并将读取的总字节数包装到缓冲区中的任务。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
			</member>
			<member name="M:System.IO.FileStream.ReadByte">
				<summary>
					从文件中读取一个字节，并将读取位置提升一个字节。
				</summary>
				<returns>强制转换为 Int32 的字节；或者如果已到达流的末尾，则为 -1。</returns>
			</member>
			<member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
				<summary>
					将该流的当前位置设置为给定值。
				</summary>
				<param name="offset">相对于 origin 的点，从此处开始查找。</param>
				<param name="origin">使用 SeekOrigin 类型的值，将开始位置、结束位置或当前位置指定为 offset 的参考点。</param>
				<returns>流中的新位置。</returns>
			</member>
			<member name="M:System.IO.FileStream.SetLength(System.Int64)">
				<summary>
					将该流的长度设置为给定值。
				</summary>
				<param name="value">流的新长度。</param>
			</member>
			<member name="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
				<summary>
					允许其他进程访问以前锁定的某个文件的全部或部分。
				</summary>
				<param name="position">要取消锁定的范围的开始处。</param>
				<param name="length">要取消锁定的范围。</param>
			</member>
			<member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
				<summary>
					将字节块写入文件流。
				</summary>
				<param name="array">包含要写入该流的数据的缓冲区。</param>
				<param name="offset">array 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
				<param name="count">最多写入的字节数。</param>
			</member>
			<member name="M:System.IO.FileStream.Write(System.ReadOnlySpan{System.Byte})">
				<summary>
					将字节的序列从只读范围写入当前文件流，并按写入的字节数向前移动此文件流中的当前位置。
				</summary>
				<param name="buffer">内存的区域。 此方法将此区域的内容复制到当前文件流。</param>
			</member>
			<member name="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
				<param name="count">最多写入的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.FileStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					将字节的序列从内存区域异步写入当前文件流，按写入的字节数向前移动该文件流中的当前位置，并监视取消请求。
				</summary>
				<param name="buffer">从中写入数据的内存区域。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值为 None。</param>
				<returns></returns>
			</member>
			<member name="M:System.IO.FileStream.WriteByte(System.Byte)">
				<summary>
					一个字节写入文件流中的当前位置。
				</summary>
				<param name="value">要写入流的字节。</param>
			</member>
			<member name="M:System.IO.FileStream.Dispose(System.Boolean)">
				<summary>
					释放由 FileStream 占用的非托管资源，还可以另外再释放托管资源。
				</summary>
				<param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
			</member>
		</MF-System.IO.FileStream>
		<MF-System.IO.Directory>
			<member name="T:System.IO.Directory">
				<summary>
					公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.IO.Directory.CreateDirectory(System.String)">
				<summary>
					在指定路径中创建所有目录和子目录，除非它们已经存在。
				</summary>
				<param name="path">要创建的目录。</param>
				<returns>一个表示在指定路径的目录的对象。 无论指定路径的目录是否已经存在，都将返回此对象。</returns>
			</member>
			<member name="M:System.IO.Directory.Delete(System.String)">
				<summary>
					从指定路径删除空目录。
				</summary>
				<param name="path">要移除的空目录的名称。 此目录必须可写且为空。</param>
			</member>
			<member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
				<summary>
					删除指定的目录，并删除该目录中的所有子目录和文件（如果表示）。
				</summary>
				<param name="path">要删除的目录的名称。</param>
				<param name="recursive">若要删除 path 中的目录、子目录和文件，则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.Directory.EnumerateDirectories(System.String)">
				<summary>
					返回指定路径中的目录完整名称的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>一个可枚举集合，它包含目录中由 path 指定的目录的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)">
				<summary>
					返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串成。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>path 指定且与指定的搜索模式相匹配的目录中的文件的全名（包括路径）的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合，还可搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串成。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个可枚举集合，它包含 path 指定的目录中与指定的搜索模式和枚举选项匹配的目录的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合，还可搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串成。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>一个可枚举集合，它包含 path 指定的目录中与指定的搜索模式和搜索选项匹配的目录的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回指定路径中与搜索模式匹配的完整文件名的可枚举集合，还可以搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>一个可枚举集合，它包含 path 指定的目录中与指定的搜索模式和搜索选项匹配的文件的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定路径中与搜索模式和枚举选项匹配的完整文件名的可枚举集合，还可以搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个可枚举集合，它包含 path 指定的目录中与指定的搜索模式和枚举选项匹配的文件的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFiles(System.String)">
				<summary>
					返回指定路径中的完整文件名的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>一个可枚举集合，它包含目录中 path 指定的文件的完整名称（包括路径）。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String)">
				<summary>
					返回指定路径中与搜索模式匹配的完整文件名的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>path 指定且与指定的搜索模式相匹配的目录中的文件的全名（包括路径）的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)">
				<summary>
					返回指定路径中的文件名和目录名的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>path 指定的目录中的文件系统条目的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)">
				<summary>
					返回指定路径中与搜索模式匹配的文件名和目录名的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件系统条目的名称进行匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>由 path 指定且与指定的搜索模式匹配的目录中的文件系统条目的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定路径中与搜索模式和枚举选项匹配的文件名和目录名的可枚举集合。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个可枚举集合，它包含 path 指定的目录中与指定搜索模式和指定枚举选项匹配的文件系统项。</returns>
			</member>
			<member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回指定路径中与搜索模式匹配的文件名称和目录名的可枚举集合，还可以搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件系统项匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>由 path 指定的目录中与指定搜索模式和选项匹配的文件系统项的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.Directory.Exists(System.String)">
				<summary>
					确定给定路径是否引用磁盘上的现有目录。
				</summary>
				<param name="path">要测试的路径。</param>
				<returns>如果 path 指向现有目录，则为 true；如果该目录不存在或者在尝试确定指定目录是否存在时出错，则为 false。</returns>
			</member>
			<member name="M:System.IO.Directory.GetCreationTime(System.String)">
				<summary>
					获取目录的创建日期和时间。
				</summary>
				<param name="path">目录的路径。</param>
				<returns>一个设置为指定目录的创建日期和时间的结构。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetCreationTimeUtc(System.String)">
				<summary>
					获取目录创建的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">目录的路径。</param>
				<returns>一个设置为指定目录的创建日期和时间的结构。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetCurrentDirectory">
				<summary>
					获取应用程序的当前工作目录。
				</summary>
				<returns>一个字符串，该字符串包含当前工作目录的绝对路径且不以反斜杠 (\) 结尾。</returns>
			</member>
			<member name="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定目录中与指定的搜索模式和枚举选项匹配的子目录的名称（包括其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个数组，它包含指定目录中与搜索模式和枚举选项匹配的子目录的完整名称（包含路径）；如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回与在指定目录中的指定搜索模式匹配的子目录的名称（包括其路径），还可以选择地搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应包含所有子目录还是仅包含当前目录的枚举值之一。</param>
				<returns>与指定条件匹配的子目录的完整名称（包含路径）的数组；如果未找到任何目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetDirectories(System.String)">
				<summary>
					返回指定目录中的子目录的名称（包括其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>指定路径中子目录的完整名称（包含路径）的数组；如果未找到任何目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
				<summary>
					返回指定目录中与指定的搜索模式匹配的子目录的名称（包括其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<returns>指定目录中与搜索模式匹配的子目录的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
				<summary>
					返回指定路径的卷信息、根信息或两者同时返回。
				</summary>
				<param name="path">文件或目录的路径。</param>
				<returns>包含指定路径的卷信息、根信息或同时包括这两者的字符串。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFiles(System.String)">
				<summary>
					返回指定目录中文件的名称（包括其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>一个包含指定目录中的文件的完整名称（包含路径）的数组，如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
				<summary>
					返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>指定目录中与指定的搜索模式匹配的文件的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定目录中与指定的搜索模式和枚举选项匹配的文件的名称（包括其路径）。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个数组，它包含指定目录中与指定的搜索模式和枚举选项匹配的文件的完整名称（包含路径）；如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径），使用某个值确定是否要搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应包含所有子目录还是仅包含当前目录的枚举值之一。</param>
				<returns>指定目录中与指定的搜索模式和选项匹配的文件的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
				<summary>
					返回指定路径中的所有文件和子目录的名称。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<returns>指定目录中的文件和子目录的名称的数组；如果找不到任何文件或子目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
				<summary>
					返回一个数组，其中包含与指定路径中的搜索模式相匹配的文件名和目录名称。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件和目录的名称匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与指定的搜索条件匹配的文件名和目录名的数组；如果找不到任何文件或目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
				<summary>
					返回指定路径中与搜索模式和枚举选项匹配的文件名和目录名的数组。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>一个数组，它包含与指定的搜索模式和枚举选项匹配的文件名和目录名；如果找不到任何文件或目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
				<summary>
					返回指定路径中与搜索模式匹配的所有文件名和目录名的数组，还可以搜索子目录。
				</summary>
				<param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
				<param name="searchPattern">要与 path 中的文件和目录的名称匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>与指定的搜索条件匹配的文件名和目录名的数组；如果找不到任何文件或目录，则为空数组。</returns>
			</member>
			<member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
				<summary>
					返回上次访问指定文件或目录的日期和时间。
				</summary>
				<param name="path">要获取其访问日期和时间信息的文件或目录。</param>
				<returns>一个结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)">
				<summary>
					返回上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要获取其访问日期和时间信息的文件或目录。</param>
				<returns>一个结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
				<summary>
					返回上次写入指定文件或目录的日期和时间。
				</summary>
				<param name="path">要获取其修改日期和时间信息的文件或目录。</param>
				<returns>一个结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)">
				<summary>
					返回上次写入指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要获取其修改日期和时间信息的文件或目录。</param>
				<returns>一个结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
			</member>
			<member name="M:System.IO.Directory.GetLogicalDrives">
				<summary>
					检索此计算机上格式为“{drive letter}:\”的逻辑驱动器的名称。
				</summary>
				<returns>此计算机上的逻辑驱动器。</returns>
			</member>
			<member name="M:System.IO.Directory.GetParent(System.String)">
				<summary>
					检索指定路径的父目录，包括绝对路径和相对路径。
				</summary>
				<param name="path">要为其检索父目录的路径。</param>
				<returns>父目录，如果 path 是根目录，包括 UNC 服务器或共享名的根，则为 null。</returns>
			</member>
			<member name="M:System.IO.Directory.Move(System.String,System.String)">
				<summary>
					将文件或目录及其内容移到新位置。
				</summary>
				<param name="sourceDirName">要移动的文件或目录的路径。</param>
				<param name="destDirName">新位置 sourceDirName 的路径或其内容。 如果 sourceDirName 是文件，那么 destDirName 也必须是文件名。</param>
			</member>
			<member name="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)">
				<summary>
					为指定的文件或目录设置创建日期和时间。
				</summary>
				<param name="path">要设置其创建日期和时间信息的文件或目录。</param>
				<param name="creationTime">上次写入到文件或目录的日期和时间。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
				<summary>
					设置指定文件或目录的创建日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要设置其创建日期和时间信息的文件或目录。</param>
				<param name="creationTimeUtc">目录或文件的创建日期和时间。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
				<summary>
					将应用程序的当前工作目录设置为指定的目录。
				</summary>
				<param name="path">设置为当前工作目录的路径。</param>
			</member>
			<member name="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)">
				<summary>
					设置上次访问指定文件或目录的日期和时间。
				</summary>
				<param name="path">要设置其访问日期和时间信息的文件或目录。</param>
				<param name="lastAccessTime">一个对象，它包含要为 path 的访问日期和时间设置的值。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
				<summary>
					设置上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">要设置其访问日期和时间信息的文件或目录。</param>
				<param name="lastAccessTimeUtc">一个对象，它包含要为 path 的访问日期和时间设置的值。 该值用 UTC 时间表示。</param>
			</member>
			<member name="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)">
				<summary>
					设置上次写入目录的日期和时间。
				</summary>
				<param name="path">目录的路径。</param>
				<param name="lastWriteTime">上次写入目录的日期和时间。 该值用本地时间表示。</param>
			</member>
			<member name="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
				<summary>
					设置上次写入某个目录的日期和时间，其格式为协调通用时 (UTC)。
				</summary>
				<param name="path">目录的路径。</param>
				<param name="lastWriteTimeUtc">上次写入目录的日期和时间。 该值用 UTC 时间表示。</param>
			</member>
		</MF-System.IO.Directory>
		<MF-System.IO.DirectoryInfo>
			<member name="T:System.IO.DirectoryInfo">
				<summary>
					公开用于创建、移动和枚举目录和子目录的实例方法。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
				<summary>
					初始化指定路径上的 DirectoryInfo 类的新实例。
				</summary>
				<param name="path">一个字符串，它指定要在其中创建 DirectoryInfo 的路径。</param>
			</member>
			<member name="P:System.IO.DirectoryInfo.Name">
				<summary>
					获取此 DirectoryInfo 实例的名称。
				</summary>
			</member>
			<member name="P:System.IO.DirectoryInfo.Exists">
				<summary>
					获取指示目录是否存在的值。
				</summary>
			</member>
			<member name="P:System.IO.DirectoryInfo.Parent">
				<summary>
					获取指定的子目录的父目录。
				</summary>
			</member>
			<member name="P:System.IO.DirectoryInfo.Root">
				<summary>
					获取目录的根部分。
				</summary>
			</member>
			<member name="M:System.IO.DirectoryInfo.Create">
				<summary>
					创建目录。
				</summary>
			</member>
			<member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
				<summary>
					在指定路径上创建一个或多个子目录。 指定路径可以是相对于 DirectoryInfo 类的此实例的路径。
				</summary>
				<param name="path">指定的路径。 它不能是另一个磁盘卷或通用命名约定 (UNC) 名称。</param>
				<returns>在 path 中指定的最后一个目录。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.Delete">
				<summary>
					如果此 DirectoryInfo 为空则将其删除。
				</summary>
			</member>
			<member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
				<summary>
					删除 DirectoryInfo 的此实例，指定是否删除子目录和文件。
				</summary>
				<param name="recursive">如果要删除此目录，则为 true；否则为 false。</param>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateDirectories">
				<summary>
					返回当前目录中的目录信息的可枚举集合。
				</summary>
				<returns>当前目录中目录的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)">
				<summary>
					返回与指定的搜索模式匹配的目录信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与 searchPattern 匹配的目录的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.EnumerationOptions)">
				<summary>
					返回与指定的搜索模式和枚举选项匹配的目录信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的目录的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
				<summary>
					返回与指定的搜索模式和搜索子目录选项匹配的目录信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>与 searchPattern 和 searchOption 匹配的目录的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFiles">
				<summary>
					返回当前目录中的文件信息的可枚举集合。
				</summary>
				<returns>当前目录中的文件的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)">
				<summary>
					返回与搜索模式匹配的文件信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与 searchPattern 匹配的文件的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.EnumerationOptions)">
				<summary>
					返回与指定的搜索模式和枚举选项匹配的文件信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的文件的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
				<summary>
					返回与指定的搜索模式和搜索子目录选项匹配的文件信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>与 searchPattern 和 searchOption 匹配的文件的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos">
				<summary>
					返回当前目录中的文件系统信息的可枚举集合。
				</summary>
				<returns>当前目录中的文件系统信息的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
				<summary>
					返回与指定的搜索模式匹配的文件系统信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与 searchPattern 匹配的文件系统信息对象的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.EnumerationOptions)">
				<summary>
					返回与指定的搜索模式和枚举选项匹配的文件系统信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的文件系统信息对象的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
				<summary>
					返回与指定的搜索模式和搜索子目录选项匹配的文件系统信息的可枚举集合。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>与 searchPattern 和 searchOption 匹配的文件系统信息对象的可枚举集合。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.EnumerationOptions)">
				<summary>
					返回当前 DirectoryInfo 中与指定的搜索模式和枚举选项匹配的目录的数组。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的 DirectoryInfo 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
				<summary>
					返回当前 DirectoryInfo 中与给定的搜索条件匹配并使用某个值确定是否在子目录中搜索的目录的数组。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。</param>
				<returns>与 DirectoryInfo 匹配的 searchPattern 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
				<summary>
					返回当前 DirectoryInfo 中、与给定搜索条件匹配的目录的数组。
				</summary>
				<param name="searchPattern">要与目录名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与 DirectoryInfo 匹配的 searchPattern 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetDirectories">
				<summary>
					返回当前目录的子目录。
				</summary>
				<returns>一个 DirectoryInfo 对象数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
				<summary>
					返回当前目录中与给定的搜索模式匹配的文件列表。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>FileInfo 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.EnumerationOptions)">
				<summary>
					返回当前目录中与指定的搜索模式和枚举选项匹配的文件列表。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的强类型化 FileInfo 对象的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
				<summary>
					返回与给定的搜索模式匹配并且使用某个值确定是否在子目录中进行搜索的当前目录的文件列表。
				</summary>
				<param name="searchPattern">要与文件名匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。</param>
				<returns>FileInfo 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFiles">
				<summary>
					返回当前目录的文件列表。
				</summary>
				<returns>FileInfo 类型的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
				<summary>
					返回表示某个目录中所有文件和子目录的强类型 FileSystemInfo 项的数组。
				</summary>
				<returns>强类型 FileSystemInfo 项的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
				<summary>
					检索表示与指定的搜索条件匹配的文件和子目录的强类型 FileSystemInfo 对象的数组。
				</summary>
				<param name="searchPattern">要与目录和文件的名称匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<returns>与搜索条件匹配的强类型 FileSystemInfo 对象的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.EnumerationOptions)">
				<summary>
					检索强类型 FileSystemInfo 对象的数组，这些对象表示与指定的搜索模式和枚举选项匹配的文件和子目录。
				</summary>
				<param name="searchPattern">要与目录和文件的名称匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
				<returns>与 searchPattern 和 enumerationOptions 匹配的强类型 FileSystemInfo 对象的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
				<summary>
					检索表示与指定的搜索条件匹配的文件和子目录的 FileSystemInfo 对象的数组。
				</summary>
				<param name="searchPattern">要与目录和文件的名称匹配的搜索字符串。 此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
				<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 TopDirectoryOnly。</param>
				<returns>与搜索条件匹配的文件系统项的数组。</returns>
			</member>
			<member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
				<summary>
					将 DirectoryInfo 实例及其内容移动到新路径。
				</summary>
				<param name="destDirName">要将此目录移动到的目标位置的名称和路径。 目标不能是另一个具有相同名称的磁盘卷或目录。 它可以是您要将此目录作为子目录添加到其中的一个现有目录。</param>
			</member>
			<member name="M:System.IO.DirectoryInfo.ToString">
				<summary>
					返回传递给 DirectoryInfo 构造函数的原始路径。 使用 FullName 或 Name 属性作为完整路径或文件/目录名，而不是此方法。
				</summary>
				<returns>用户所传递的原始路径。</returns>
			</member>
		</MF-System.IO.DirectoryInfo>
		<MF-System.IO.FileInfo>
			<member name="T:System.IO.FileInfo">
				<summary>
					提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 FileStream 对象。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.IO.FileInfo.#ctor(System.String)">
				<summary>
					初始化作为文件路径的包装的 FileInfo 类的新实例。
				</summary>
				<param name="fileName">新文件的完全限定名或相对文件名。 路径不要以目录分隔符结尾。</param>
			</member>
			<member name="P:System.IO.FileInfo.IsReadOnly">
				<summary>
					获取或设置确定当前文件是否为只读的值。
				</summary>
			</member>
			<member name="P:System.IO.FileInfo.Exists">
				<summary>
					获取指示文件是否存在的值。
				</summary>
			</member>
			<member name="P:System.IO.FileInfo.DirectoryName">
				<summary>
					获取表示目录的完整路径的字符串。
				</summary>
			</member>
			<member name="P:System.IO.FileInfo.Directory">
				<summary>
					获取父目录的实例。
				</summary>
			</member>
			<member name="P:System.IO.FileInfo.Length">
				<summary>
					获取当前文件的大小（以字节为单位）。
				</summary>
			</member>
			<member name="P:System.IO.FileInfo.Name">
				<summary>
					获取文件名。
				</summary>
			</member>
			<member name="M:System.IO.FileInfo.AppendText">
				<summary>
					创建一个 StreamWriter，它向 FileInfo 的此实例表示的文件追加文本。
				</summary>
				<returns>一个新的 StreamWriter。</returns>
			</member>
			<member name="M:System.IO.FileInfo.CopyTo(System.String)">
				<summary>
					将现有文件复制到新文件，不允许覆盖现有文件。
				</summary>
				<param name="destFileName">要复制到的新文件的名称。</param>
				<returns>带有完全限定路径的新文件。</returns>
			</member>
			<member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
				<summary>
					将现有文件复制到新文件，允许覆盖现有文件。
				</summary>
				<param name="destFileName">要复制到的新文件的名称。</param>
				<param name="overwrite">如果允许覆盖现有文件，则为 true；否则为 false。</param>
				<returns>新文件,如果 overwrite 是 true，则为现有文件的覆盖。 如果文件存在且 overwrite 为 false，则引发 IOException。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Create">
				<summary>
					创建文件。
				</summary>
				<returns>新文件。</returns>
			</member>
			<member name="M:System.IO.FileInfo.CreateText">
				<summary>
					创建写入新文本文件的 StreamWriter。
				</summary>
				<returns>一个新的 StreamWriter。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Decrypt">
				<summary>
					使用 Encrypt() 方法解密由当前帐户加密的文件。
				</summary>
			</member>
			<member name="M:System.IO.FileInfo.Delete">
				<summary>
					永久删除文件。
				</summary>
			</member>
			<member name="M:System.IO.FileInfo.Encrypt">
				<summary>
					将某个文件加密，使得只有加密该文件的帐户才能将其解密。
				</summary>
			</member>
			<member name="M:System.IO.FileInfo.MoveTo(System.String)">
				<summary>
					将指定文件移到新位置，提供要指定新文件名的选项。
				</summary>
				<param name="destFileName">要将文件移动到的路径，可以指定不同的文件名。</param>
			</member>
			<member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
				<summary>
					用读、写或读/写访问权限和指定的共享选项在指定的模式中打开文件。
				</summary>
				<param name="mode">一个 FileMode 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。</param>
				<param name="access">一个 FileAccess 常数，它指定是使用 Read、Write 还是 ReadWrite 文件访问来打开文件。</param>
				<param name="share">一个 FileShare 常数，它指定其他 FileStream 对象对此文件拥有的访问类型。</param>
				<returns>用指定的模式、访问权限和共享选项打开的 FileStream 对象。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
				<summary>
					用读、写或读/写访问权限在指定模式下打开文件。
				</summary>
				<param name="mode">一个 FileMode 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。</param>
				<param name="access">一个 FileAccess 常数，它指定是使用 Read、Write 还是 ReadWrite 文件访问来打开文件。</param>
				<returns>用指定模式和访问权限打开的且不共享的 FileStream 对象。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
				<summary>
					在指定的模式中打开文件。
				</summary>
				<param name="mode">一个 FileMode 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。</param>
				<returns>在指定模式中打开、具有读/写访问权限且不共享的文件。</returns>
			</member>
			<member name="M:System.IO.FileInfo.OpenRead">
				<summary>
					创建一个只读的 FileStream。
				</summary>
				<returns>一个新的只读的 FileStream 对象。</returns>
			</member>
			<member name="M:System.IO.FileInfo.OpenText">
				<summary>
					创建使用从现有文本文件中读取的 UTF8 编码的 StreamReader。
				</summary>
				<returns>使用 UTF8 编码的新的 StreamReader。</returns>
			</member>
			<member name="M:System.IO.FileInfo.OpenWrite">
				<summary>
					创建一个只写的 FileStream。
				</summary>
				<returns>新的或现有文件的只写非共享的 FileStream 对象。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)">
				<summary>
					使用当前 FileInfo 对象所描述的文件替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。 还指定是否忽略合并错误。
				</summary>
				<param name="destinationFileName">要替换为当前文件的文件的名称。</param>
				<param name="destinationBackupFileName">文件的名称，该文件用于创建 destFileName 参数所描述的文件的备份。</param>
				<param name="ignoreMetadataErrors">若要忽略从被替换文件到替换文件的合并错误（例如特性和 ACL），请设置为 true；否则设置为 false。</param>
				<returns>一个 FileInfo 对象，该对象封装有关 destFileName 参数所描述的文件的信息。</returns>
			</member>
			<member name="M:System.IO.FileInfo.Replace(System.String,System.String)">
				<summary>
					使用当前 FileInfo 对象所描述的文件替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。
				</summary>
				<param name="destinationFileName">要替换为当前文件的文件的名称。</param>
				<param name="destinationBackupFileName">文件的名称，该文件用于创建 destFileName 参数所描述的文件的备份。</param>
				<returns>一个 FileInfo 对象，该对象封装有关 destFileName 参数所描述的文件的信息。</returns>
			</member>
			<member name="M:System.IO.FileInfo.ToString">
				<summary>
					以字符串形式返回路径。 将 Name 属性用于完整路径。
				</summary>
				<returns>一个表示该路径的字符串。</returns>
			</member>
		</MF-System.IO.FileInfo>
		<MF-System.IO.FileSystemInfo>
			<member name="T:System.IO.FileSystemInfo">
				<summary>
					为 FileInfo 和 DirectoryInfo 对象提供基类。
				</summary>
			</member>
			<member name="F:System.IO.FileSystemInfo.FullPath">
				<summary>
					表示目录或文件的完全限定目录。
				</summary>
			</member>
			<member name="F:System.IO.FileSystemInfo.OriginalPath">
				<summary>
					最初由用户指定的目录（不论是相对目录还是绝对目录）。
				</summary>
			</member>
			<member name="M:System.IO.FileSystemInfo.#ctor">
				<summary>
					初始化 FileSystemInfo 类的新实例。
				</summary>
			</member>
			<member name="M:System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					用序列化数据初始化 FileSystemInfo 类的新实例。
				</summary>
				<param name="info">包含有关所引发异常的序列化对象数据的 SerializationInfo。</param>
				<param name="context">StreamingContext，它包含关于源或目标的上下文信息。</param>
			</member>
			<member name="P:System.IO.FileSystemInfo.LastWriteTime">
				<summary>
					获取或设置上次写入当前文件或目录的时间。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.LastAccessTimeUtc">
				<summary>
					获取或设置上次访问当前文件或目录的时间，其格式为协调世界时 (UTC)。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.LastAccessTime">
				<summary>
					获取或设置上次访问当前文件或目录的时间。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.FullName">
				<summary>
					获取目录或文件的完整目录。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.Extension">
				<summary>
					获取文件名的扩展名部分，包括前导点 。 即使它是整个文件名，或者不存在扩展名的空字符串。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.Exists">
				<summary>
					获取指示文件或目录是否存在的值。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.CreationTime">
				<summary>
					获取或设置当前文件或目录的创建时间。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.LastWriteTimeUtc">
				<summary>
					获取或设置上次写入当前文件或目录的时间，其格式为协调世界时 (UTC)。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.Attributes">
				<summary>
					获取或设置当前文件或目录的特性。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.CreationTimeUtc">
				<summary>
					获取或设置当前文件或目录的创建时间，其格式为协调世界时 (UTC)。
				</summary>
			</member>
			<member name="P:System.IO.FileSystemInfo.Name">
				<summary>
					对于文件，获取该文件的名称。 对于目录，如果存在层次结构，则获取层次结构中最后一个目录的名称。 否则，Name 属性获取该目录的名称。
				</summary>
			</member>
			<member name="M:System.IO.FileSystemInfo.Delete">
				<summary>
					删除文件或目录。
				</summary>
			</member>
			<member name="M:System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					设置带有文件名和附加异常信息的 SerializationInfo 对象。
				</summary>
				<param name="info"></param>
				<param name="context"></param>
			</member>
			<member name="M:System.IO.FileSystemInfo.Refresh">
				<summary>
					刷新对象的状态。
				</summary>
			</member>
			<member name="M:System.IO.FileSystemInfo.ToString">
				<summary>
					返回原始路径。 使用 FullName 或 Name 属性作为完整路径或文件/目录名。
				</summary>
				<returns>一个包括原始路径的字符串。</returns>
			</member>
		</MF-System.IO.FileSystemInfo>
		<MF-System.SerializableAttribute>
			<member name="T:System.SerializableAttribute">
				<summary>
					表示类可以序列化。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.SerializableAttribute.#ctor">
				<summary>
					初始化 SerializableAttribute 类的新实例。
				</summary>
			</member>
		</MF-System.SerializableAttribute>
		<MF-System.IO.MemoryStream>
			<member name="T:System.IO.MemoryStream">
				<summary>
					创建一个流，其后备存储为内存。
				</summary>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor">
				<summary>
					使用初始化为零的可扩展容量初始化 MemoryStream 类的新实例。
				</summary>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
				<summary>
					基于指定的字节数组初始化 MemoryStream 类的无法调整大小的新实例。
				</summary>
				<param name="buffer">从中创建当前流的无符号字节数组。</param>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
				<summary>
					使用按指定要求初始化的可扩展容量初始化 MemoryStream 类的新实例。
				</summary>
				<param name="capacity">内部数组的初始大小（以字节为单位）。</param>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
				<summary>
					在 CanWrite 属性按指定设置的状态下，基于指定的字节数组初始化 MemoryStream 类的无法调整大小的新实例。
				</summary>
				<param name="buffer">从中创建此流的无符号字节的数组。</param>
				<param name="writable">CanWrite 属性的设置，确定该流是否支持写入。</param>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
				<summary>
					基于字节数组的指定区域（索引）初始化 MemoryStream 类的无法调整大小的新实例。
				</summary>
				<param name="buffer">从中创建此流的无符号字节的数组。</param>
				<param name="index">buffer 内的索引，流从此处开始。</param>
				<param name="count">流的长度（以字节为单位）。</param>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
				<summary>
					在 MemoryStream 属性按指定设置的状态下，基于字节数组的指定区域，初始化 CanWrite 类的无法调整大小的新实例。
				</summary>
				<param name="buffer">从中创建此流的无符号字节的数组。</param>
				<param name="index">buffer 内的索引，流从此处开始。</param>
				<param name="count">流的长度（以字节为单位）。</param>
				<param name="writable">CanWrite 属性的设置，确定该流是否支持写入。</param>
			</member>
			<member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
				<summary>
					在 MemoryStream 属性和调用 CanWrite 的能力按指定设置的状态下，基于字节数组的指定区域初始化 GetBuffer() 类的新实例。
				</summary>
				<param name="buffer">从中创建此流的无符号字节的数组。</param>
				<param name="index">buffer 内的索引，流从此处开始。</param>
				<param name="count">流的长度（以字节为单位）。</param>
				<param name="writable">CanWrite 属性的设置，确定该流是否支持写入。</param>
				<param name="publiclyVisible">设置为 true 可以启用 GetBuffer()，它返回无符号字节数组，流从该数组创建；否则为 false。</param>
			</member>
			<member name="P:System.IO.MemoryStream.Capacity">
				<summary>
					获取或设置分配给该流的字节数。
				</summary>
			</member>
			<member name="P:System.IO.MemoryStream.CanWrite">
				<summary>
					获取一个值，该值指示当前流是否支持写入。
				</summary>
			</member>
			<member name="P:System.IO.MemoryStream.CanSeek">
				<summary>
					获取一个值，该值指示当前流是否支持查找。
				</summary>
			</member>
			<member name="P:System.IO.MemoryStream.CanRead">
				<summary>
					获取一个值，该值指示当前流是否支持读取。
				</summary>
			</member>
			<member name="P:System.IO.MemoryStream.Length">
				<summary>
					获取流的长度（以字节为单位）。
				</summary>
			</member>
			<member name="P:System.IO.MemoryStream.Position">
				<summary>
					获取或设置流中的当前位置。
				</summary>
			</member>
			<member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步读操作。（请考虑改用 ReadAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="buffer">数据读入的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从内存流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<param name="callback">可选的异步回调，在完成读取时调用。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
				<returns>表示异步读取的 IAsyncResult（可能仍处于挂起状态）。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步写操作。（请考虑改用 WriteAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从此处开始写入。</param>
				<param name="count">最多写入的字节数。</param>
				<param name="callback">可选的异步回调，在完成写入时调用。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
				<returns>表示异步写入的 IAsyncResult（可能仍处于挂起状态）。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
				<summary>
					使用指定的缓冲区大小，从当前内存流中读取字节并将其写入到另一流中。
				</summary>
				<param name="destination">当前内存流的内容将复制到的流。</param>
				<param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 81920。</param>
			</member>
			<member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
				<summary>
					使用指定的缓冲区大小和取消令牌，从当前流中异步读取所有字节并将其写入到另一个流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。</param>
				<param name="cancellationToken">要监视取消请求的标记。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
				<summary>
					等待挂起的异步读取完成。（请考虑改用 ReadAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="asyncResult">对要完成的挂起异步请求的引用。</param>
				<returns>从内存流中读取的字节数，介于零 (0) 和所请求的字节数之间。 仅在内存流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
				<summary>
					结束异步写操作。（请考虑改用 WriteAsync(Byte[], Int32, Int32, CancellationToken)。）
				</summary>
				<param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
			</member>
			<member name="M:System.IO.MemoryStream.Flush">
				<summary>
					重写 Flush() 方法以便不执行任何操作。
				</summary>
			</member>
			<member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
				<summary>
					异步清除此流的所有缓冲区，并监视取消请求。
				</summary>
				<param name="cancellationToken">要监视取消请求的标记。</param>
				<returns>表示异步刷新操作的任务。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.GetBuffer">
				<summary>
					返回从中创建此流的无符号字节的数组。
				</summary>
				<returns>创建此流所用的字节数组；或者如果在当前实例的构造期间没有向 MemoryStream 构造函数提供字节数组，则为基础数组。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
				<summary>
					从当前内存流读取字节序列，并将内存流中的位置向前移动读取的字节数。
				</summary>
				<param name="destination">内存的区域。 当此方法返回时，此范围的内容将替换为从当前内存流源读取的字节。</param>
				<returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达内存流结尾，则为零 (0)。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
				<summary>
					从当前流中读取字节块并将数据写入缓冲区。
				</summary>
				<param name="buffer">当此方法返回时，包含指定的字节数组，此数组中 offset 和 (offset + count - 1) 之间的值被从当前流中读取的字符所替换。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储当前流中的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<returns>写入缓冲区中的总字节数。 如果字节数当前不可用，则总字节数可能小于所请求的字节数；如果在读取到任何字节前已到达流结尾，则为零。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					从当前内存流异步读取字节的序列，将该序列写入 destination，按读取的字节数向前移动内存流中的位置，并监视取消请求。
				</summary>
				<param name="destination">要将数据写入的内存区域。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务。 其 Result 属性的值包含读入 destination 的总字节数。 如果很多字节当前不可用，则结果值可小于在 destination 中分配的字节数；如果已到达内存流结尾，则结果值可以为 0（零）。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。
				</summary>
				<param name="buffer">要写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务。 TResult 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.ReadByte">
				<summary>
					从当前流中读取一个字节。
				</summary>
				<returns>强制转换为 Int32 的字节；或者如果已到达流的末尾，则为 -1。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
				<summary>
					将当前流中的位置设置为指定值。
				</summary>
				<param name="offset">流内的新位置。 它是相对于 loc 参数的位置，而且可正可负。</param>
				<param name="loc">类型 SeekOrigin 的值，它用作查找引用点。</param>
				<returns>流内的新位置，通过将初始引用点和偏移量合并计算而得。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
				<summary>
					将当前流的长度设为指定值。
				</summary>
				<param name="value">用于设置长度的值。</param>
			</member>
			<member name="M:System.IO.MemoryStream.ToArray">
				<summary>
					将流内容写入字节数组，而与 Position 属性无关。
				</summary>
				<returns>新的字节数组。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
				<summary>
					返回从中创建此流的无符号字节的数组。 用于指示转换是否成功的返回值。
				</summary>
				<param name="buffer">如果此方法返回 true，则为从中创建此流的字节数组段；如果此方法返回 false，则此参数设置为 default。</param>
				<returns>如果缓冲区可公开，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
				<summary>
					使用从缓冲区读取的数据将字节块写入当前流。
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
				<param name="count">最多写入的字节数。</param>
			</member>
			<member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
				<summary>
					将 source 中包含的字节序列写入当前内存流，并按写入的字节数向前移动内存流的当前位置。
				</summary>
				<param name="source">内存的区域。 此方法将此区域的内容复制到当前内存流。</param>
			</member>
			<member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
				<param name="count">最多写入的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					将 source 中包含的字节序列异步写入当前内存流，按写入的字节数向前移动该内存流中的当前位置，并监视取消请求。
				</summary>
				<param name="source">从中写入数据的内存区域。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
				<summary>
					将一个字节写入当前位置上的当前流。
				</summary>
				<param name="value">要写入的字节。</param>
			</member>
			<member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
				<summary>
					将此内存流的整个内容写入到另一个流中。
				</summary>
				<param name="stream">要写入此内存流的流。</param>
			</member>
			<member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
				<summary>
					释放 MemoryStream 类使用的非托管资源，并可以选择释放托管资源。
				</summary>
				<param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
			</member>
		</MF-System.IO.MemoryStream>
		<MF-System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>
			<member name="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
				<summary>
					以二进制格式序列化和反序列化对象或连接对象的整个图形。
				</summary>
			</member>
			<member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor">
				<summary>
					使用默认值初始化 BinaryFormatter 类的新实例。
				</summary>
			</member>
			<member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
				<summary>
					使用给定的代理项选择器和流上下文来初始化 BinaryFormatter 类的新实例。
				</summary>
				<param name="selector">要使用的 ISurrogateSelector。 可以为 null。</param>
				<param name="context">序列化数据的源和目标。</param>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.AssemblyFormat">
				<summary>
					获取或设置与查找加集有关的反序列化器行为。
				</summary>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Binder">
				<summary>
					（不安全）获取或设置控制将序列化对象绑定到类型的 SerializationBinder 类型的对象。
				</summary>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Context">
				<summary>
					获取或设置此格式化程序的 StreamingContext。
				</summary>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.FilterLevel">
				<summary>
					获取或设置 TypeFilterLevel 所执行的自动反序列化的 BinaryFormatter。
				</summary>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.SurrogateSelector">
				<summary>
					获取或设置控制序列化和反序列化过程的类型替换的 ISurrogateSelector.
				</summary>
			</member>
			<member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.TypeFormat">
				<summary>
					获取或设置类型说明在序列化流中的布局格式。
				</summary>
			</member>
			<member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)">
				<summary>
					将指定的流反序列化为对象图形。
				</summary>
				<param name="serializationStream">要从其中反序列化对象图形的流。</param>
				<returns>对象图的顶级（根）。</returns>
			</member>
			<member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)">
				<summary>
					将对象或具有指定顶级（根）的对象图形序列化为给定流。
				</summary>
				<param name="serializationStream">图形要序列化为的流。</param>
				<param name="graph">位于要序列化图形的根位置的对象。</param>
			</member>
		</MF-System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>
		<MF-System.IO.Stream>
			<member name="T:System.IO.Stream">
				<summary>
					提供字节序列的一般视图。 这是一个抽象类。
				</summary>
			</member>
			<member name="F:System.IO.Stream.Null">
				<summary>
					无后备存储区的 Stream。
				</summary>
			</member>
			<member name="M:System.IO.Stream.#ctor">
				<summary>
					初始化 Stream 类的新实例。
				</summary>
			</member>
			<member name="P:System.IO.Stream.Position">
				<summary>
					当在派生类中重写时，获取或设置当前流中的位置。
				</summary>
			</member>
			<member name="P:System.IO.Stream.Length">
				<summary>
					当在派生类中重写时，获取流长度（以字节为单位）。
				</summary>
			</member>
			<member name="P:System.IO.Stream.CanWrite">
				<summary>
					当在派生类中重写时，获取指示当前流是否支持写入功能的值。
				</summary>
			</member>
			<member name="P:System.IO.Stream.CanTimeout">
				<summary>
					获取一个值，该值确定当前流是否可以超时。
				</summary>
			</member>
			<member name="P:System.IO.Stream.CanSeek">
				<summary>
					当在派生类中重写时，获取指示当前流是否支持查找功能的值。
				</summary>
			</member>
			<member name="P:System.IO.Stream.CanRead">
				<summary>
					当在派生类中重写时，获取指示当前流是否支持读取的值。
				</summary>
			</member>
			<member name="P:System.IO.Stream.ReadTimeout">
				<summary>
					获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试读取的时间。
				</summary>
			</member>
			<member name="P:System.IO.Stream.WriteTimeout">
				<summary>
					获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试写入多长时间。
				</summary>
			</member>
			<member name="M:System.IO.Stream.Synchronized(System.IO.Stream)">
				<summary>
					在指定的 Stream 对象周围创建线程安全（同步）包装。
				</summary>
				<param name="stream">要同步的 Stream 对象。</param>
				<returns>一个线程安全的 Stream 对象。</returns>
			</member>
			<member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步读操作。（请考虑改用 ReadAsync(Byte[], Int32, Int32)。）
				</summary>
				<param name="buffer">数据读入的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<param name="callback">可选的异步回调，在完成读取时调用。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
				<returns>表示异步读取的 IAsyncResult（可能仍处于挂起状态）。</returns>
			</member>
			<member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
				<summary>
					开始异步写操作。（请考虑改用 WriteAsync(Byte[], Int32, Int32)。）
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从此处开始写入。</param>
				<param name="count">最多写入的字节数。</param>
				<param name="callback">可选的异步回调，在完成写入时调用。</param>
				<param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
				<returns>表示异步写入的 IAsyncResult（可能仍处于挂起状态）。</returns>
			</member>
			<member name="M:System.IO.Stream.Close">
				<summary>
					关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。不直接调用此方法，而应确保流得以正确释放。
				</summary>
			</member>
			<member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
				<summary>
					使用指定的缓冲区大小，从当前流中读取字节并将其写入到另一流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 81920。</param>
			</member>
			<member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
				<summary>
					从当前流中读取字节并将其写入到另一流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
			</member>
			<member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
				<summary>
					通过指定的取消令牌，从当前流中异步读取字节并将其写入到另一个流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
				<summary>
					从当前流中异步读取字节并将其写入到另一个流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
				<summary>
					使用指定的缓冲区大小，从当前流中异步读取字节并将其写入到另一流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
				<summary>
					使用指定的缓冲区大小和取消令牌，从当前流中异步读取字节并将其写入到另一个流中。
				</summary>
				<param name="destination">当前流的内容将复制到的流。</param>
				<param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步复制操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.Dispose">
				<summary>
					释放由 Stream 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.IO.Stream.DisposeAsync">
				<summary>
					异步释放 Stream 使用的非托管资源。
				</summary>
				<returns>一个表示异步释放操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
				<summary>
					等待挂起的异步读取完成。（请考虑改用 ReadAsync(Byte[], Int32, Int32)。）
				</summary>
				<param name="asyncResult">对要完成的挂起异步请求的引用。</param>
				<returns>从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
			</member>
			<member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
				<summary>
					结束异步写操作。（请考虑改用 WriteAsync(Byte[], Int32, Int32)。）
				</summary>
				<param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
			</member>
			<member name="M:System.IO.Stream.Flush">
				<summary>
					当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
				</summary>
			</member>
			<member name="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
				<summary>
					异步清理此流的所有缓冲区，导致所有缓冲数据都写入基础设备，并且监控取消请求。
				</summary>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步刷新操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.FlushAsync">
				<summary>
					异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。
				</summary>
				<returns>表示异步刷新操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
				<summary>
					当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
				</summary>
				<param name="buffer">字节数组。 当此方法返回时，此缓冲区包含指定的字符数组，此数组中 offset 和 (offset + count - 1) 之间的值被从当前源中读取的字节所替换。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
				<param name="count">要从当前流中最多读取的字节数。</param>
				<returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。</returns>
			</member>
			<member name="M:System.IO.Stream.Read(System.Span{System.Byte})">
				<summary>
					当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
				</summary>
				<param name="buffer">内存的区域。 当此方法返回时，此区域的内容将替换为从当前源读取的字节。</param>
				<returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
			</member>
			<member name="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。
				</summary>
				<param name="buffer">要将数据写入的内存区域。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务。 其 Result 属性的值包含读入缓冲区的总字节数。 如果很多字节当前不可用，则结果值可小于在缓冲区中分配的字节数；如果已到达流结尾，则结果值可以为 0（零）。</returns>
			</member>
			<member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。
				</summary>
				<param name="buffer">要写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步读取操作的任务。 TResult 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
			</member>
			<member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
				<summary>
					从当前流异步读取字节序列，并将流中的位置提升读取的字节数。
				</summary>
				<param name="buffer">要写入数据的缓冲区。</param>
				<param name="offset">buffer 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
				<param name="count">最多读取的字节数。</param>
				<returns>表示异步读取操作的任务。 TResult 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
			</member>
			<member name="M:System.IO.Stream.ReadByte">
				<summary>
					从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。
				</summary>
				<returns>强制转换为 Int32 的无符号字节，如果到达流的末尾，则为 -1。</returns>
			</member>
			<member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
				<summary>
					当在派生类中重写时，设置当前流中的位置。
				</summary>
				<param name="offset">相对于 origin 参数的字节偏移量。</param>
				<param name="origin">SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
				<returns>当前流中的新位置。</returns>
			</member>
			<member name="M:System.IO.Stream.SetLength(System.Int64)">
				<summary>
					当在派生类中重写时，设置当前流的长度。
				</summary>
				<param name="value">所需的当前流的长度（以字节表示）。</param>
			</member>
			<member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
				<summary>
					当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
				</summary>
				<param name="buffer">字节数组。 此方法将 count 个字节从 buffer 复制到当前流。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
				<param name="count">要写入当前流的字节数。</param>
			</member>
			<member name="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})">
				<summary>
					当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
				</summary>
				<param name="buffer">内存的区域。 此方法将此区域的内容复制到当前流。</param>
			</member>
			<member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
				<summary>
					将字节序列异步写入当前流，并将流的当前位置提升写入的字节数。
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
				<param name="count">最多写入的字节数。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
				<summary>
					将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
				</summary>
				<param name="buffer">从中写入数据的缓冲区。</param>
				<param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
				<param name="count">最多写入的字节数。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
				<summary>
					将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
				</summary>
				<param name="buffer">从中写入数据的内存区域。</param>
				<param name="cancellationToken">要监视取消请求的标记。 默认值是 None。</param>
				<returns>表示异步写入操作的任务。</returns>
			</member>
			<member name="M:System.IO.Stream.WriteByte(System.Byte)">
				<summary>
					将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。
				</summary>
				<param name="value">要写入流中的字节。</param>
			</member>
			<member name="M:System.IO.Stream.CreateWaitHandle">
				<summary>
					分配 WaitHandle 对象。
				</summary>
				<returns>对已分配的 WaitHandle 的引用。</returns>
			</member>
			<member name="M:System.IO.Stream.Dispose(System.Boolean)">
				<summary>
					释放由 Stream 占用的非托管资源，还可以另外再释放托管资源。
				</summary>
				<param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
			</member>
			<member name="M:System.IO.Stream.ObjectInvariant">
				<summary>
					提供对 Contract 的支持。
				</summary>
			</member>
		</MF-System.IO.Stream>
		<MF-System.Object>
			<member name="T:System.Object">
				<summary>
					支持 .NET 类层次结构中的所有类，并为派生类提供低级别服务。 这是所有 .NET 类的最终基类；它是类型层次结构的根。
				</summary>
			</member>
			<member name="M:System.Object.Equals(System.Object,System.Object)">
				<summary>
					确定指定的对象实例是否被视为相等。
				</summary>
				<param name="objA">要比较的第一个对象</param>
				<param name="objB">要比较的第二个对象</param>
				<returns>如果对象被视为相等，则为 true，否则为 false。 如果 objA 和 objB 均为 null，此方法返回 true。</returns>
			</member>
			<member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
				<summary>
					确定指定的 Object 实例是否是相同的实例。
				</summary>
				<param name="objA">要比较的第一个对象</param>
				<param name="objB">要比较的第二个对象</param>
				<returns>如果 objA 是与 objB 相同的实例，或如果两者均为 null，则为 true，否则为 false。</returns>
			</member>
			<member name="M:System.Object.Equals(System.Object)">
				<summary>
					确定指定对象是否等于当前对象。
				</summary>
				<param name="obj">要与当前对象进行比较的对象</param>
				<returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Object.GetHashCode">
				<summary>
					获取当前对象的哈希代码
				</summary>
				<returns>当前对象的哈希代码。</returns>
			</member>
			<member name="M:System.Object.GetType">
				<summary>
					获取当前实例的 Type。
				</summary>
				<returns>当前实例的准确运行时类型。</returns>
			</member>
			<member name="M:System.Object.ToString">
				<summary>
					返回表示当前对象的字符串。
				</summary>
				<returns>表示当前对象的字符串。</returns>
			</member>
			<member name="M:System.Object.MemberwiseClone">
				<summary>
					创建当前 Object 的浅表副本。（浅拷贝）
				</summary>
				<returns>当前 Object 的浅表副本。</returns>
			</member>
		</MF-System.Object>
		<MF-System.String>
			<member name="T:System.String">
				<summary>
					将文本表示为 UTF-16 代码单元的序列。
				</summary>
			</member>
			<member name="F:System.String.Empty">
				<summary>
					表示空字符串。 此字段为只读。
				</summary>
			</member>
			<member name="M:System.String.#ctor(System.Char*)">
				<summary>
					将 String 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。
				</summary>
				<param name="value">指向以 null 终止的 Unicode 字符数组的指针。</param>
			</member>
			<member name="M:System.String.#ctor(System.Char[])">
				<summary>
					将 String 类的新实例初始化为指定字符数组中指示的 Unicode 字符。
				</summary>
				<param name="value">Unicode 字符的数组。</param>
			</member>
			<member name="M:System.String.#ctor(System.ReadOnlySpan{System.Char})">
				<summary>
					将 String 类的新实例初始化为指定只读范围中指示的 Unicode 字符。
				</summary>
				<param name="value">Unicode 字符的只读范围。</param>
			</member>
			<member name="M:System.String.#ctor(System.SByte*)">
				<summary>
					将 String 类的新实例初始化为由指向 8 位有符号整数数组的指针指示的值。
				</summary>
				<param name="value">一个指针，指向以 null 结尾的 8 位带符号整数数组。 使用当前系统代码页编码（即由 Default 指定的编码）来解释整数。</param>
			</member>
			<member name="M:System.String.#ctor(System.Char,System.Int32)">
				<summary>
					将 String 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。
				</summary>
				<param name="c">一个 Unicode 字符。</param>
				<param name="count">c 出现的次数。</param>
			</member>
			<member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
				<summary>
					将 String 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。
				</summary>
				<param name="value">指向 Unicode 字符数组的指针。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<param name="length">要使用的 value 内的字符数。</param>
			</member>
			<member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
				<summary>
					将 String 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。
				</summary>
				<param name="value">Unicode 字符的数组。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<param name="length">要使用的 value 内的字符数。</param>
			</member>
			<member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
				<summary>
					将 String 类的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置和一个长度指示的值。
				</summary>
				<param name="value">指向 8 位带符号整数数组的指针。 使用当前系统代码页编码（即由 Default 指定的编码）来解释整数。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<param name="length">要使用的 value 内的字符数。</param>
			</member>
			<member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
				<summary>
					将 String 的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置、长度以及 Encoding 对象指示的值。
				</summary>
				<param name="value">指向 8 位带符号整数数组的指针。</param>
				<param name="startIndex">value 内的起始位置。</param>
				<param name="length">要使用的 value 内的字符数。</param>
				<param name="enc">一个对象，用于指定如何对 value 所引用的数组进行编码。 如果 enc 为 null，则假定以 ANSI 编码。</param>
			</member>
			<member name="P:System.String.Item(System.Int32)">
				<summary>
					获取当前 String 对象中位于指定位置的 Char 对象。
				</summary>
				<param name="index">当前的字符串中的位置。</param>
				<returns>位于 index 位置的对象。</returns>
			</member>
			<member name="P:System.String.Length">
				<summary>
					获取当前 String 对象中的字符数。
				</summary>
			</member>
			<member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
				<summary>
					比较两个指定的 String 对象的子字符串（忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串的位置。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串的位置。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<returns>
					一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。
					小于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之前。
					零	子字符串在排序顺序中出现的位置相同或 length 为零。
					大于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
				<summary>
					比较两个指定的 String 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串的位置。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串的位置。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<returns>
					一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。
					小于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之前。
					零	子字符串在排序顺序中出现的位置相同或 length 为零。
					大于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
				<summary>
					对两个指定的 String 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<param name="culture">提供区域性特定的比较信息的区域性。 如果 culture 为 null，则使用当前区域性。</param>
				<param name="options">要在执行比较时使用的选项（如忽略大小写或符号）。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 在排序顺序中位于 strB 之前。
					零	strA 与 strB 在排序顺序中出现的位置相同。
					大于零	strA 在排序顺序中位于 strB 之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
				<summary>
					比较两个指定的 String 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<param name="culture">一个对象，提供区域性特定的比较信息。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 在排序顺序中位于 strB 之前。
					零	strA 与 strB 在排序顺序中出现的位置相同。
					大于零	strA 在排序顺序中位于 strB 之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
				<summary>
					比较两个指定的 String 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 在排序顺序中位于 strB 之前。
					零	strA 与 strB 在排序顺序中出现的位置相同。
					大于零	strA 在排序顺序中位于 strB 之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
				<summary>
					使用指定的规则比较两个指定的 String 对象，并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 在排序顺序中位于 strB 之前。
					零	strA 与 strB 在排序顺序中出现的位置相同。
					大于零	strA 在排序顺序中位于 strB 之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
				<summary>
					使用指定的规则比较两个指定的 String 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串的位置。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串的位置。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
				<returns>
					一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。
					小于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之前。
					零	子字符串在排序顺序中出现的位置相同或 length 为零。
					大于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
				<summary>
					对两个指定 String 对象的子字符串进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个子字符串在排序顺序中的关系。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串开始的位置。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串开始的位置。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<param name="culture">一个对象，提供区域性特定的比较信息。 如果 culture 为 null，则使用当前区域性。</param>
				<param name="options">要在执行比较时使用的选项（如忽略大小写或符号）。</param>
				<returns>
					一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。
					小于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之前。
					零	子字符串在排序顺序中出现的位置相同或 length 为零。
					大于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
				<summary>
					比较两个指定的 String 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串的位置。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串的位置。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<param name="culture">一个对象，提供区域性特定的比较信息。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>
					一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。
					小于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之前。
					零	子字符串在排序顺序中出现的位置相同或 length 为零。
					大于零	strA 中的子字符串在排序顺序中位于 strB 中的子字符串之后。
				</returns>
			</member>
			<member name="M:System.String.Compare(System.String,System.String)">
				<summary>
					比较两个指定的 String 对象，并返回一个指示二者在排序顺序中的相对位置的整数。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 在排序顺序中位于 strB 之前。
					零	strA 与 strB 在排序顺序中出现的位置相同。
					大于零	strA 在排序顺序中位于 strB 之后。
				</returns>
			</member>
			<member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
				<summary>
					通过计算每个子字符串中相应 String 对象的数值来比较两个指定的 Char 对象的子字符串。
				</summary>
				<param name="strA">要在比较中使用的第一个字符串。</param>
				<param name="indexA">strA 中子字符串的起始索引。</param>
				<param name="strB">要在比较中使用的第二个字符串。</param>
				<param name="indexB">strB 中子字符串的起始索引。</param>
				<param name="length">要比较的子字符串中字符的最大数量。</param>
				<returns>
					一个 32 位带符号整数，指示两个比较数之间的词法关系。
					小于零	strA 中的子字符串小于 strB 中的子字符串。
					零	子字符串相等，或者 length 为零。
					大于零	strA 中的子字符串大于 strB 中的子字符串。
				</returns>
			</member>
			<member name="M:System.String.CompareOrdinal(System.String,System.String)">
				<summary>
					通过计算每个字符串中相应 String 对象的数值来比较两个指定的 Char 对象。
				</summary>
				<param name="strA">要比较的第一个字符串。</param>
				<param name="strB">要比较的第二个字符串。</param>
				<returns>
					一个整数，指示两个比较字之间的词法关系。
					小于零	strA 小于 strB。
					零	strA 与 strB 相等。
					大于零	strA 大于 strB。
				</returns>
			</member>
			<member name="M:System.String.Concat(System.String,System.String,System.String)">
				<summary>
					连接 String 的三个指定实例。
				</summary>
				<param name="str0">要串联的第一个字符串。</param>
				<param name="str1">要串联的第二个字符串。</param>
				<param name="str2">要串联的第三个字符串。</param>
				<returns>str0、str1 和 str2 的串联。</returns>
			</member>
			<member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
				<summary>
					串联 IEnumerable<![CDATA[<T>]]> 实现的成员。
				</summary>
				<typeparam name="T">values 成员的类型。</typeparam>
				<param name="values">一个实现 IEnumerable<![CDATA[<T>]]> 接口的集合对象。</param>
				<returns>values 中的串联成员。</returns>
			</member>
			<member name="M:System.String.Concat(System.String[])">
				<summary>
					连接指定的 String 数组的元素。
				</summary>
				<param name="values">字符串实例的数组。</param>
				<returns>values 的串联元素。</returns>
			</member>
			<member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
				<summary>
					连接 String 的四个指定实例。
				</summary>
				<param name="str0">要串联的第一个字符串。</param>
				<param name="str1">要串联的第二个字符串。</param>
				<param name="str2">要串联的第三个字符串。</param>
				<param name="str3">要串联的第四个字符串。</param>
				<returns>str0、str1、str2 和 str3 的串联。</returns>
			</member>
			<member name="M:System.String.Concat(System.String,System.String)">
				<summary>
					连接 String 的两个指定实例。
				</summary>
				<param name="str0">要串联的第一个字符串。</param>
				<param name="str1">要串联的第二个字符串。</param>
				<returns>str0 和 str1 的串联。</returns>
			</member>
			<member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
				<summary>
					连接三个指定对象的字符串表示形式。
				</summary>
				<param name="arg0">要连接的第一个对象。</param>
				<param name="arg1">要连接的第二个对象。</param>
				<param name="arg2">要连接的第三个对象。</param>
				<returns>arg0、arg1 和 arg2 的值的串联字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Concat(System.Object,System.Object)">
				<summary>
					连接两个指定对象的字符串表示形式。
				</summary>
				<param name="arg0">要连接的第一个对象。</param>
				<param name="arg1">要连接的第二个对象。</param>
				<returns>arg0 和 arg1 的值的串联字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Concat(System.Object)">
				<summary>
					创建指定对象的字符串表示形式。
				</summary>
				<param name="arg0">要表示的对象，或 null。</param>
				<returns>arg0 的值的字符串表示形式，如果 Empty 为 arg0，则为 null。</returns>
			</member>
			<member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
				<summary>
					串联类型为 IEnumerable<![CDATA[<T>]]> 的 String 构造集合的成员。
				</summary>
				<param name="values">一个集合对象，该对象实现 IEnumerable<![CDATA[<T>]]>，且其泛型类型参数为 String。</param>
				<returns>values 中的串联字符串；如果 values 为空 IEnumerable(Of String)，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Concat(System.Object[])">
				<summary>
					连接指定 Object 数组中的元素的字符串表示形式。
				</summary>
				<param name="args">一个对象数组，其中包含要连接的元素。</param>
				<returns>args 中元素的值的串联字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Copy(System.String)">
				<summary>
					创建一个与指定的 String 具有相同值的 String 的新实例。
				</summary>
				<param name="str">要复制的字符串。</param>
				<returns>值与 str 相同的新字符串。</returns>
			</member>
			<member name="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})">
				<summary>
					创建一个具有特定长度的新字符串，并在创建后使用指定的回叫对其进行初始化。
				</summary>
				<typeparam name="TState">要传递到的元素的类型 action 。</typeparam>
				<param name="length">要创建的字符串的长度。</param>
				<param name="state">要传递给 action 的元素。</param>
				<param name="action">用于初始化字符串的回调。</param>
				<returns>创建的字符串。</returns>
			</member>
			<member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
				<summary>
					确定两个指定的 String 对象是否具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。
				</summary>
				<param name="a">要比较的第一个字符串，或 null。</param>
				<param name="b">要比较的第二个字符串，或 null。</param>
				<param name="comparisonType">枚举值之一，用于指定比较的规则。</param>
				<returns>如果 true 参数的值与 a 参数的值相同，则为 b；否则为 false。</returns>
			</member>
			<member name="M:System.String.Equals(System.String,System.String)">
				<summary>
					确定两个指定的 String 对象是否具有相同的值。
				</summary>
				<param name="a">要比较的第一个字符串，或 null。</param>
				<param name="b">要比较的第二个字符串，或 null。</param>
				<returns>如果 a 的值与 b 的值相同，则为 true；否则为 false。 如果 a 和 b 均为 null，此方法将返回 true。</returns>
			</member>
			<member name="M:System.String.Format(System.String,System.Object[])">
				<summary>
					将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
				<returns></returns>
			</member>
			<member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
				<summary>
					将字符串中的格式项替换为三个指定对象的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<param name="arg2">要设置格式的第三个对象。</param>
				<returns>format 的副本，其中的格式项已替换为 arg0、arg1 和 arg2 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.String,System.Object,System.Object)">
				<summary>
					将字符串中的格式项替换为两个指定对象的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<returns>format 的副本，其中的格式项替换为 arg0 和 arg1 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.String,System.Object)">
				<summary>
					将字符串中的一个或多个格式项替换为指定对象的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的对象。</param>
				<returns>format 的副本，其中的任何格式项均替换为 arg0 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
				<summary>
					将字符串中的格式项替换为指定数组中相应对象的字符串表示形式。 参数提供区域性特定的格式设置信息。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
				<returns>format 的副本，其中格式项已替换为 args 中相应对象的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
				<summary>
					将字符串中的格式项替换为三个指定对象的字符串表示形式。 参数提供区域性特定的格式设置信息。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<param name="arg2">要设置格式的第三个对象。</param>
				<returns>format 的副本，其中的格式项已替换为 arg0、arg1 和 arg2 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
				<summary>
					将字符串中的格式项替换为两个指定对象的字符串表示形式。 参数提供区域性特定的格式设置信息。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<returns>format 的副本，其中的格式项替换为 arg0 和 arg1 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
				<summary>
					将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。 参数提供区域性特定的格式设置信息。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的对象。</param>
				<returns>format 的副本，其中的一个或多个格式项已替换为 arg0 的字符串表示形式。</returns>
			</member>
			<member name="M:System.String.Intern(System.String)">
				<summary>
					检索系统对指定 String 的引用。
				</summary>
				<param name="str">要在暂存池中搜索的字符串。</param>
				<returns>如果暂存了 str，则返回系统对其的引用；否则返回对值为 str 的字符串的新引用。</returns>
			</member>
			<member name="M:System.String.IsInterned(System.String)">
				<summary>
					检索对指定 String 的引用。
				</summary>
				<param name="str">要在暂存池中搜索的字符串。</param>
				<returns>如果 str 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 null。</returns>
			</member>
			<member name="M:System.String.IsNullOrEmpty(System.String)">
				<summary>
					指示指定的字符串是 null 还是空字符串 ("")。
				</summary>
				<param name="value">要测试的字符串。</param>
				<returns>如果 true 参数为 value 或空字符串 ("")，则为 null；否则为 false。</returns>
			</member>
			<member name="M:System.String.IsNullOrWhiteSpace(System.String)">
				<summary>
					指示指定的字符串是 null、空还是仅由空白字符组成。
				</summary>
				<param name="value">要测试的字符串。</param>
				<returns>如果 true 参数为 value 或 null，或者如果 Empty 仅由空白字符组成，则为 value。</returns>
			</member>
			<member name="M:System.String.Join(System.Char,System.Object[])">
				<summary>
					连接对象数组的字符串表示形式，其中在每个成员之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符。 只有在 separator 具有多个元素时，value 才包括在返回的字符串中。</param>
				<param name="values">将连接其字符串表示形式的对象数组。</param>
				<returns>一个由 values 的元素组成的字符串，这些元素以 separator 字符分隔。或 如果 values 有零个元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.Char,System.String[])">
				<summary>
					连接字符串数组，其中在每个成员之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符。 只有在 separator 具有多个元素时，value 才包括在返回的字符串中。</param>
				<param name="value">要连接的字符串数组。</param>
				<returns>一个由 value 的元素组成的字符串，这些元素以 separator 字符分隔。或 如果 value 有零个元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)">
				<summary>
					连接字符串数组，其中在每个成员之间使用指定的分隔符，并且从位于 startIndex 位置的 value 中的元素开始，并连接多达 count 个元素。
				</summary>
				<param name="separator">连接字符串数组，其中在每个成员之间使用指定的分隔符，并且从位于指定索引处的元素开始，并包含指定数量的元素。</param>
				<param name="value">要连接的字符串数组。</param>
				<param name="startIndex">要连接的 value 中的第一个项。</param>
				<param name="count">要连接的 value 中的元素数，从位于 startIndex 位置的元素开始。</param>
				<returns>一个由 count 个 value 元素组成的字符串，从 startIndex 开始，由 separator 字符分隔。或 如果 count 为零，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
				<summary>
					串联类型为 IEnumerable<![CDATA[<T>]]> 的 String 构造集合的成员，其中在每个成员之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符串。separator 包括在返回的字符串中（只有在 values 具有多个元素时）。</param>
				<param name="values">一个包含要串联的字符串的集合。</param>
				<returns>一个由 values 的元素组成的字符串，这些元素以 separator 字符串分隔。或 如果 values 有零个元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.String,System.Object[])">
				<summary>
					串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符串。 只有在 separator 具有多个元素时，values 才包括在返回的字符串中。</param>
				<param name="values">一个数组，其中包含要连接的元素。</param>
				<returns>一个由 values 的元素组成的字符串，这些元素以 separator 字符串分隔。或 如果 values 有零个元素，则为 Empty。或 仅.NET Framework：如果 values 的第一个元素是 null，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.String,System.String[])">
				<summary>
					串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符串。 只有在 separator 具有多个元素时，value 才包括在返回的字符串中。</param>
				<param name="value">一个数组，其中包含要连接的元素。</param>
				<returns>一个由 value 中的元素组成的字符串，这些元素以 separator 字符串分隔。或 如果 values 有零个元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
				<summary>
					串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。
				</summary>
				<param name="separator">要用作分隔符的字符串。 只有在 separator 具有多个元素时，value 才包括在返回的字符串中。</param>
				<param name="value">一个数组，其中包含要连接的元素。</param>
				<param name="startIndex">value 中要使用的第一个元素。</param>
				<param name="count">要使用的 value 的元素数。</param>
				<returns>一个由 count 个 value 元素组成的字符串，从 startIndex 开始，由 separator 字符分隔。或 如果 count 为零，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
				<summary>
					串联集合的成员，其中在每个成员之间使用指定的分隔符。
				</summary>
				<typeparam name="T">values 成员的类型。</typeparam>
				<param name="separator">要用作分隔符的字符。 只有在 separator 具有多个元素时，values 才包括在返回的字符串中。</param>
				<param name="values">一个包含要串联的对象的集合。</param>
				<returns>一个由 values 的成员组成的字符串，这些成员以 separator 字符分隔。或 如果 values 没有任何元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
				<summary>
					串联集合的成员，其中在每个成员之间使用指定的分隔符。
				</summary>
				<typeparam name="T">values 成员的类型。</typeparam>
				<param name="separator">要用作分隔符的字符串。 只有在 separator 具有多个元素时，values 才包括在返回的字符串中。</param>
				<param name="values">一个包含要串联的对象的集合。</param>
				<returns>一个由 values 的元素组成的字符串，这些元素以 separator 字符串分隔。或 如果 values 没有任何元素，则为 Empty。</returns>
			</member>
			<member name="M:System.String.Clone">
				<summary>
					返回对此 String实例的引用。
				</summary>
				<returns>此 String 实例。</returns>
			</member>
			<member name="M:System.String.CompareTo(System.Object)">
				<summary>
					将此实例与指定的 Object 进行比较，并指示此实例在排序顺序中是位于指定的 Object 之前、之后还是与其出现在同一位置。
				</summary>
				<param name="value">一个对象，其计算结果为 String。</param>
				<returns>
					一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 value 参数之前、之后还是与其出现在同一位置。
					小于零	此实例位于 value 之前。
					零	此实例在排序顺序中的位置与 value 相同。
					大于零	此实例位于 value 之后 或 value 上声明的默认值为 null。
				</returns>
			</member>
			<member name="M:System.String.CompareTo(System.String)">
				<summary>
					将此实例与指定的 String 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。
				</summary>
				<param name="strB">要与此实例进行比较的字符串。</param>
				<returns>
					一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 strB 参数之前、之后还是与其出现在同一位置。
					小于零	此实例位于 strB 之前。
					零	此实例在排序顺序中的位置与 strB 相同。
					大于零	此实例位于 strB 之后  或  strB 上声明的默认值为 null。
				</returns>
			</member>
			<member name="M:System.String.Contains(System.Char)">
				<summary>
					返回一个值，该值指示指定的字符是否出现在此字符串中。
				</summary>
				<param name="value">要查找的字符。</param>
				<returns>如果 value 参数在此字符串中出现，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.Contains(System.Char,System.StringComparison)">
				<summary>
					使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中。
				</summary>
				<param name="value">要查找的字符。</param>
				<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
				<returns>如果 value 参数在此字符串中出现，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.Contains(System.String)">
				<summary>
					返回一个值，该值指示指定的子串是否出现在此字符串中。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<returns>如果 true 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.Contains(System.String,System.StringComparison)">
				<summary>
					使用指定的比较规则返回一个值，该值指示指定的字符串是否出现在此字符串中。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
				<returns>如果 true 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
				<summary>
					将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。
				</summary>
				<param name="sourceIndex">要复制的此实例中第一个字符的索引。</param>
				<param name="destination">此实例中的字符所复制到的 Unicode 字符数组。</param>
				<param name="destinationIndex">destination 中的索引，在此处开始复制操作。</param>
				<param name="count">此实例中要复制到 destination 的字符数。</param>
			</member>
			<member name="M:System.String.EndsWith(System.Char)">
				<summary>
					确定此字符串实例的结尾是否与指定的字符匹配。
				</summary>
				<param name="value">要与此实例末尾的字符进行比较的字符。</param>
				<returns>如果 true 与此实例的末尾匹配，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.EndsWith(System.String)">
				<summary>
					确定此字符串实例的结尾是否与指定的字符串匹配。
				</summary>
				<param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
				<returns>如果 true 与此实例的末尾匹配，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
				<summary>
					确定在使用指定的区域性进行比较时此字符串实例的结尾是否与指定的字符串匹配。
				</summary>
				<param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<param name="culture">确定如何对此实例与 value 进行比较的区域性信息。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>如果 value 参数与此字符串的末尾匹配，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.EndsWith(System.String,System.StringComparison)">
				<summary>
					确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。
				</summary>
				<param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
				<param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 value。</param>
				<returns>如果 value 参数与此字符串的末尾匹配，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.Equals(System.Object)">
				<summary>
					确定此实例是否与指定的对象（也必须是 String 对象）具有相同的值。
				</summary>
				<param name="obj">要与此实例进行比较的字符串。</param>
				<returns>如果 true 是一个 obj 且其值与此实例相等，则为 String；否则为 false。 如果 obj 为 null，则此方法返回 false。</returns>
			</member>
			<member name="M:System.String.Equals(System.String)">
				<summary>
					确定此实例是否与另一个指定的 String 对象具有相同的值。
				</summary>
				<param name="value">要与此实例进行比较的字符串。</param>
				<returns>如果 true 参数的值与此实例的值相同，则为 value；否则为 false。 如果 value 为 null，则此方法返回 false。</returns>
			</member>
			<member name="M:System.String.Equals(System.String,System.StringComparison)">
				<summary>
					确定此字符串是否与另一个指定的 String 对象具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。
				</summary>
				<param name="value">要与此实例进行比较的字符串。</param>
				<param name="comparisonType">枚举值之一，用于指定如何比较字符串。</param>
				<returns>如果 value 参数的值与此字符串相同，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.GetEnumerator">
				<summary>
					检索一个可以循环访问此字符串中的每个字符的对象。
				</summary>
				<returns>枚举器对象。</returns>
			</member>
			<member name="M:System.String.GetHashCode">
				<summary>
					返回该字符串的哈希代码。
				</summary>
				<returns>32 位有符号整数哈希代码。</returns>
			</member>
			<member name="M:System.String.GetHashCode(System.StringComparison)">
				<summary>
					使用指定的规则返回此字符串的哈希代码。
				</summary>
				<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
				<returns>32 位有符号整数哈希代码。</returns>
			</member>
			<member name="M:System.String.GetTypeCode">
				<summary>
					返回 String 类的 TypeCode。
				</summary>
				<returns>枚举常数 String。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.Char)">
				<summary>
					报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<returns>如果找到该字符，则为 value 的从零开始的索引位置；如果未找到，则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.Char,System.Int32)">
				<summary>
					报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<param name="startIndex">搜索起始位置。</param>
				<returns>如果找到该字符，则为从字符串的起始位置开始的 value 从零开始的索引位置；否则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
				<summary>
					报告指定字符在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<param name="startIndex">搜索起始位置。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>如果找到该字符，则为从字符串的起始位置开始的 value 从零开始的索引位置；否则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.Char,System.StringComparison)">
				<summary>
					报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。 一个参数指定要用于指定字符的搜索类型。
				</summary>
				<param name="value">要查找的字符。</param>
				<param name="comparisonType">指定搜索规则的枚举值。</param>
				<returns>如果找到该字符，则为 value 的从零开始的索引位置；如果未找到，则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String)">
				<summary>
					报告指定字符串在此实例中的第一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<returns>如果找到该字符串，则为 value 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 value 为 Empty，则返回值为 0。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String,System.StringComparison)">
				<summary>
					报告指定的字符串在当前 String 对象中的第一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为 value 参数的索引位置；如果未找到该字符串，则为 -1。 如果 value 为 Empty，则返回值为 0。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
				<summary>
					报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 value 的索引位置；否则为 -1。 如果 value 为 Empty，则返回值为 startIndex。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String,System.Int32)">
				<summary>
					报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。</param>
				<returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 value 的索引位置；否则为 -1。 如果 value 为 Empty，则返回值为 startIndex。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
				<summary>
					报告指定的字符串在当前 String 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。</param>
				<param name="count">要检查的字符位置数。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 value 参数索引位置；否则为 -1。 如果 value 为 Empty，则返回值为 startIndex。</returns>
			</member>
			<member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
				<summary>
					报告指定的字符串在当前 String 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 value 参数索引位置；否则为 -1。 如果 value 为 Empty，则返回值为 startIndex。</returns>
			</member>
			<member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
				<summary>
					报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<param name="startIndex">搜索起始位置。</param>
				<returns>在此实例中第一次找到 anyOf 中的任意字符的索引位置（从零开始）；如果未找到 anyOf 中的字符，则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
				<summary>
					报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<param name="startIndex">搜索起始位置。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>在此实例中第一次找到 anyOf 中的任意字符的索引位置（从零开始）；如果未找到 anyOf 中的字符，则为 -1。</returns>
			</member>
			<member name="M:System.String.IndexOfAny(System.Char[])">
				<summary>
					报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<returns>在此实例中第一次找到 anyOf 中的任意字符的索引位置（从零开始）；如果未找到 anyOf 中的字符，则为 -1。</returns>
			</member>
			<member name="M:System.String.Insert(System.Int32,System.String)">
				<summary>
					返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。
				</summary>
				<param name="startIndex">插入的从零开始的索引位置。</param>
				<param name="value">要插入的字符串。</param>
				<returns>与此实例等效的一个新字符串，但在该字符串的 value 位置处插入了 startIndex。</returns>
			</member>
			<member name="M:System.String.IsNormalized">
				<summary>
					指示此字符串是否符合 Unicode 范式 C。
				</summary>
				<returns>如果此字符串符合范式 C，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
				<summary>
					指示此字符串是否符合指定的 Unicode 范式。
				</summary>
				<param name="normalizationForm">一个 Unicode 范式。</param>
				<returns>如果此字符串符合由 true 参数指定的范式，则为 normalizationForm；否则为 false。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.Char)">
				<summary>
					报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<returns>如果找到该字符，则为 value 的从零开始的索引位置；如果未找到，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
				<summary>
					报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<param name="startIndex">搜索的起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>如果找到该字符，则为 value 的从零开始的索引位置；如果未找到该字符或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String)">
				<summary>
					报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<returns>如果找到该字符串，则为 value 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String,System.Int32)">
				<summary>
					报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<returns>如果找到该字符串，则为 value 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
				<summary>
					报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>如果找到该字符串，则为 value 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
				<summary>
					报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。 一个参数指定要执行搜索指定字符串的比较类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<param name="count">要检查的字符位置数。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为 value 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
				<summary>
					报告指定字符串在当前 String 对象中最后一个匹配项的从零开始的索引。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。 一个参数指定要执行搜索指定字符串的比较类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为 value 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
				<summary>
					报告指定字符串在当前 String 对象中最后一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。
				</summary>
				<param name="value">要搜寻的字符串。</param>
				<param name="comparisonType">指定搜索规则的枚举值之一。</param>
				<returns>如果找到该字符串，则为 value 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
				<summary>
					报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。
				</summary>
				<param name="value">要查找的 Unicode 字符。</param>
				<param name="startIndex">搜索的起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<returns>如果找到该字符，则为 value 的从零开始的索引位置；如果未找到该字符或当前实例等于 Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOfAny(System.Char[])">
				<summary>
					报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<returns>最后一次在此实例中找到 anyOf 中的任意字符的索引位置；如果未找到 anyOf 中的字符，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
				<summary>
					报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<param name="count">要检查的字符位置数。</param>
				<returns>最后一次在此实例中找到 anyOf 中的任意字符的索引位置；如果未找到 anyOf 中的字符或者当前实例等于Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
				<summary>
					报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。
				</summary>
				<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
				<param name="startIndex">搜索起始位置。 从 startIndex 此实例的开头开始搜索。</param>
				<returns>最后一次在此实例中找到 anyOf 中的任意字符的索引位置；如果未找到 anyOf 中的字符或者当前实例等于Empty，则为 -1。</returns>
			</member>
			<member name="M:System.String.Normalize">
				<summary>
					返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合 Unicode 范式 C。
				</summary>
				<returns>一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式 C。</returns>
			</member>
			<member name="M:System.String.Normalize(System.Text.NormalizationForm)">
				<summary>
					返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合指定的 Unicode 范式。
				</summary>
				<param name="normalizationForm">一个 Unicode 范式。</param>
				<returns>一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合由 normalizationForm 参数指定的范式。</returns>
			</member>
			<member name="M:System.String.PadLeft(System.Int32)">
				<summary>
					返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。
				</summary>
				<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
				<returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 totalWidth。 但是，如果 totalWidth 小于此实例的长度，则此方法返回对现有实例的引用。 如果 totalWidth 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
			</member>
			<member name="M:System.String.PadLeft(System.Int32,System.Char)">
				<summary>
					返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。
				</summary>
				<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
				<param name="paddingChar">Unicode 填充字符。</param>
				<returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 paddingChar 字符，使长度达到 totalWidth。 但是，如果 totalWidth 小于此实例的长度，则此方法返回对现有实例的引用。 如果 totalWidth 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
			</member>
			<member name="M:System.String.PadRight(System.Int32)">
				<summary>
					返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。
				</summary>
				<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
				<returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 totalWidth。 但是，如果 totalWidth 小于此实例的长度，则此方法返回对现有实例的引用。 如果 totalWidth 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
			</member>
			<member name="M:System.String.PadRight(System.Int32,System.Char)">
				<summary>
					返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。
				</summary>
				<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
				<param name="paddingChar">Unicode 填充字符。</param>
				<returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 paddingChar 字符，使长度达到 totalWidth。 但是，如果 totalWidth 小于此实例的长度，则此方法返回对现有实例的引用。 如果 totalWidth 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
			</member>
			<member name="M:System.String.Remove(System.Int32)">
				<summary>
					返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。
				</summary>
				<param name="startIndex">开始删除字符的从零开始的位置。</param>
				<returns>一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</returns>
			</member>
			<member name="M:System.String.Remove(System.Int32,System.Int32)">
				<summary>
					返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。
				</summary>
				<param name="startIndex">开始删除字符的从零开始的位置。</param>
				<param name="count">要删除的字符数。</param>
				<returns>一个新字符串，除所删除的字符之外，该字符串与此实例等效。</returns>
			</member>
			<member name="M:System.String.Replace(System.Char,System.Char)">
				<summary>
					返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。
				</summary>
				<param name="oldChar">要替换的 Unicode 字符。</param>
				<param name="newChar">要替换出现的所有 oldChar 的 Unicode 字符。</param>
				<returns>等效于此实例（除了 oldChar 的所有实例都已替换为 newChar 外）的字符串。 如果在当前实例中找不到 oldChar，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Replace(System.String,System.String)">
				<summary>
					返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。
				</summary>
				<param name="oldValue">要替换的字符串。</param>
				<param name="newValue">要替换 oldValue 的所有匹配项的字符串。</param>
				<returns>等效于当前字符串（除了 oldValue 的所有实例都已替换为 newValue 外）的字符串。 如果在当前实例中找不到 oldValue，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
				<summary>
					返回一个新字符串，其中当前实例中出现的所有指定字符串都使用提供的区域性和区分大小写属性替换为另一个指定的字符串。
				</summary>
				<param name="oldValue">要替换的字符串。</param>
				<param name="newValue">要替换 oldValue 的所有匹配项的字符串。</param>
				<param name="ignoreCase">在比较时忽略大小写则为 true；否则为 false。</param>
				<param name="culture">比较时要使用的区域性。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>等效于当前字符串（除了 oldValue 的所有实例都已替换为 newValue 外）的字符串。 如果在当前实例中找不到 oldValue，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Replace(System.String,System.String,System.StringComparison)">
				<summary>
					返回一个新字符串，其中当前实例中出现的所有指定字符串都使用提供的比较类型替换为另一个指定的字符串。
				</summary>
				<param name="oldValue">要替换的字符串。</param>
				<param name="newValue">要替换 oldValue 的所有匹配项的字符串。</param>
				<param name="comparisonType">枚举值之一，用于确定在此实例内搜索 oldValue 的方法。</param>
				<returns>等效于当前字符串（除了 oldValue 的所有实例都已替换为 newValue 外）的字符串。 如果在当前实例中找不到 oldValue，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符和（可选）选项将字符串拆分为最大数量的子字符串。
				</summary>
				<param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 null。</param>
				<param name="count">要返回的子字符串的最大数量。</param>
				<param name="options">枚举值的按位组合，指定是否剪裁子字符串并包括空子字符串。</param>
				<returns>一个数组，该数组包含此字符串中的子字符串，这些子字符串由 separator 中的一个或多个字符分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符和（可选）选项将字符串拆分为最大数量的子字符串。 根据提供的字符分隔符将字符串拆分为最大数量的子字符串，可以选择忽略结果中的空子字符串。
				</summary>
				<param name="separator">一个字符，用于分隔此实例中的子字符串。</param>
				<param name="count">数组中预期的最大元素数。</param>
				<param name="options">枚举值的按位组合，指定是否剪裁子字符串并包括空子字符串。</param>
				<returns>一个数组，该数组包含此实例中的至多 count 个子字符串，这些子字符串由 separator 分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.Char,System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符和（可选）选项将字符串拆分为子字符串。
				</summary>
				<param name="separator">一个字符，用于分隔此字符串中的子字符串。</param>
				<param name="options">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</param>
				<returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 separator 分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.Char[])">
				<summary>
					根据指定的分隔字符将字符串拆分为子字符串。
				</summary>
				<param name="separator">分隔字符的数组、不包含分隔符的空数组或 null。</param>
				<returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 separator 中的一个或多个字符分隔。0</returns>
			</member>
			<member name="M:System.String.Split(System.Char[],System.Int32)">
				<summary>
					根据指定的分隔字符将一个字符串拆分成最大数量的子字符串。
				</summary>
				<param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 null。</param>
				<param name="count">要返回的子字符串的最大数量。</param>
				<returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 separator 中的一个或多个字符分隔。 </returns>
			</member>
			<member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
				<summary>
					根据指定的分隔字符和选项将字符串拆分为子字符串。
				</summary>
				<param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 null。</param>
				<param name="options">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</param>
				<returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 separator 中的一个或多个字符分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符串和（可选）选项将字符串拆分为最大数量的子字符串。
				</summary>
				<param name="separator">一个字符串，用于分隔此实例中的子字符串。</param>
				<param name="count">数组中预期的最大元素数。</param>
				<param name="options">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</param>
				<returns>一个数组，该数组包含此实例中的至多 count 个子字符串，这些子字符串由 separator 分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.String,System.StringSplitOptions)">
				<summary>
					根据提供的字符串分隔符将字符串拆分为多个子字符串。
				</summary>
				<param name="separator">一个字符串，用于分隔此字符串中的子字符串。</param>
				<param name="options">枚举值的按位组合，指定是否剪裁子字符串并包括空子字符串。</param>
				<returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 separator 分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符串和（可选）选项将字符串拆分为最大数量的子字符串。
				</summary>
				<param name="separator">分隔此字符串中子字符串的字符串、不包含分隔符的空数组或 null。</param>
				<param name="count">要返回的子字符串的最大数量。</param>
				<param name="options">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</param>
				<returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 separator 中的一个或多个字符串分隔。</returns>
			</member>
			<member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
				<summary>
					基于指定的分隔字符串和（可选）选项将字符串拆分为子字符串。
				</summary>
				<param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null。</param>
				<param name="options">枚举值的按位组合，指定是否剪裁子字符串并包括空子字符串。</param>
				<returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 separator 中的一个或多个字符串分隔。</returns>
			</member>
			<member name="M:System.String.StartsWith(System.String)">
				<summary>
					确定此字符串实例的开头是否与指定的字符串匹配。
				</summary>
				<param name="value">要比较的字符串。</param>
				<returns>如果 true 与此字符串的开头匹配，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.StartsWith(System.Char)">
				<summary>
					确定此字符串实例是否以指定字符开始。
				</summary>
				<param name="value">要比较的字符。</param>
				<returns>如果 true 与此字符串的开头匹配，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
				<summary>
					确定在使用指定的区域性进行比较时此字符串实例的开头是否与指定的字符串匹配。
				</summary>
				<param name="value">要比较的字符串。</param>
				<param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
				<param name="culture">确定如何对此字符串与 value 进行比较的区域性信息。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>如果 true 参数与此字符串的开头匹配，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.StartsWith(System.String,System.StringComparison)">
				<summary>
					确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。
				</summary>
				<param name="value">要比较的字符串。</param>
				<param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 value。</param>
				<returns>如果此实例以 true 开头，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.String.Substring(System.Int32)">
				<summary>
					从此实例检索子字符串。 子字符串在指定的字符位置开始并一直到该字符串的末尾。
				</summary>
				<param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
				<returns>与此实例中在 startIndex 处开头的子字符串等效的一个字符串；如果 Empty 等于此实例的长度，则为 startIndex。</returns>
			</member>
			<member name="M:System.String.Substring(System.Int32,System.Int32)">
				<summary>
					从此实例检索子字符串。 子字符串从指定的字符位置开始且具有指定的长度。
				</summary>
				<param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
				<param name="length">子字符串中的字符数。</param>
				<returns>与此实例中在 length 处开头、长度为 startIndex 的子字符串等效的一个字符串；如果 Empty 等于此实例的长度且 startIndex 为零，则为 length。</returns>
			</member>
			<member name="M:System.String.ToCharArray">
				<summary>
					将此实例中的字符复制到 Unicode 字符数组。
				</summary>
				<returns>元素为此实例的各字符的 Unicode 字符数组。 如果此实例是空字符串，则返回的数组为空且长度为零。</returns>
			</member>
			<member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
				<summary>
					将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。
				</summary>
				<param name="startIndex">此实例内子字符串的起始位置。</param>
				<param name="length">此实例内子字符串的长度。</param>
				<returns>元素为此实例中从字符位置 length 开始的 startIndex 字符数的 Unicode 字符数组。</returns>
			</member>
			<member name="M:System.String.ToLower">
				<summary>
					返回此字符串转换为小写形式的副本。
				</summary>
				<returns>一个小写字符串。</returns>
			</member>
			<member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
				<summary>
					根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。
				</summary>
				<param name="culture">一个对象，用于提供区域性特定的大小写规则。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>当前字符串的等效小写形式。</returns>
			</member>
			<member name="M:System.String.ToLowerInvariant">
				<summary>
					返回此 String 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。
				</summary>
				<returns>当前字符串的等效小写形式。</returns>
			</member>
			<member name="M:System.String.ToString">
				<summary>
					返回 String 的此实例；不执行实际转换。
				</summary>
				<returns>当前的字符串。</returns>
			</member>
			<member name="M:System.String.ToString(System.IFormatProvider)">
				<summary>
					返回 String 的此实例；不执行实际转换。
				</summary>
				<param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
				<returns>当前的字符串。</returns>
			</member>
			<member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
				<summary>
					根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。
				</summary>
				<param name="culture">一个对象，用于提供区域性特定的大小写规则。 如果 culture 为 null，则使用当前区域性。</param>
				<returns>当前字符串的大写形式。</returns>
			</member>
			<member name="M:System.String.ToUpper">
				<summary>
					返回此字符串转换为大写形式的副本。
				</summary>
				<returns>当前字符串的大写形式。</returns>
			</member>
			<member name="M:System.String.ToUpperInvariant">
				<summary>
					返回此 String 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。
				</summary>
				<returns>当前字符串的大写形式。</returns>
			</member>
			<member name="M:System.String.Trim">
				<summary>
					从当前字符串删除所有前导空白字符和尾随空白字符。
				</summary>
				<returns>从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Trim(System.Char)">
				<summary>
					从当前字符串删除字符的所有前导实例和尾随实例。
				</summary>
				<param name="trimChar">要删除的 Unicode 字符。</param>
				<returns>从当前字符串的开头和结尾删除 trimChar 字符的所有实例后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.Trim(System.Char[])">
				<summary>
					从当前字符串删除数组中指定的一组字符的所有前导匹配项和尾随匹配项。
				</summary>
				<param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
				<returns>从当前字符串的开头移除所出现的所有 trimChars 参数中的字符后剩余的字符串。 如果 trimChars 为 null 或空数组，则改为移除空白字符。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimEnd">
				<summary>
					从当前字符串删除所有尾随空白字符。
				</summary>
				<returns>从当前字符串的结尾删除所有空白字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimEnd(System.Char)">
				<summary>
					从当前字符串删除字符的所有尾随匹配项。
				</summary>
				<param name="trimChar">要删除的 Unicode 字符。</param>
				<returns>从当前字符串的末尾删除所出现的所有 trimChar 字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimEnd(System.Char[])">
				<summary>
					从当前字符串删除数组中指定的一组字符的所有尾随匹配项。
				</summary>
				<param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
				<returns>从当前字符串的开头移除所出现的所有 trimChars 参数中的字符后剩余的字符串。 如果 trimChars 为 null 或空数组，则改为删除 Unicode 空白字符。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimStart">
				<summary>
					从当前字符串删除所有前导空白字符。
				</summary>
				<returns>从当前字符串的开头删除所有空白字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimStart(System.Char)">
				<summary>
					删除当前字符串中的指定字符的所有前导匹配项。
				</summary>
				<param name="trimChar">要删除的 Unicode 字符。</param>
				<returns>从当前字符串的开头删除所出现的所有 trimChar 字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.TrimStart(System.Char[])">
				<summary>
					从当前字符串删除数组中指定的一组字符的所有前导匹配项。
				</summary>
				<param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
				<returns>从当前字符串的开头移除所出现的所有 trimChars 参数中的字符后剩余的字符串。 如果 trimChars 为 null 或空数组，则改为移除空白字符。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
			</member>
			<member name="M:System.String.op_Equality(System.String,System.String)">
				<summary>
					确定两个指定的字符串是否具有相同的值。
				</summary>
				<param name="a">要比较的第一个字符串，或 null。</param>
				<param name="b">要比较的第二个字符串，或 null。</param>
				<returns>如果 a 的值与 b 的值相同，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.String.op_Inequality(System.String,System.String)">
				<summary>
					确定两个指定的字符串是否具有不同的值。
				</summary>
				<param name="a">要比较的第一个字符串，或 null。</param>
				<param name="b">要比较的第二个字符串，或 null。</param>
				<returns>如果 true 的值与 a 的值不同，则为 b；否则为 false。</returns>
			</member>
			<member name="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}">
				<summary>
					定义给定字符串到只读字符范围的隐式转换。
				</summary>
				<param name="value">要隐式转换的字符串。</param>
			</member>
		</MF-System.String>
		<MF-System.Text.StringBuilder>
			<member name="T:System.Text.StringBuilder">
				<summary>
					表示可变字符字符串。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor">
				<summary>
					初始化 StringBuilder 类的新实例。
				</summary>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
				<summary>
					使用指定的容量初始化 StringBuilder 类的新实例。
				</summary>
				<param name="capacity">此实例的建议起始大小。</param>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor(System.String)">
				<summary>
					使用指定的字符串初始化 StringBuilder 类的新实例。
				</summary>
				<param name="value">用于初始化实例值的字符串。 如果 value 为 null，则新的 StringBuilder 将包含空字符串（即包含 Empty）。</param>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
				<summary>
					初始化 StringBuilder 类的新实例，该类起始于指定容量并且可增长到指定的最大容量。
				</summary>
				<param name="capacity">StringBuilder 的建议起始大小。</param>
				<param name="maxCapacity">当前字符串可包含的最大字符数。</param>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
				<summary>
					使用指定的字符串和容量初始化 StringBuilder 类的新实例。
				</summary>
				<param name="value">用于初始化实例值的字符串。 如果 value 为 null，则新的 StringBuilder 将包含空字符串（即包含 Empty）。</param>
				<param name="capacity">StringBuilder 的建议起始大小。</param>
			</member>
			<member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
				<summary>
					从指定的子字符串和容量初始化 StringBuilder 类的新实例。
				</summary>
				<param name="value">字符串包含用于初始化此实例值的子字符串。 如果 value 为 null，则新的 StringBuilder 将包含空字符串（即包含 Empty）。</param>
				<param name="startIndex">value 中子字符串开始的位置。</param>
				<param name="length">子字符串中的字符数。</param>
				<param name="capacity">StringBuilder 的建议起始大小。</param>
			</member>
			<member name="P:System.Text.StringBuilder.Item(System.Int32)">
				<summary>
					获取或设置此实例中指定字符位置处的字符。
				</summary>
				<param name="index">字符的位置。</param>
				<returns>index 位置处的 Unicode 字符。</returns>
			</member>
			<member name="P:System.Text.StringBuilder.Capacity">
				<summary>
					获取或设置可包含在当前实例所分配的内存中的最大字符数。
				</summary>
			</member>
			<member name="P:System.Text.StringBuilder.Length">
				<summary>
					获取或设置当前 StringBuilder 对象的长度。
				</summary>
			</member>
			<member name="P:System.Text.StringBuilder.MaxCapacity">
				<summary>
					获取此实例的最大容量。
				</summary>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
				<summary>
					向此实例追加 Unicode 字符的字符串表示形式指定数目的副本。
				</summary>
				<param name="value">要追加的字符。</param>
				<param name="repeatCount">要追加 value 的次数。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
				<summary>
					将从指定地址开始的 Unicode 字符数组追加到此实例。
				</summary>
				<param name="value">指向字符数组的指针。</param>
				<param name="valueCount">数组中的字符数。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Byte)">
				<summary>
					向此实例追加指定的 8 位无符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Boolean)">
				<summary>
					向此实例追加指定的布尔值的字符串表示形式。
				</summary>
				<param name="value">要追加的布尔值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.UInt64)">
				<summary>
					向此实例追加指定的 64 位无符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.UInt32)">
				<summary>
					向此实例追加指定的 32 位无符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.UInt16)">
				<summary>
					向此实例追加指定的 16 位无符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Char)">
				<summary>
					将指定的 Char 对象的字符串表示形式追加到此实例。
				</summary>
				<param name="value">要追加的 UTF 16 编码的代码单元。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)">
				<summary>
					向此实例追加指定的字符串生成器的字符串表示形式。
				</summary>
				<param name="value">要追加的字符串生成器。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
				<summary>
					向此实例追加指定子字符串的副本。
				</summary>
				<param name="value">包含要追加的子字符串的字符串。</param>
				<param name="startIndex">value 中子字符串开始的位置。</param>
				<param name="count">要追加的 value 中的字符数。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.String)">
				<summary>
					向此实例追加指定字符串的副本。
				</summary>
				<param name="value">要追加的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
				<summary>
					向此实例追加指定字符串生成器中的子字符串副本。
				</summary>
				<param name="value">包含要追加的子字符串的字符串生成器。</param>
				<param name="startIndex">value 中子字符串开始的位置。</param>
				<param name="count">要追加的 value 中的字符数。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.SByte)">
				<summary>
					向此实例追加指定的 8 位有符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})">
				<summary>
					向此实例追加指定的只读字符范围的字符串表示形式。
				</summary>
				<param name="value">要追加的只读字符范围。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Object)">
				<summary>
					向此实例追加指定对象的字符串表示形式。
				</summary>
				<param name="value">要追加的对象。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Int64)">
				<summary>
					向此实例追加指定的 64 位有符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Int32)">
				<summary>
					向此实例追加指定的 32 位有符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Int16)">
				<summary>
					向此实例追加指定的 16 位有符号整数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Double)">
				<summary>
					向此实例追加指定的双精度浮点数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Char[])">
				<summary>
					向此实例追加指定数组中的 Unicode 字符的字符串表示形式。
				</summary>
				<param name="value">要追加的字符数组。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
				<summary>
					向此实例追加指定的 Unicode 字符子数组的字符串表示形式。
				</summary>
				<param name="value">字符数组。</param>
				<param name="startIndex">value 中的起始位置。</param>
				<param name="charCount">要追加的字符数。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Single)">
				<summary>
					向此实例追加指定的单精度浮点数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Append(System.Decimal)">
				<summary>
					向此实例追加指定的十进制数的字符串表示形式。
				</summary>
				<param name="value">要追加的值。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都由参数数组中相应参数的字符串表示形式替换。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="args">要设置其格式的对象的数组。</param>
				<returns>对追加了 format 的此实例的引用。 format 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为这三个参数中任意一个参数的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<param name="arg2">要设置格式的第三个对象。</param>
				<returns>对追加了 format 的此实例的引用。 format 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为三个参数中任一个的字符串表示形式。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<param name="arg2">要设置格式的第三个对象。</param>
				<returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 format 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为一个自变量的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置其格式的对象。</param>
				<returns>对追加了 format 的此实例的引用。 format 中的每个格式项都替换为 arg0 的字符串表示形式。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="args">要设置其格式的对象的数组。</param>
				<returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 format 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为两个参数中任一个的字符串表示形式。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 format 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为单个参数的字符串表示形式。
				</summary>
				<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的对象。</param>
				<returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 format 的副本作为后缀，其中任何格式规范都由 arg0 的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
				<summary>
					向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为这两个参数中任意一个参数的字符串表示形式。
				</summary>
				<param name="format">复合格式字符串。</param>
				<param name="arg0">要设置格式的第一个对象。</param>
				<param name="arg1">要设置格式的第二个对象。</param>
				<returns>对追加了 format 的此实例的引用。 format 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
				<summary>
					使用各成员之间指定的分隔符连接和附加集合的成员。
				</summary>
				<typeparam name="T">values 成员的类型。</typeparam>
				<param name="separator">要用作分隔符的字符串。 separator 包括在连接和附加的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个集合，包含要连接和附加到字符串生成器的当前实例的对象。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])">
				<summary>
					使用各字符串之间指定的分隔符连接所提供的数组的字符串，然后将结果附加到字符串生成器的当前实例。
				</summary>
				<param name="separator">要用作分隔符的字符串。 separator 包括在联接的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个数组，包含要连接和附加到字符串生成器的当前实例的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])">
				<summary>
					使用各成员之间指定的分隔符连接所提供的对象数组中的元素的字符串表示形式，然后将结果附加到字符串生成器的当前实例。
				</summary>
				<param name="separator">要用作分隔符的字符串。 separator 包括在联接的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个数组，包含要连接和附加到字符串生成器的当前实例的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])">
				<summary>
					使用各成员之间指定的字符分隔符连接所提供的对象数组中的元素的字符串表示形式，然后将结果附加到字符串生成器的当前实例。
				</summary>
				<param name="separator">要用作分隔符的字符。 separator 包括在联接的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个数组，包含要连接和附加到字符串生成器的当前实例的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])">
				<summary>
					使用各字符串之间指定的字符分隔符连接所提供的数组的字符串，然后将结果附加到字符串生成器的当前实例。
				</summary>
				<param name="separator">要用作分隔符的字符。 separator 包括在联接的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个数组，包含要连接和附加到字符串生成器的当前实例的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
				<summary>
					使用各成员之间指定的字符分隔符连接和附加集合的成员。
				</summary>
				<typeparam name="T">values 成员的类型。</typeparam>
				<param name="separator">要用作分隔符的字符。 separator 包括在连接和附加的字符串中（仅当 values 具有多个元素时）。</param>
				<param name="values">一个集合，包含要连接和附加到字符串生成器的当前实例的对象。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendLine">
				<summary>
					将默认的行终止符追加到当前 StringBuilder 对象的末尾。
				</summary>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.AppendLine(System.String)">
				<summary>
					将后面跟有默认行终止符的指定字符串的副本追加到当前 StringBuilder 对象的末尾。
				</summary>
				<param name="value">要追加的字符串。</param>
				<returns>完成追加操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Clear">
				<summary>
					从当前 StringBuilder 实例中移除所有字符。
				</summary>
				<returns>其 Length 为 0（零）的对象。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
				<summary>
					将此实例的指定段中的字符复制到目标 Char 数组的指定段中。
				</summary>
				<param name="sourceIndex">此实例中开始复制字符的位置。 索引是从零开始的。</param>
				<param name="destination">将从中复制字符的数组。</param>
				<param name="destinationIndex">destination 中将从其开始复制字符的起始位置。 索引是从零开始的。</param>
				<param name="count">要复制的字符数。</param>
			</member>
			<member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)">
				<summary>
					将此实例的指定段中的字符复制到目标 Char 范围。
				</summary>
				<param name="sourceIndex">此实例中开始复制字符的位置。 索引是从零开始的。</param>
				<param name="destination">将从中复制字符的可写范围。</param>
				<param name="count">要复制的字符数。</param>
			</member>
			<member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
				<summary>
					确保 StringBuilder 的此实例的容量至少是指定值。
				</summary>
				<param name="capacity">要确保的最小容量。</param>
				<returns>此实例的新容量。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
				<summary>
					返回一个值，该值指示此实例是否等于指定的对象。
				</summary>
				<param name="sb">与此实例进行比较的对象，或为 null。</param>
				<returns>如果此实例和 sb 具有相等的字符串、Capacity 和 MaxCapacity 值，则为 true；否则，为 false。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})">
				<summary>
					返回一个值，该值指示此实例中的字符是否等于指定的只读字符范围中的字符。
				</summary>
				<param name="span">与当前实例进行比较的字符范围。</param>
				<returns>如果此实例中的字符与 span 相同，为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
				<summary>
					将 64 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
				<summary>
					将 32 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
				<summary>
					将 16 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
				<summary>
					将指定字符串的一个或更多副本插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的字符串。</param>
				<param name="count">要插入 value 的次数。</param>
				<returns>完成插入后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
				<summary>
					将单精度浮点数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
				<summary>
					将指定的 8 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
				<summary>
					将字符序列插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的字符范围。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
				<summary>
					将字符串插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的字符串。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
				<summary>
					将指定的 32 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
				<summary>
					将布尔值的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
				<summary>
					将指定的 8 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
				<summary>
					将 64 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
				<summary>
					将指定的 Unicode 字符的字符串表示形式插入到此实例中的指定位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
				<summary>
					将对象的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的对象，或 null。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
				<summary>
					将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">字符数组。</param>
				<param name="startIndex">value 内的起始索引。</param>
				<param name="charCount">要插入的字符数。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
				<summary>
					将十进制数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
				<summary>
					将双精度浮点数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
				<summary>
					将指定的 16 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的值。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
				<summary>
					将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。
				</summary>
				<param name="index">此实例中开始插入的位置。</param>
				<param name="value">要插入的字符数组。</param>
				<returns>完成插入操作后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
				<summary>
					将指定范围的字符从此实例中移除。
				</summary>
				<param name="startIndex">此实例中开始移除操作的从零开始的位置。</param>
				<param name="length">要删除的字符数。</param>
				<returns>切除操作完成后对此实例的引用。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
				<summary>
					将此实例的子字符串中出现的所有指定字符替换为其他指定字符。
				</summary>
				<param name="oldChar">要替换的字符。</param>
				<param name="newChar">替换 oldChar 的字符。</param>
				<param name="startIndex">此实例中子字符串开始的位置。</param>
				<param name="count">子字符串的长度。</param>
				<returns>对此实例的引用，其中从 startIndex 到 startIndex + count -1 范围内的 oldChar 被 newChar 替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
				<summary>
					将此实例中出现的所有指定字符串的替换为其他指定字符串。
				</summary>
				<param name="oldValue">要替换的字符串。</param>
				<param name="newValue">替换 oldValue 的字符串或 null。</param>
				<returns>对此实例的引用，其中 oldValue 的所有实例被 newValue 替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
				<summary>
					将此实例的子字符串中出现的所有指定字符串替换为其他指定字符串。
				</summary>
				<param name="oldValue">要替换的字符串。</param>
				<param name="newValue">替换 oldValue 的字符串或 null。</param>
				<param name="startIndex">此实例中子字符串开始的位置。</param>
				<param name="count">子字符串的长度。</param>
				<returns>对此实例的引用，其中从 startIndex 到 startIndex + count - 1 的范围内 oldValue 的所有实例被 newValue 替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
				<summary>
					将此实例中出现的所有指定字符替换为其他指定字符。
				</summary>
				<param name="oldChar">要替换的字符。</param>
				<param name="newChar">替换 oldChar 的字符。</param>
				<returns>对此实例的引用，其中 oldChar 被 newChar 替换。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.ToString">
				<summary>
					将此实例的值转换为 String。
				</summary>
				<returns>其值与此实例相同的字符串。</returns>
			</member>
			<member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
				<summary>
					将此实例中子字符串的值转换为 String。
				</summary>
				<param name="startIndex">此实例内子字符串的起始位置。</param>
				<param name="length">子字符串的长度。</param>
				<returns>一个字符串，其值与此实例的指定子字符串相同。</returns>
			</member>
		</MF-System.Text.StringBuilder>
		<MF-System.Collections.ArrayList>
			<member name="T:System.Collections.ArrayList">
				<summary>
					使用大小会根据需要动态增加的数组来实现 IList 接口。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.#ctor">
				<summary>
					初始化 ArrayList 类的新实例，该实例为空并且具有默认初始容量。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
				<summary>
					初始化 ArrayList 类的新实例，该类包含从指定集合复制的元素，并具有与复制的元素数相同的初始容量。
				</summary>
				<param name="c">其元素已复制到新列表的 ICollection。</param>
			</member>
			<member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
				<summary>
					初始化 ArrayList 类的新实例，该实例为空并且具有指定的初始容量。
				</summary>
				<param name="capacity">新列表最初可以存储的元素数。</param>
			</member>
			<member name="P:System.Collections.ArrayList.Item(System.Int32)">
				<summary>
					获取或设置指定索引处的元素。
				</summary>
				<param name="index">要获取或设置的元素的从零开始的索引。</param>
				<returns>指定索引处的元素。</returns>
			</member>
			<member name="P:System.Collections.ArrayList.IsSynchronized">
				<summary>
					获取一个值，该值指示是否同步对 ArrayList 的访问（线程安全）。
				</summary>
			</member>
			<member name="P:System.Collections.ArrayList.IsReadOnly">
				<summary>
					获取一个值，该值指示 ArrayList 是否为只读。
				</summary>
			</member>
			<member name="P:System.Collections.ArrayList.IsFixedSize">
				<summary>
					获取一个值，该值指示 ArrayList 是否具有固定大小。
				</summary>
			</member>
			<member name="P:System.Collections.ArrayList.Count">
				<summary>
					获取 ArrayList 中实际包含的元素数。
				</summary>
			</member>
			<member name="P:System.Collections.ArrayList.Capacity">
				<summary>
					获取或设置 ArrayList 可包含的元素数。
				</summary>
			</member>
			<member name="P:System.Collections.ArrayList.SyncRoot">
				<summary>
					获取可用于同步对 ArrayList 的访问的对象。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
				<summary>
					为特定 IList 创建 ArrayList 包装。
				</summary>
				<param name="list">要包装的 IList。</param>
				<returns>IList 的 ArrayList 包装。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
				<summary>
					返回具有固定大小的 ArrayList 包装。
				</summary>
				<param name="list">要包装的 ArrayList。</param>
				<returns>具有固定大小的 ArrayList 包装。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
				<summary>
					返回具有固定大小的 IList 包装。
				</summary>
				<param name="list">要包装的 IList。</param>
				<returns>具有固定大小的 IList 包装。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
				<summary>
					返回只读的 IList 包装。
				</summary>
				<param name="list">要包装的 IList。</param>
				<returns>list 周围的只读 IList 包装。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
				<summary>
					返回只读的 ArrayList 包装。
				</summary>
				<param name="list">要包装的 ArrayList。</param>
				<returns>list 周围的只读 ArrayList 包装。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
				<summary>
					返回 ArrayList，其元素是指定值的副本。
				</summary>
				<param name="value">要在新的 ArrayList 中对其进行多次复制的 Object。 该值可以为 null。</param>
				<param name="count">value 应复制的次数。</param>
				<returns>具有 count 个元素数的 ArrayList，所有元素都是 value 的副本。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
				<summary>
					返回同步的（线程安全）ArrayList 包装器。
				</summary>
				<param name="list">要同步的 ArrayList。</param>
				<returns>同步的（线程安全）ArrayList 包装器。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
				<summary>
					返回同步的（线程安全）IList 包装器。
				</summary>
				<param name="list">要同步的 IList。</param>
				<returns>同步的（线程安全）IList 包装器。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Add(System.Object)">
				<summary>
					将对象添加到 ArrayList 的结尾处。
				</summary>
				<param name="value">要添加到 Object 的结尾处的 ArrayList。 该值可以为 null。</param>
				<returns>已添加 value 的 ArrayList 索引。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
				<summary>
					将 ICollection 的元素添加到 ArrayList 的末尾。
				</summary>
				<param name="c">ICollection，其元素应添加到 ArrayList 的末尾。 集合本身不能为 null，但它可以包含为 null 的元素。</param>
			</member>
			<member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
				<summary>
					使用默认的比较器在整个已排序的 ArrayList 中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="value">要查找的 Object。 该值可以为 null。</param>
				<returns>如果找到 value，则为排序的 ArrayList 中从零开始的 value 索引；否则为一个负数，它是大于 value 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
				<summary>
					使用指定的比较器在已排序 ArrayList 的某个元素范围中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="index">要搜索范围的从零开始的起始索引。</param>
				<param name="count">要搜索的范围的长度。</param>
				<param name="value">要查找的 Object。 该值可以为 null。</param>
				<param name="comparer">比较元素时要使用的 IComparer 实现。或 如果为 null，则使用默认比较器，即每个元素的 IComparable 实现。</param>
				<returns>如果找到 value，则为排序的 ArrayList 中从零开始的 value 索引；否则为一个负数，它是大于 value 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
				<summary>
					使用指定的比较器在整个已排序的 ArrayList 中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="value">要查找的 Object。 该值可以为 null。</param>
				<param name="comparer">比较元素时要使用的 IComparer 实现。或 如果为 null，则使用默认比较器，即每个元素的 IComparable 实现。</param>
				<returns>如果找到 value，则为排序的 ArrayList 中从零开始的 value 索引；否则为一个负数，它是大于 value 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Clear">
				<summary>
					从 ArrayList 中移除所有元素。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.Clone">
				<summary>
					创建 ArrayList 的浅表副本。
				</summary>
				<returns>ArrayList 的浅表副本。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Contains(System.Object)">
				<summary>
					确定某元素是否在 ArrayList 中。
				</summary>
				<param name="item">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<returns>如果在 true 中找到 item，则为 ArrayList；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
				<summary>
					从目标数组的指定索引处开始，将 ArrayList 中某个范围的元素复制到兼容的一维数组 Array。
				</summary>
				<param name="index">复制即从源 ArrayList 中从零开始的索引开始。</param>
				<param name="array">一维 Array，它是从 ArrayList 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
				<param name="count">要复制的元素数。</param>
			</member>
			<member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
				<summary>
					从目标数组的指定索引处开始将整个 ArrayList 复制到兼容的一维 Array。
				</summary>
				<param name="array">一维 Array，它是从 ArrayList 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
				<summary>
					从目标数组的开头开始，将整个 ArrayList 复制到兼容的一维 Array。
				</summary>
				<param name="array">一维 Array，它是从 ArrayList 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
			</member>
			<member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
				<summary>
					返回 ArrayList 中元素范围的枚举器。
				</summary>
				<param name="index">枚举器应引用的 ArrayList 部分从零开始的起始索引。</param>
				<param name="count">枚举器应引用的 ArrayList 部分中的元素数。</param>
				<returns>ArrayList 中指定的元素范围的 IEnumerator。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.GetEnumerator">
				<summary>
					返回用于整个 ArrayList 的枚举数。
				</summary>
				<returns>用于整个 ArrayList 的 IEnumerator。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
				<summary>
					返回一个 ArrayList，它表示源 ArrayList 中的元素子集。
				</summary>
				<param name="index">范围开始处的从零开始的 ArrayList 索引。</param>
				<param name="count">范围中的元素数。</param>
				<returns>一个 ArrayList，它表示源 ArrayList 中的元素子集。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
				<summary>
					搜索指定的 Object，并返回 ArrayList 中从指定索引开始，并包含指定元素数的元素范围中第一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<returns>如果在 ArrayList 中从 startIndex 开始并包含 count 个元素的元素范围内找到 value 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
				<summary>
					搜索指定的 Object，并返回 ArrayList 中从指定索引到最后一个元素的元素范围中第一个匹配项的从零开始索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
				<returns>如果在 ArrayList 中从 startIndex 到最后一个元素的元素范围内找到 value 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
				<summary>
					搜索指定的 Object，并返回整个 ArrayList 中第一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<returns>如果找到，则为整个 value 中 ArrayList 第一个匹配项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
				<summary>
					将元素插入 ArrayList 的指定索引处。
				</summary>
				<param name="index">应插入 value 的从零开始的索引。</param>
				<param name="value">要插入的 Object。 该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
				<summary>
					将集合中的元素插入 ArrayList 的指定索引处。
				</summary>
				<param name="index">应在此处插入新元素的从零开始的索引。</param>
				<param name="c">ICollection，应将其元素插入到 ArrayList 中。 集合本身不能为 null，但它可以包含为 null 的元素。</param>
			</member>
			<member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
				<summary>
					在整个 ArrayList 中搜索指定的 Object，并返回最后一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<returns>如果在整个 ArrayList 中找到 value 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
				<summary>
					搜索指定的 Object，并返回 ArrayList 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<param name="startIndex">向后搜索的从零开始的起始索引。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<returns>如果在 ArrayList 中到 startIndex 为止包含 count 个元素的这部分元素中找到 value 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
				<summary>
					搜索指定的 Object，并返回 ArrayList 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始索引。
				</summary>
				<param name="value">要在 Object 中定位的 ArrayList。 该值可以为 null。</param>
				<param name="startIndex">向后搜索的从零开始的起始索引。</param>
				<returns>如果找到，则返回在 ArrayList 中从第一个元素到 startIndex 的元素范围内找到 value 的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.Remove(System.Object)">
				<summary>
					从 ArrayList 中移除特定对象的第一个匹配项。
				</summary>
				<param name="obj">要从 Object 移除的 ArrayList。 该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
				<summary>
					移除 ArrayList 的指定索引处的元素。
				</summary>
				<param name="index">要移除的元素的从零开始的索引。</param>
			</member>
			<member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
				<summary>
					从 ArrayList 中移除一系列元素。
				</summary>
				<param name="index">要移除的元素范围的从零开始的起始索引。</param>
				<param name="count">要移除的元素数。</param>
			</member>
			<member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
				<summary>
					将指定范围中元素的顺序反转。
				</summary>
				<param name="index">要反转的范围的从零开始的起始索引。</param>
				<param name="count">要反转的范围内的元素数。</param>
			</member>
			<member name="M:System.Collections.ArrayList.Reverse">
				<summary>
					将整个 ArrayList 中元素的顺序反转。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
				<summary>
					复制 ArrayList 中一个子集合的元素。
				</summary>
				<param name="index">从零开始的 ArrayList 索引，从此索引处开始复制 c 的元素。</param>
				<param name="c">ICollection，它的元素要复制到 ArrayList。 集合本身不能为 null，但它可以包含为 null 的元素。</param>
			</member>
			<member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
				<summary>
					使用指定的比较器对整个 ArrayList 中的元素进行排序。
				</summary>
				<param name="comparer">比较元素时要使用的 IComparer 实现。或 一个空引用（在 Visual Basic 中为 Nothing），将使用每个元素的 IComparable 实现。</param>
			</member>
			<member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
				<summary>
					使用指定的比较器对 ArrayList 中某个范围内的元素进行排序。
				</summary>
				<param name="index">要排序范围的从零开始的起始索引。</param>
				<param name="count">要排序的范围的长度。</param>
				<param name="comparer">比较元素时要使用的 IComparer 实现。或 一个空引用（在 Visual Basic 中为 Nothing），将使用每个元素的 IComparable 实现。</param>
			</member>
			<member name="M:System.Collections.ArrayList.Sort">
				<summary>
					对整个 ArrayList 中的元素进行排序。
				</summary>
			</member>
			<member name="M:System.Collections.ArrayList.ToArray">
				<summary>
					将 ArrayList 的元素复制到新 Object 数组中。
				</summary>
				<returns>一个包含 ArrayList 的元素副本的 Object 数组。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.ToArray(System.Type)">
				<summary>
					将 ArrayList 的元素复制到新的指定元素类型数组中。
				</summary>
				<param name="type">要创建和复制元素的目标数组的元素 Type。</param>
				<returns>包含 ArrayList 的元素副本的指定元素类型数组。</returns>
			</member>
			<member name="M:System.Collections.ArrayList.TrimToSize">
				<summary>
					将容量设置为 ArrayList 中元素的实际数目。
				</summary>
			</member>
		</MF-System.Collections.ArrayList>
		<MF-System.Collections.Stack>
			<member name="T:System.Collections.Stack">
				<summary>
					表示对象的简单后进先出 (LIFO) 非泛型集合。
				</summary>
			</member>
			<member name="M:System.Collections.Stack.#ctor">
				<summary>
					初始化 Stack 类的新实例，该实例为空并且具有默认初始容量。
				</summary>
			</member>
			<member name="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
				<summary>
					初始化 Stack 类的新实例，该实例包含从指定集合复制的元素并且具有与所复制的元素数相同的初始容量。
				</summary>
				<param name="col">ICollection，从其中复制元素。</param>
			</member>
			<member name="M:System.Collections.Stack.#ctor(System.Int32)">
				<summary>
					初始化 Stack 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。
				</summary>
				<param name="initialCapacity">Stack 可包含的初始元素数。</param>
			</member>
			<member name="P:System.Collections.Stack.Count">
				<summary>
					获取 Stack 中包含的元素数。
				</summary>
			</member>
			<member name="P:System.Collections.Stack.IsSynchronized">
				<summary>
					获取一个值，该值指示是否同步对 Stack 的访问（线程安全）。
				</summary>
			</member>
			<member name="P:System.Collections.Stack.SyncRoot">
				<summary>
					获取可用于同步对 Stack 的访问的对象。
				</summary>
			</member>
			<member name="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
				<summary>
					返回 Stack 的同步（线程安全）包装。
				</summary>
				<param name="stack">要同步的 Stack。</param>
				<returns>Stack 周围的同步包装。</returns>
			</member>
			<member name="M:System.Collections.Stack.Clear">
				<summary>
					从 Stack 中移除所有对象。
				</summary>
			</member>
			<member name="M:System.Collections.Stack.Clone">
				<summary>
					创建 Stack 的浅表副本。
				</summary>
				<returns>Stack 的浅表副本。</returns>
			</member>
			<member name="M:System.Collections.Stack.Contains(System.Object)">
				<summary>
					确定某元素是否在 Stack 中。
				</summary>
				<param name="obj">要在 Stack 中定位的对象。 该值可以为 null。</param>
				<returns>如果在 Stack 中找到 obj，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
				<summary>
					从指定的数组索引处开始，将 Stack 复制到现有的一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 Stack 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="index">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Stack.GetEnumerator">
				<summary>
					返回 IEnumerator 的 Stack。
				</summary>
				<returns>IEnumerator 的一个 Stack。</returns>
			</member>
			<member name="M:System.Collections.Stack.Peek">
				<summary>
					返回位于 Stack 顶部的对象但不将其移除。
				</summary>
				<returns>位于 Object 顶部的 Stack。</returns>
			</member>
			<member name="M:System.Collections.Stack.Pop">
				<summary>
					删除并返回 Stack 顶部的对象。
				</summary>
				<returns>从 Stack 顶部删除的 Object。</returns>
			</member>
			<member name="M:System.Collections.Stack.Push(System.Object)">
				<summary>
					在 Stack 的顶部插入一个对象。
				</summary>
				<param name="obj">要推入到 Stack 中的 Object。 该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Stack.ToArray">
				<summary>
					将 Stack 复制到新数组中。
				</summary>
				<returns>新数组，包含 Stack 的元素的副本。</returns>
			</member>
		</MF-System.Collections.Stack>
		<MF-System.Collections.Queue>
			<member name="T:System.Collections.Queue">
				<summary>
					表示对象的先进先出集合。
				</summary>
			</member>
			<member name="M:System.Collections.Queue.#ctor">
				<summary>
					初始化 Queue 类的新实例，该实例为空，具有默认初始容量并使用默认增长因子。
				</summary>
			</member>
			<member name="M:System.Collections.Queue.#ctor(System.Collections.ICollection)">
				<summary>
					初始化 Queue 类的新实例，该实例包含从指定集合复制的元素，具有与所复制的元素数相同的初始容量并使用默认增长因子。
				</summary>
				<param name="col">ICollection，从其中复制元素。</param>
			</member>
			<member name="M:System.Collections.Queue.#ctor(System.Int32)">
				<summary>
					初始化 Queue 类的新实例，该实例为空，具有指定的初始容量并使用默认增长因子。
				</summary>
				<param name="capacity">Queue 可包含的初始元素数。</param>
			</member>
			<member name="M:System.Collections.Queue.#ctor(System.Int32,System.Single)">
				<summary>
					初始化 Queue 类的新实例，该实例为空，具有指定的初始容量并使用指定的增长因子。
				</summary>
				<param name="capacity">Queue 可包含的初始元素数。</param>
				<param name="growFactor">扩展 Queue 容量要使用的因子。</param>
			</member>
			<member name="P:System.Collections.Queue.Count">
				<summary>
					获取 Queue 中包含的元素数。
				</summary>
			</member>
			<member name="P:System.Collections.Queue.IsSynchronized">
				<summary>
					获取一个值，该值指示是否同步对 Queue 的访问（线程安全）。
				</summary>
			</member>
			<member name="P:System.Collections.Queue.SyncRoot">
				<summary>
					获取可用于同步对 Queue 的访问的对象。
				</summary>
			</member>
			<member name="M:System.Collections.Queue.Synchronized(System.Collections.Queue)">
				<summary>
					返回将包装原始队列并且是线程安全的新的 Queue。
				</summary>
				<param name="queue">要同步的 Queue。</param>
				<returns>同步的（线程安全）Queue 包装。</returns>
			</member>
			<member name="M:System.Collections.Queue.Clear">
				<summary>
					从 Queue 中移除所有对象。
				</summary>
			</member>
			<member name="M:System.Collections.Queue.Clone">
				<summary>
					创建 Queue 的浅表副本。
				</summary>
				<returns>Queue 的浅表副本。</returns>
			</member>
			<member name="M:System.Collections.Queue.Contains(System.Object)">
				<summary>
					确定某元素是否在 Queue 中。
				</summary>
				<param name="obj">要在 Object 中定位的 Queue。 该值可以为 null。</param>
				<returns>如果在 true 中找到 obj，则为 Queue；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)">
				<summary>
					从指定数组索引开始将 Queue 元素复制到现有一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 Queue 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="index">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Queue.Dequeue">
				<summary>
					移除并返回位于 Queue 开始处的对象。
				</summary>
				<returns>从 Queue 的开始处移除的对象。</returns>
			</member>
			<member name="M:System.Collections.Queue.Enqueue(System.Object)">
				<summary>
					将对象添加到 Queue 的结尾处。
				</summary>
				<param name="obj">要添加到 Queue 的对象。 该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Queue.GetEnumerator">
				<summary>
					返回循环访问 Queue 的枚举数。
				</summary>
				<returns>IEnumerator 的一个 Queue。</returns>
			</member>
			<member name="M:System.Collections.Queue.Peek">
				<summary>
					返回位于 Queue 开始处的对象但不将其移除。
				</summary>
				<returns>位于 Queue 的开头的对象。</returns>
			</member>
			<member name="M:System.Collections.Queue.ToArray">
				<summary>
					将 Queue 元素复制到新数组。
				</summary>
				<returns>包含从 Queue 复制的元素的新数组。</returns>
			</member>
			<member name="M:System.Collections.Queue.TrimToSize">
				<summary>
					将容量设置为 Queue 中元素的实际数目。
				</summary>
			</member>
		</MF-System.Collections.Queue>
		<MF-System.Collections.Hashtable>
			<member name="T:System.Collections.Hashtable">
				<summary>
					表示根据键的哈希代码进行组织的键/值对的集合。
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor">
				<summary>
					使用默认的初始容量、加载因子、哈希代码提供程序和比较器来初始化 Hashtable 类的新的空实例。
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
				<summary>
					通过将指定字典中的元素复制到新的 Hashtable 对象中，初始化 Hashtable 类的一个新实例。 新 Hashtable 对象的初始容量等于复制的元素数，并且使用默认的加载因子、哈希代码提供程序和比较器。
				</summary>
				<param name="d">要复制到新 IDictionary 对象的 Hashtable 对象。</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
				<summary>
					使用指定的初始容量、默认加载因子、默认哈希代码提供程序和默认比较器来初始化 Hashtable 类的新的空实例。
				</summary>
				<param name="capacity">Hashtable 对象最初可包含的元素的近似数目。</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
				<summary>
					使用默认的初始容量、默认加载因子和指定的 Hashtable 对象来初始化 IEqualityComparer 类的新的空实例。
				</summary>
				<param name="equalityComparer">
					IEqualityComparer 对象，用于定义要与 Hashtable 对象一起使用的哈希代码提供程序和比较器。
					或 null，则使用默认哈希代码提供程序和默认比较器。
					默认哈希代码提供程序是各个键的 GetHashCode() 实现，而默认比较器是各个键的 Equals(Object) 实现。
				</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
				<summary>
					使用指定的初始容量、指定的加载因子、默认的哈希代码提供程序和默认比较器来初始化 Hashtable 类的新的空实例。
				</summary>
				<param name="capacity">Hashtable 对象最初可包含的元素的近似数目。</param>
				<param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
				<summary>
					已弃用，请改用 Hashtable(IEqualityComparer)
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
				<summary>
					使用指定的初始容量和 Hashtable 以及默认的加载因子来初始化 IEqualityComparer 类的新的空实例。
				</summary>
				<param name="capacity">Hashtable 对象最初可包含的元素的近似数目。</param>
				<param name="equalityComparer">
					IEqualityComparer 对象，用于定义要用来处理 Hashtable 的哈希代码提供程序和比较器。
					或 null，则使用默认哈希代码提供程序和默认比较器。
					默认哈希代码提供程序是各个键的 GetHashCode() 实现，而默认比较器是各个键的 Equals(Object) 实现。
				</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
				<summary>
					通过将指定字典中的元素复制到新的 Hashtable 对象中，初始化 Hashtable 类的一个新实例。 新 Hashtable 对象的初始容量等于复制的元素数，并且使用指定的加载因子、默认哈希代码提供程序和默认比较器。
				</summary>
				<param name="d">要复制到新 IDictionary 对象的 Hashtable 对象。</param>
				<param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
				<summary>
					通过将指定字典中的元素复制到新的 Hashtable 对象中，初始化 Hashtable 类的一个新实例。 新 Hashtable 对象的初始容量等于复制的元素数，并且使用默认加载因子和指定的 IEqualityComparer 对象。
				</summary>
				<param name="d">要复制到新 IDictionary 对象的 Hashtable 对象。</param>
				<param name="equalityComparer">
					IEqualityComparer 对象，用于定义要用来处理 Hashtable 的哈希代码提供程序和比较器。
					或 null，则使用默认哈希代码提供程序和默认比较器。
					默认哈希代码提供程序是各个键的 GetHashCode() 实现，而默认比较器是各个键的 Equals(Object) 实现。
				</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
				<summary>
					通过将指定字典中的元素复制到新的 Hashtable 对象中，初始化 Hashtable 类的一个新实例。 新 Hashtable 对象的初始容量等于复制的元素数，并且使用指定的加载因子和 IEqualityComparer 对象。
				</summary>
				<param name="d">要复制到新 IDictionary 对象的 Hashtable 对象。</param>
				<param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
				<param name="equalityComparer">
					IEqualityComparer 对象，用于定义要用来处理 Hashtable 的哈希代码提供程序和比较器。
					或 null，则使用默认哈希代码提供程序和默认比较器。
					默认哈希代码提供程序是各个键的 GetHashCode() 实现，而默认比较器是各个键的 Equals(Object) 实现。
				</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
				<summary>
					已弃用，请改用 Hashtable(IDictionary, IEqualityComparer)
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
				<summary>
					已弃用，请改用 Hashtable(int, IEqualityComparer)
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
				<summary>
					使用指定的初始容量、加载因子和 Hashtable 对象来初始化 IEqualityComparer 类的新的空实例。
				</summary>
				<param name="capacity">Hashtable 对象最初可包含的元素的近似数目。</param>
				<param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
				<param name="equalityComparer">
					IEqualityComparer 对象，用于定义要用来处理 Hashtable 的哈希代码提供程序和比较器。
					或 null，则使用默认哈希代码提供程序和默认比较器。
					默认哈希代码提供程序是各个键的 GetHashCode() 实现，而默认比较器是各个键的 Equals(Object) 实现。
				</param>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
				<summary>
					已弃用，请改用 Hashtable(int, float, IEqualityComparer)
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
				<summary>
					已弃用，请改用 Hashtable(IDictionary, float, IEqualityComparer)
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					初始化 Hashtable 类的新的空实例，该实例可序列化且使用指定的 SerializationInfo 和 StreamingContext。
				</summary>
				<param name="info">SerializationInfo 对象，包含序列化 Hashtable 所需的信息。</param>
				<param name="context">一个 StreamingContext 对象包含与Hashtable 关联的序列化流的源和目标。</param>
			</member>
			<member name="P:System.Collections.Hashtable.Item(System.Object)">
				<summary>
					获取或设置与指定的键关联的值。
				</summary>
				<param name="key">要获取或设置其值的键。</param>
				<returns>与指定的键相关联的值。 如果未找到指定的键，尝试获取它将返回 null，尝试设置它将使用指定的键创建新元素。</returns>
			</member>
			<member name="P:System.Collections.Hashtable.IsFixedSize">
				<summary>
					获取一个值，该值指示 Hashtable 是否具有固定大小。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.Keys">
				<summary>
					获取包含 ICollection 中的键的 Hashtable。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.IsSynchronized">
				<summary>
					获取一个值，该值指示是否同步对 Hashtable 的访问（线程安全）。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.IsReadOnly">
				<summary>
					获取一个值，该值指示 Hashtable 是否为只读。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.Count">
				<summary>
					获取包含在 Hashtable 中的键/值对的数目。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.Values">
				<summary>
					获取一个 ICollection，它包含 Hashtable 中的值。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.SyncRoot">
				<summary>
					获取可用于同步对 Hashtable 的访问的对象。
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.comparer">
				<summary>
					已弃用，请改用 KeyComparer
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.hcp">
				<summary>
					已弃用，请改用 EqualityComparer
				</summary>
			</member>
			<member name="P:System.Collections.Hashtable.EqualityComparer">
				<summary>
					获取要用于 IEqualityComparer 的 Hashtable。
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
				<summary>
					返回 Hashtable 的同步（线程安全）包装。
				</summary>
				<param name="table">要同步的 Hashtable。</param>
				<returns>Hashtable 的同步（线程安全）包装。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
				<summary>
					将带有指定键和值的元素添加到 Hashtable 中。
				</summary>
				<param name="key">要添加的元素的键。</param>
				<param name="value">要添加的元素的值。 该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Hashtable.Clear">
				<summary>
					从 Hashtable 中移除所有元素。
				</summary>
			</member>
			<member name="M:System.Collections.Hashtable.Clone">
				<summary>
					创建 Hashtable 的浅表副本。
				</summary>
				<returns>Hashtable 的浅表副本。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.Contains(System.Object)">
				<summary>
					确定 Hashtable 是否包含特定键。
				</summary>
				<param name="key">要在 Hashtable 中定位的键。</param>
				<returns>如果 true 包含具有指定键的元素，则为 Hashtable；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
				<summary>
					确定 Hashtable 是否包含特定键。
				</summary>
				<param name="key">要在 Hashtable 中定位的键。</param>
				<returns>如果 true 包含具有指定键的元素，则为 Hashtable；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
				<summary>
					确定 Hashtable 是否包含特定值。
				</summary>
				<param name="value">要在 Hashtable 中定位的值。 该值可以为 null。</param>
				<returns>如果 true 包含具有指定 Hashtable 的元素，则为 value；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
				<summary>
					将 Hashtable 元素复制到一维 Array 实例中的指定索引位置。
				</summary>
				<param name="array">一维 Array，它是从 DictionaryEntry 复制的 Hashtable 对象的目标位置。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Hashtable.GetEnumerator">
				<summary>
					返回循环访问 IDictionaryEnumerator 的 Hashtable。
				</summary>
				<returns>IDictionaryEnumerator 的一个 Hashtable。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					实现 ISerializable 接口，并返回序列化 Hashtable 所需的数据。
				</summary>
				<param name="info">一个 SerializationInfo 对象包含序列化 Hashtable 所需的信息。</param>
				<param name="context">一个 StreamingContext 对象包含与Hashtable 关联的序列化流的源和目标。</param>
			</member>
			<member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
				<summary>
					实现 ISerializable 接口，并在完成反序列化之后引发反序列化事件。
				</summary>
				<param name="sender">反序列化事件源。</param>
			</member>
			<member name="M:System.Collections.Hashtable.Remove(System.Object)">
				<summary>
					从 Hashtable 中移除带有指定键的元素。
				</summary>
				<param name="key">要移除的元素的键。</param>
			</member>
			<member name="M:System.Collections.Hashtable.GetHash(System.Object)">
				<summary>
					返回指定键的哈希代码。
				</summary>
				<param name="key">Object，将为其返回哈希代码。</param>
				<returns>key 的哈希代码。</returns>
			</member>
			<member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
				<summary>
					将特定 Object 与 Hashtable 中的特定键进行比较。
				</summary>
				<param name="item">要与 key 进行比较的 Object。</param>
				<param name="key">要与 item 进行比较的 Hashtable 中的键。</param>
				<returns>如果 item 和 key 相等，则为 true；否则为 false。</returns>
			</member>
		</MF-System.Collections.Hashtable>
		<MF-System.Collections.Generic.List>
			<member name="T:System.Collections.Generic.List`1">
				<summary>
					表示可通过索引访问的对象的强类型列表。 提供用于对列表进行搜索、排序和操作的方法。
				</summary>
				<typeparam name="T">列表中元素的类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.List`1.#ctor">
				<summary>
					初始化 <![CDATA[List<T>]]> 类的新实例，该实例为空并且具有默认初始容量。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
				<summary>
					初始化 <![CDATA[List<T>]]> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
				</summary>
				<param name="collection">一个集合，其元素被复制到新列表中。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
				<summary>
					初始化 <![CDATA[List<T>]]> 类的新实例，该实例为空并且具有指定的初始容量。
				</summary>
				<param name="capacity">新列表最初可以存储的元素数。</param>
			</member>
			<member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
				<summary>
					获取或设置指定索引处的元素。
				</summary>
				<param name="index">要获取或设置的元素的从零开始的索引。</param>
				<returns>指定索引处的元素。</returns>
			</member>
			<member name="P:System.Collections.Generic.List`1.Count">
				<summary>
					获取 <![CDATA[List<T>]]> 中包含的元素数。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.List`1.Capacity">
				<summary>
					获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Add(`0)">
				<summary>
					将对象添加到 <![CDATA[List<T>]]> 的结尾处。
				</summary>
				<param name="item">要添加到 <![CDATA[List<T>]]> 末尾的对象。 对于引用类型，该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
				<summary>
					将指定集合的元素添加到 <![CDATA[List<T>]]> 的末尾。
				</summary>
				<param name="collection">应将其元素添加到 <![CDATA[List<T>]]> 的末尾的集合。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.AsReadOnly">
				<summary>
					返回当前集合的只读 <![CDATA[ReadOnlyCollection<T>]]> 包装器。
				</summary>
				<returns>一个对象，作为围绕当前 <![CDATA[List<T>]]> 的只读包装器。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
				<summary>
					使用指定的比较器在已排序 <![CDATA[List<T>]]> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="index">要搜索范围的从零开始的起始索引。</param>
				<param name="count">要搜索的范围的长度。</param>
				<param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="comparer">比较元素时要使用的 <![CDATA[IComparer<T>]]> 实现，若要使用默认比较器 Default，则为 null。</param>
				<returns>如果找到 item，则为已排序的 <![CDATA[List<T>]]> 中 item 的从零开始的索引；否则为一个负数，该负数是大于 item 的下一个元素的索引的按位求补。如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
				<summary>
					使用默认的比较器在整个已排序的 <![CDATA[List<T>]]> 中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果找到 item，则为已排序的 <![CDATA[List<T>]]> 中 item 的从零开始的索引；否则为一个负数，该负数是大于 item 的下一个元素的索引的按位求补。如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
				<summary>
					使用指定的比较器在整个已排序的 <![CDATA[List<T>]]> 中搜索元素，并返回该元素从零开始的索引。
				</summary>
				<param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="comparer">比较元素时要使用的 <![CDATA[IComparer<T>]]> 实现。或 如果使用默认比较器 Default，则为 null。</param>
				<returns>如果找到 item，则为已排序的 <![CDATA[List<T>]]> 中 item 的从零开始的索引；否则为一个负数，该负数是大于 item 的下一个元素的索引的按位求补。如果没有更大的元素，则为 Count 的按位求补。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.Clear">
				<summary>
					从 <![CDATA[List<T>]]> 中移除所有元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Contains(`0)">
				<summary>
					确定某元素是否在 <![CDATA[List<T>]]> 中。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果在 true 中找到 item，则为 <![CDATA[List<T>]]>；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
				<summary>
					将当前 <![CDATA[List<T>]]> 中的元素转换为另一种类型，并返回包含已转换元素的列表。
				</summary>
				<typeparam name="TOutput">目标数组元素的类型。</typeparam>
				<param name="converter">一个 <![CDATA[Converter<TInput,TOutput>]]> 委托，可将每个元素从一种类型转换为另一种类型。</param>
				<returns>目标类型的 <![CDATA[List<T>]]>，包含当前 <![CDATA[List<T>]]> 中转换后的元素。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
				<summary>
					从目标数组的指定索引处开始，将整个 <![CDATA[List<T>]]> 复制到兼容的一维数组。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[List<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
				<summary>
					从目标数组的开头开始，将整个 <![CDATA[List<T>]]> 复制到兼容的一维数组。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[List<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
				<summary>
					从目标数组的指定索引处开始，将元素的范围从 <![CDATA[List<T>]]> 复制到兼容的一维数组。
				</summary>
				<param name="index">复制即从源 <![CDATA[List<T>]]> 中从零开始的索引开始。</param>
				<param name="array">一维 Array，它是从 <![CDATA[List<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
				<param name="count">要复制的元素数。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
				<summary>
					确定 <![CDATA[List<T>]]> 是否包含与指定谓词定义的条件匹配的元素。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素应满足的条件。</param>
				<returns>如果 <![CDATA[List<T>]]> 包含一个或多个元素与指定谓词定义的条件匹配，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <![CDATA[List<T>]]> 中的第一个匹配元素。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 T 的默认值。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
				<summary>
					检索与指定谓词定义的条件匹配的所有元素。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素应满足的条件。</param>
				<returns>如果找到一个 <![CDATA[List<T>]]>，其中所有元素均与指定谓词定义的条件匹配，则为该数组；否则为一个空 <![CDATA[List<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <![CDATA[List<T>]]> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。
				</summary>
				<param name="startIndex">从零开始的搜索的起始索引。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回 <![CDATA[List<T>]]> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
				</summary>
				<param name="startIndex">从零开始的搜索的起始索引。</param>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <![CDATA[List<T>]]> 中第一个匹配元素的从零开始的索引。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <![CDATA[List<T>]]> 中的最后一个匹配元素。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 T 的默认值。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回 <![CDATA[List<T>]]> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。
				</summary>
				<param name="startIndex">向后搜索的从零开始的起始索引。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
				<summary>
					搜索与由指定谓词定义的条件相匹配的元素，并返回 <![CDATA[List<T>]]> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
				</summary>
				<param name="startIndex">向后搜索的从零开始的起始索引。</param>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
				<summary>
					搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <![CDATA[List<T>]]> 中最后一个匹配元素的从零开始的索引。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要搜索的元素的条件。</param>
				<returns>如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
				<summary>
					对 <![CDATA[List<T>]]> 的每个元素执行指定操作。
				</summary>
				<param name="action">要对 <![CDATA[List<T>]]> 的每个元素执行的 <![CDATA[Action<T>]]> 委托。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[List<T>]]> 的枚举数。
				</summary>
				<returns>用于 <![CDATA[List<T>]]>.Enumerator 的 <![CDATA[List<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
				<summary>
					在源 <![CDATA[List<T>]]> 中创建元素范围的浅表复制。
				</summary>
				<param name="index">范围开始处的从零开始的 <![CDATA[List<T>]]> 索引。</param>
				<param name="count">范围中的元素数。</param>
				<returns>源 <![CDATA[List<T>]]> 中的元素范围的浅表副本复制。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
				<summary>
					搜索指定对象并返回 <![CDATA[List<T>]]> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<returns>如果在 <![CDATA[List<T>]]> 中从 index 开始并包含 count 个元素的元素范围内找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
				<summary>
					搜索指定对象并返回 <![CDATA[List<T>]]> 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
				<returns>如果在 <![CDATA[List<T>]]> 中从 index 到最后一个元素的元素范围内找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
				<summary>
					搜索指定的对象，并返回整个 <![CDATA[List<T>]]> 中第一个匹配项的从零开始的索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果找到，则为整个 item 中 <![CDATA[List<T>]]> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
				<summary>
					将元素插入 <![CDATA[List<T>]]> 的指定索引处。
				</summary>
				<param name="index">应插入 item 的从零开始的索引。</param>
				<param name="item">要插入的对象。 对于引用类型，该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
				<summary>
					将集合中的元素插入 <![CDATA[List<T>]]> 的指定索引处。
				</summary>
				<param name="index">应在此处插入新元素的从零开始的索引。</param>
				<param name="collection">应将其元素插入到 <![CDATA[List<T>]]> 中的集合。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
				<summary>
					搜索指定对象并返回整个 <![CDATA[List<T>]]> 中最后一个匹配项的从零开始索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果在整个 <![CDATA[List<T>]]> 中找到 item 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
				<summary>
					搜索指定对象并返回 <![CDATA[List<T>]]> 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="index">向后搜索的从零开始的起始索引。</param>
				<returns>如果找到，则返回在 <![CDATA[List<T>]]> 中从第一个元素到 index 的元素范围内找到 item 的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
				<summary>
					搜索指定对象并返回 <![CDATA[List<T>]]> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。
				</summary>
				<param name="item">要在 <![CDATA[List<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<param name="index">向后搜索的从零开始的起始索引。</param>
				<param name="count">要搜索的部分中的元素数。</param>
				<returns>如果在 <![CDATA[List<T>]]> 中到 index 为止包含 count 个元素的这部分元素中找到 item 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.Remove(`0)">
				<summary>
					从 <![CDATA[List<T>]]> 中移除特定对象的第一个匹配项。
				</summary>
				<param name="item">要从 <![CDATA[List<T>]]> 中删除的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果成功移除了 item，则为 true；否则为 false。 如果在 false 中没有找到 item，则此方法也会返回 <![CDATA[List<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
				<summary>
					移除与指定的谓词所定义的条件相匹配的所有元素。
				</summary>
				<param name="match"><![CDATA[Predicate<T>]]> 委托，用于定义要移除的元素应满足的条件。</param>
				<returns>从 <![CDATA[List<T>]]> 中移除的元素数。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
				<summary>
					移除 <![CDATA[List<T>]]> 的指定索引处的元素。
				</summary>
				<param name="index">要移除的元素的从零开始的索引。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
				<summary>
					从 <![CDATA[List<T>]]> 中移除一系列元素。
				</summary>
				<param name="index">要移除的元素范围的从零开始的起始索引。</param>
				<param name="count">要移除的元素数。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
				<summary>
					将指定范围中元素的顺序反转。
				</summary>
				<param name="index">要反转的范围的从零开始的起始索引。</param>
				<param name="count">要反转的范围内的元素数。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.Reverse">
				<summary>
					将整个 <![CDATA[List<T>]]> 中元素的顺序反转。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
				<summary>
					使用指定的 <![CDATA[Comparison<T>]]>，对整个 <![CDATA[List<T>]]> 中的元素进行排序。
				</summary>
				<param name="comparison">比较元素时要使用的 <![CDATA[Comparison<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
				<summary>
					使用指定的比较器对 <![CDATA[List<T>]]> 中某个范围内的元素进行排序。
				</summary>
				<param name="index">要排序范围的从零开始的起始索引。</param>
				<param name="count">要排序的范围的长度。</param>
				<param name="comparer">比较元素时要使用的 <![CDATA[IComparer<T>]]> 实现，若要使用默认比较器 Default，则为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.Sort">
				<summary>
					使用默认比较器对整个 <![CDATA[List<T>]]> 中的元素进行排序。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
				<summary>
					使用指定的比较器对整个 <![CDATA[List<T>]]> 中的元素进行排序。
				</summary>
				<param name="comparer">比较元素时要使用的 <![CDATA[IComparer<T>]]> 实现，若要使用默认比较器 Default，则为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.List`1.ToArray">
				<summary>
					将 <![CDATA[List<T>]]> 的元素复制到新数组中。
				</summary>
				<returns>一个包含 <![CDATA[List<T>]]> 的元素副本的数组。</returns>
			</member>
			<member name="M:System.Collections.Generic.List`1.TrimExcess">
				<summary>
					将容量设置为 <![CDATA[List<T>]]> 中元素的实际数目（如果该数目小于某个阈值）。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
				<summary>
					确定 <![CDATA[List<T>]]> 中的每个元素是否都与指定谓词定义的条件匹配。
				</summary>
				<param name="match">用于定义检查元素时要对照条件的 <![CDATA[Predicate<T>]]> 委托。</param>
				<returns>如果 <![CDATA[List<T>]]> 中的每个元素都与指定的谓词所定义的条件相匹配，则为 true；否则为 false。 如果列表没有元素，则返回值为 true。</returns>
			</member>
			<member name="T:System.Collections.Generic.List`1.Enumerator">
				<summary>
					枚举 <![CDATA[List<T>]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.List`1.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[List<T>]]>.Enumerator 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[List<T>]]> 的下一个元素。
				</summary>
				<returns></returns>
			</member>
		</MF-System.Collections.Generic.List>
		<MF-System.Collections.Generic.Dictionary>
			<member name="T:System.Collections.Generic.Dictionary`2">
				<summary>
					表示键和值的集合。
				</summary>
				<typeparam name="TKey">字典中的键的类型。</typeparam>
				<typeparam name="TValue">字典中的值的类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例为空且具有默认的初始容量，并使用键类型的默认相等比较器。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例包含从指定的 <![CDATA[IDictionary<TKey,TValue>]]> 中复制的元素并为键类型使用默认的相等比较器。
				</summary>
				<param name="dictionary"><![CDATA[IDictionary<TKey,TValue>]]>，它的元素被复制到新 <![CDATA[Dictionary<TKey,TValue>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该类包含从指定的 <![CDATA[IEnumerable<T>]]> 中复制的元素。
				</summary>
				<param name="collection"><![CDATA[IEnumerable<T>]]>，它的元素被复制到新的 <![CDATA[Dictionary<TKey,TValue>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <![CDATA[IEqualityComparer<T>]]>。
				</summary>
				<param name="comparer">比较键时要使用的 <![CDATA[IEqualityComparer<T>]]> 实现，或者为 null，以便为键类型使用默认的 <![CDATA[EqualityComparer<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例为空且具有指定的初始容量，并为键类型使用默认的相等比较器。
				</summary>
				<param name="capacity"><![CDATA[Dictionary<TKey,TValue>]]> 可包含的初始元素数。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例包含从指定的 <![CDATA[IDictionary<TKey,TValue>]]> 中复制的元素并使用指定的 <![CDATA[IEqualityComparer<T>]]>。
				</summary>
				<param name="dictionary"><![CDATA[IDictionary<TKey,TValue>]]>，它的元素被复制到新 <![CDATA[Dictionary<TKey,TValue>]]>。</param>
				<param name="comparer">比较键时要使用的 <![CDATA[IEqualityComparer<T>]]> 实现，或者为 null，以便为键类型使用默认的 <![CDATA[EqualityComparer<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例包含从指定的 <![CDATA[IEnumerable<T>]]> 中复制的元素并使用指定的 <![CDATA[IEqualityComparer<T>]]>。
				</summary>
				<param name="collection"><![CDATA[IEnumerable<T>]]>，它的元素被复制到新 <![CDATA[Dictionary<TKey,TValue>]]>。</param>
				<param name="comparer">比较键时要使用的 <![CDATA[IEqualityComparer<T>]]> 实现，或者为 null，以便为键类型使用默认的 <![CDATA[EqualityComparer<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <![CDATA[IEqualityComparer<T>]]>。
				</summary>
				<param name="capacity"><![CDATA[Dictionary<TKey,TValue>]]> 可包含的初始元素数。</param>
				<param name="comparer">比较键时要使用的 <![CDATA[IEqualityComparer<T>]]> 实现，或者为 null，以便为键类型使用默认的 <![CDATA[EqualityComparer<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					用序列化数据初始化 <![CDATA[Dictionary<TKey,TValue>]]> 类的新实例。
				</summary>
				<param name="info">一个 SerializationInfo 对象包含序列化 <![CDATA[Dictionary<TKey,TValue>]]> 所需的信息。</param>
				<param name="context">StreamingContext 结构，该结构包含与 <![CDATA[Dictionary<TKey,TValue>]]> 相关联的序列化流的源和目标。</param>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
				<summary>
					获取或设置与指定的键关联的值。
				</summary>
				<param name="key">要获取或设置的值的键。</param>
				<returns>与指定的键相关联的值。 如果找不到指定的键，get 操作便会引发 KeyNotFoundException，而 set 操作会创建一个具有指定键的新元素。</returns>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Keys">
				<summary>
					获得一个包含 <![CDATA[Dictionary<TKey,TValue>]]> 中的键的集合。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Values">
				<summary>
					获得一个包含 <![CDATA[Dictionary<TKey,TValue>]]> 中的值的集合。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Comparer">
				<summary>
					获取用于确定字典中的键是否相等的 <![CDATA[IEqualityComparer<T>]]>。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Count">
				<summary>
					获取包含在 <![CDATA[Dictionary<TKey,TValue>]]> 中的键/值对的数目。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
				<summary>
					将指定的键和值添加到字典中。
				</summary>
				<param name="key">要添加的元素的键。</param>
				<param name="value">要添加的元素的值。 对于引用类型，该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Clear">
				<summary>
					将所有键和值从 <![CDATA[Dictionary<TKey,TValue>]]> 中移除。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
				<summary>
					确定是否 <![CDATA[Dictionary<TKey,TValue>]]> 包含指定键。
				</summary>
				<param name="key">要在 <![CDATA[Dictionary<TKey,TValue>]]> 中定位的键。</param>
				<returns>如果 <![CDATA[Dictionary<TKey,TValue>]]> 包含具有指定键的元素，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
				<summary>
					确定 <![CDATA[Dictionary<TKey,TValue>]]> 是否包含特定值。
				</summary>
				<param name="value">要在 <![CDATA[Dictionary<TKey,TValue>]]> 中定位的值。 对于引用类型，该值可以为 null。</param>
				<returns>如果 <![CDATA[Dictionary<TKey,TValue>]]> 包含具有指定值的元素，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
				<summary>
					确保字典可容纳指定数量的条目，而无需进一步扩展其后备存储器。
				</summary>
				<param name="capacity">条目数。</param>
				<returns><![CDATA[Dictionary<TKey,TValue>]]> 的当前容量。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[Dictionary<TKey,TValue>]]> 的枚举数。
				</summary>
				<returns>用于 <![CDATA[Dictionary<TKey,TValue>.Enumerator]]> 的 <![CDATA[Dictionary<TKey,TValue>]]> 结构。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					实现 ISerializable 接口，并返回序列化 <![CDATA[Dictionary<TKey,TValue>]]> 实例所需的数据。
				</summary>
				<param name="info">SerializationInfo 对象，该对象包含序列化 <![CDATA[Dictionary<TKey,TValue>]]> 实例所需的信息。</param>
				<param name="context">StreamingContext 结构，该结构包含与 <![CDATA[Dictionary<TKey,TValue>]]> 实例相关联的序列化流的源和目标。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
				<summary>
					实现 ISerializable 接口，并在完成反序列化之后引发反序列化事件。
				</summary>
				<param name="sender">反序列化事件源。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
				<summary>
					从 <![CDATA[Dictionary<TKey,TValue>]]> 中删除具有指定键的值，并将元素复制到 value 参数。
				</summary>
				<param name="key">要移除的元素的键。</param>
				<param name="value">已删除的元素。</param>
				<returns>如果成功找到并移除该元素，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
				<summary>
					从 <![CDATA[Dictionary<TKey,TValue>]]> 中移除所指定的键的值。
				</summary>
				<param name="key">要移除的元素的键。</param>
				<returns>如果成功找到并移除该元素，则为 true；否则为 false。 如果在 <![CDATA[Dictionary<TKey,TValue>]]> 中没有找到 key，则此方法返回 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
				<summary>
					如果最初已使用此字典中的所有条目对此字典进行了初始化，则将此字典的容量设置为所需容量。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
				<summary>
					设置此字典的容量，使其可容纳指定数量的条目，而无需进一步扩展其后备存储器。
				</summary>
				<param name="capacity">新容量。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
				<summary>
					尝试将指定的键和值添加到字典中。
				</summary>
				<param name="key">要添加的元素的键。</param>
				<param name="value">要添加的元素的值。 它可能是 null。</param>
				<returns>如果成功将键/值对添加到字典中，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
				<summary>
					获取与指定键关联的值。
				</summary>
				<param name="key">要获取的值的键。</param>
				<param name="value">当此方法返回值时，如果找到该键，便会返回与指定的键相关联的值；否则，则会返回 value 参数的类型默认值。 此参数未经初始化即被传递。</param>
				<returns>如果 <![CDATA[Dictionary<TKey,TValue>]]> 包含具有指定键的元素，则为 true；否则为 false。</returns>
			</member>
			<member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
				<summary>
					枚举 <![CDATA[Dictionary<TKey,TValue>]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[Dictionary<TKey,TValue>.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[Dictionary<TKey,TValue>]]> 的下一个元素。
				</summary>
				<returns></returns>
			</member>
			<member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
				<summary>
					表示 <![CDATA[Dictionary<TKey,TValue>]]> 中密钥的集合。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 类的新实例，该实例反映指定的 <![CDATA[Dictionary<TKey,TValue>]]> 中的键。
				</summary>
				<param name="dictionary"><![CDATA[Dictionary<TKey,TValue>]]>，其键反映在新的 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 中。</param>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
				<summary>
					获取 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 中包含的元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
				<summary>
					从指定数组索引开始将 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 元素复制到现有一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="index">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 的枚举数。
				</summary>
				<returns>用于 <![CDATA[Dictionary<TKey,TValue>.KeyCollection.Enumerator]]> 的 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]>。</returns>
			</member>
			<member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
				<summary>
					枚举 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[Dictionary<TKey,TValue>.KeyCollection.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[Dictionary<TKey,TValue>.KeyCollection]]> 的下一个元素。
				</summary>
				<returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
			</member>
			<member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
				<summary>
					表示 <![CDATA[Dictionary<TKey,TValue>]]> 中值的集合。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
				<summary>
					初始化 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 类的新实例，该实例反映指定的 <![CDATA[Dictionary<TKey,TValue>]]> 中的值。
				</summary>
				<param name="dictionary"><![CDATA[Dictionary<TKey,TValue>]]>，其值反映在新的 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 中。</param>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
				<summary>
					获取 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 中包含的元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
				<summary>
					从指定数组索引开始将 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 元素复制到现有一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="index">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 的枚举数。
				</summary>
				<returns>用于 <![CDATA[Dictionary<TKey,TValue>.ValueCollection.Enumerator]]> 的 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]>。</returns>
			</member>
			<member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
				<summary>
					枚举 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[Dictionary<TKey,TValue>.ValueCollection.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[Dictionary<TKey,TValue>.ValueCollection]]> 的下一个元素。
				</summary>
				<returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
			</member>
		</MF-System.Collections.Generic.Dictionary>
		<MF-System.Collections.Generic.LinkedList>
			<member name="T:System.Collections.Generic.LinkedList`1">
				<summary>
					表示双重链接列表。
				</summary>
				<typeparam name="T">指定链接列表的元素类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.#ctor">
				<summary>
					初始化为空的 <![CDATA[LinkedList<T>]]> 类的新实例。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
				<summary>
					初始化 <![CDATA[LinkedList<T>]]> 类的新实例，该实例包含从指定的 IEnumerable 中复制的元素并且其容量足以容纳所复制的元素数。
				</summary>
				<param name="collection">IEnumerable，它的元素被复制到新 <![CDATA[LinkedList<T>。]]></param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					初始化 <![CDATA[LinkedList<T>]]> 类的新实例，该实例可使用指定的 SerializationInfo 和 StreamingContext 进行序列化。
				</summary>
				<param name="info">一个 SerializationInfo 对象包含序列化 <![CDATA[LinkedList<T>]]> 所需的信息。</param>
				<param name="context">一个 StreamingContext 对象包含与<![CDATA[LinkedList<T>]]> 关联的序列化流的源和目标。</param>
			</member>
			<member name="P:System.Collections.Generic.LinkedList`1.Last">
				<summary>
					获取 <![CDATA[LinkedList<T>]]> 的最后一个节点。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedList`1.First">
				<summary>
					获取 <![CDATA[LinkedList<T>]]> 的第一个节点。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedList`1.Count">
				<summary>
					获取 <![CDATA[LinkedList<T>]]> 中实际包含的节点数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 中指定的现有节点后添加指定的新节点。
				</summary>
				<param name="node">要在其后插入 newNode 的 <![CDATA[LinkedListNode<T>]]>。</param>
				<param name="newNode">要添加到 <![CDATA[LinkedListNode<T>]]> 的新 <![CDATA[LinkedList<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 中指定的现有节点后添加包含指定值的新节点。
				</summary>
				<param name="node">要在其后插入包含 value 的新 <![CDATA[LinkedListNode<T>]]> 的 <![CDATA[LinkedListNode<T>]]>。</param>
				<param name="value">要添加到 <![CDATA[LinkedList<T>]]> 的值。</param>
				<returns>包含 value 的新 <![CDATA[LinkedListNode<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 中指定的现有节点前添加指定的新节点。
				</summary>
				<param name="node">要在其前插入 newNode 的 <![CDATA[LinkedListNode<T>]]>。</param>
				<param name="newNode">要添加到 <![CDATA[LinkedListNode<T>]]> 的新 <![CDATA[LinkedList<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 中指定的现有节点前添加包含指定值的新节点。
				</summary>
				<param name="node">要在其前插入包含 value 的新 <![CDATA[LinkedListNode<T>]]> 的 <![CDATA[LinkedListNode<T>]]>。</param>
				<param name="value">要添加到 <![CDATA[LinkedList<T>]]> 的值。</param>
				<returns>包含 value 的新 <![CDATA[LinkedListNode<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 的开头处添加指定的新节点。
				</summary>
				<param name="node">要在 <![CDATA[LinkedListNode<T>]]> 的开头处添加的新 <![CDATA[LinkedList<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 的开头处添加包含指定值的新节点。
				</summary>
				<param name="value">要在 <![CDATA[LinkedList<T>]]> 的开头处添加的值。</param>
				<returns>包含 value 的新 <![CDATA[LinkedListNode<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 的结尾处添加指定的新节点。
				</summary>
				<param name="node">要添加至 <![CDATA[LinkedListNode<T>]]> 结尾的新 <![CDATA[LinkedList<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
				<summary>
					在 <![CDATA[LinkedList<T>]]> 的结尾处添加包含指定值的新节点。
				</summary>
				<param name="value">要添加到 <![CDATA[LinkedList<T>]]> 的末尾的值。</param>
				<returns>包含 value 的新 <![CDATA[LinkedListNode<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Clear">
				<summary>
					从 <![CDATA[LinkedList<T>]]> 中移除所有节点。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
				<summary>
					确定某值是否在 <![CDATA[LinkedList<T>]]> 中。
				</summary>
				<param name="value">要在 <![CDATA[LinkedList<T>]]> 中定位的值。 对于引用类型，该值可以为 null。</param>
				<returns>如果在 true 中找到 value，则为 <![CDATA[LinkedList<T>]]>；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
				<summary>
					从目标数组的指定索引处开始将整个 <![CDATA[LinkedList<T>]]> 复制到兼容的一维 Array。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[LinkedList<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="index">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
				<summary>
					查找包含指定值的第一个节点。
				</summary>
				<param name="value">要在 <![CDATA[LinkedList<T>]]> 中定位的值。</param>
				<returns>如果找到，则为包含指定值的第一个 <![CDATA[LinkedListNode<T>]]>；否则为 null。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
				<summary>
					查找包含指定值的最后一个节点。
				</summary>
				<param name="value">要在 <![CDATA[LinkedList<T>]]> 中定位的值。</param>
				<returns>如果找到，则为包含指定值的最后一个 <![CDATA[LinkedListNode<T>]]>；否则为 null。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[LinkedList<T>]]> 的枚举数。
				</summary>
				<returns><![CDATA[LinkedList<T>.Enumerator]]> 的一个 <![CDATA[LinkedList<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					实现 ISerializable 接口，并返回序列化 <![CDATA[LinkedList<T>]]> 实例所需的数据。
				</summary>
				<param name="info">SerializationInfo 对象，该对象包含序列化 <![CDATA[LinkedList<T>]]> 实例所需的信息。</param>
				<param name="context">StreamingContext 对象，该对象包含与 <![CDATA[LinkedList<T>]]> 实例关联的序列化流的源和目标。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
				<summary>
					实现 ISerializable 接口，并在完成反序列化之后引发反序列化事件。
				</summary>
				<param name="sender">反序列化事件源。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
				<summary>
					从 <![CDATA[LinkedList<T>]]> 中移除指定的节点。
				</summary>
				<param name="node">要从 <![CDATA[LinkedListNode<T>]]> 移除的 <![CDATA[LinkedList<T>]]>。</param>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
				<summary>
					从 <![CDATA[LinkedList<T>]]> 中移除指定值的第一个匹配项。
				</summary>
				<param name="value">要从 <![CDATA[LinkedList<T>]]> 中移除的值。</param>
				<returns>如果成功移除包含 value 的元素，则为 true；否则为 false。 如果在原始 false 中没有找到 value，此方法也会返回 <![CDATA[LinkedList<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
				<summary>
					移除位于 <![CDATA[LinkedList<T>]]> 开头处的节点。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
				<summary>
					移除位于 <![CDATA[LinkedList<T>]]> 结尾处的节点。
				</summary>
			</member>
			<member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
				<summary>
					枚举 <![CDATA[LinkedList<T>]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[LinkedList<T>.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[LinkedList<T>]]> 的下一个元素。
				</summary>
				<returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
			</member>
		</MF-System.Collections.Generic.LinkedList>
		<MF-System.Collections.Generic.LinkedListNode>
			<member name="T:System.Collections.Generic.LinkedListNode`1">
				<summary>
					表示 <![CDATA[LinkedList<T>]]> 中的节点。 此类不能被继承。
				</summary>
				<typeparam name="T">指定链接列表的元素类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
				<summary>
					初始化 <![CDATA[LinkedListNode<T>]]> 类的新实例，该实例包含指定的值。
				</summary>
				<param name="value">要在 <![CDATA[LinkedListNode<T>]]> 中包含的值。</param>
			</member>
			<member name="P:System.Collections.Generic.LinkedListNode`1.List">
				<summary>
					获取 <![CDATA[LinkedListNode<T>]]> 所属的 <![CDATA[LinkedList<T>]]>。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedListNode`1.Next">
				<summary>
					获取 <![CDATA[LinkedList<T>]]> 中的下一个节点。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
				<summary>
					获取 <![CDATA[LinkedList<T>]]> 中的上一个节点。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.LinkedListNode`1.Value">
				<summary>
					获取节点中包含的值。
				</summary>
			</member>
		</MF-System.Collections.Generic.LinkedListNode>
		<MF-System.Collections.Generic.Stack>
			<member name="T:System.Collections.Generic.Stack`1">
				<summary>
					表示相同指定类型的实例可变大小的后进先出 (LIFO) 集合。
				</summary>
				<typeparam name="T">指定堆栈中元素的类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.#ctor">
				<summary>
					初始化 <![CDATA[Stack<T>]]> 类的新实例，该实例为空并且具有默认初始容量。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
				<summary>
					初始化 <![CDATA[Stack<T>]]> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
				</summary>
				<param name="collection">从中复制元素的集合。</param>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
				<summary>
					初始化 <![CDATA[Stack<T>]]> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。
				</summary>
				<param name="capacity"><![CDATA[Stack<T>]]> 可包含的初始元素数。</param>
			</member>
			<member name="P:System.Collections.Generic.Stack`1.Count">
				<summary>
					获取 <![CDATA[Stack<T>]]> 中包含的元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Clear">
				<summary>
					从 <![CDATA[Stack<T>]]> 中移除所有对象。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
				<summary>
					确定某元素是否在 <![CDATA[Stack<T>]]> 中。
				</summary>
				<param name="item">要在 <![CDATA[Stack<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果在 true 中找到 item，则为 <![CDATA[Stack<T>]]>；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
				<summary>
					从指定的数组索引处开始，将 <![CDATA[Stack<T>]]> 复制到现有的一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[Stack<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
				<summary>
					返回 <![CDATA[Stack<T>]]> 的一个枚举数。
				</summary>
				<returns><![CDATA[Stack<T>.Enumerator]]> 的一个 <![CDATA[Stack<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Peek">
				<summary>
					返回位于 <![CDATA[Stack<T>]]> 顶部的对象但不将其移除。
				</summary>
				<returns>位于 <![CDATA[Stack<T>]]> 顶部的对象。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Pop">
				<summary>
					删除并返回 <![CDATA[Stack<T>]]> 顶部的对象。
				</summary>
				<returns>从 <![CDATA[Stack<T>]]> 的顶部移除的对象。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Push(`0)">
				<summary>
					在 <![CDATA[Stack<T>]]> 的顶部插入一个对象。
				</summary>
				<param name="item">要推入到 <![CDATA[Stack<T>]]> 中的对象。 对于引用类型，该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.ToArray">
				<summary>
					将 <![CDATA[Stack<T>]]> 复制到新数组中。
				</summary>
				<returns>新数组，包含 <![CDATA[Stack<T>]]> 的元素的副本。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.TrimExcess">
				<summary>
					如果元素数小于当前容量的 90%，将容量设置为 <![CDATA[Stack<T>]]> 中的实际元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
				<summary>
					返回一个值，该值指示 <![CDATA[Stack<T>]]> 的顶部是否有对象；如果有，则将其复制到 result 参数。 不从 <![CDATA[Stack<T>]]> 中删除对象。
				</summary>
				<param name="result">如果存在，则为 <![CDATA[Stack<T>]]> 顶部的对象；否则为 T 的默认值。</param>
				<returns>如果 <![CDATA[Stack<T>]]> 的顶部有对象，则为 true；如果 <![CDATA[Stack<T>]]> 为空，则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
				<summary>
					返回一个值，该值指示 <![CDATA[Stack<T>]]> 的顶部是否有对象；如果有，则将其复制到 result 参数，并从 <![CDATA[Stack<T>]]> 中删除它。
				</summary>
				<param name="result">如果存在，则为 <![CDATA[Stack<T>]]> 顶部的对象；否则为 T 的默认值。</param>
				<returns>如果 <![CDATA[Stack<T>]]> 的顶部有对象，则为 true；如果 <![CDATA[Stack<T>]]> 为空，则为 false。</returns>
			</member>
			<member name="T:System.Collections.Generic.Stack`1.Enumerator">
				<summary>
					枚举 <![CDATA[Stack<T>]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[Stack<T>.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[Stack<T>]]> 的下一个元素。
				</summary>
				<returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
			</member>
		</MF-System.Collections.Generic.Stack>
		<MF-System.Collections.Generic.Queue>
			<member name="T:System.Collections.Generic.Queue`1">
				<summary>
					表示对象的先进先出集合。
				</summary>
				<typeparam name="T">指定队列中元素的类型。</typeparam>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.#ctor">
				<summary>
					初始化 <![CDATA[Queue<T>]]> 类的新实例，该实例为空并且具有默认初始容量。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
				<summary>
					初始化 <![CDATA[Queue<T>]]> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
				</summary>
				<param name="collection">其元素被复制到新的 <![CDATA[Queue<T>]]> 中的集合。</param>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
				<summary>
					初始化 <![CDATA[Queue<T>]]> 类的新实例，该实例为空并且具有指定的初始容量。
				</summary>
				<param name="capacity"><![CDATA[Queue<T>]]> 可包含的初始元素数。</param>
			</member>
			<member name="P:System.Collections.Generic.Queue`1.Count">
				<summary>
					获取 <![CDATA[Queue<T>]]> 中包含的元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Clear">
				<summary>
					从 <![CDATA[Queue<T>]]> 中移除所有对象。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
				<summary>
					确定某元素是否在 <![CDATA[Queue<T>]]> 中。
				</summary>
				<param name="item">要在 <![CDATA[Queue<T>]]> 中定位的对象。 对于引用类型，该值可以为 null。</param>
				<returns>如果在 true 中找到 item，则为 <![CDATA[Queue<T>]]>；否则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
				<summary>
					从指定数组索引开始将 <![CDATA[Queue<T>]]> 元素复制到现有一维 Array 中。
				</summary>
				<param name="array">一维 Array，它是从 <![CDATA[Queue<T>]]> 复制的元素的目标。 Array 必须具有从零开始的索引。</param>
				<param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Dequeue">
				<summary>
					移除并返回位于 <![CDATA[Queue<T>]]> 开始处的对象。
				</summary>
				<returns>从 <![CDATA[Queue<T>]]> 的开始处移除的对象。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
				<summary>
					将对象添加到 <![CDATA[Queue<T>]]> 的结尾处。
				</summary>
				<param name="item">要添加到 <![CDATA[Queue<T>]]> 的对象。 对于引用类型，该值可以为 null。</param>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
				<summary>
					返回循环访问 <![CDATA[Queue<T>]]> 的枚举数。
				</summary>
				<returns><![CDATA[Queue<T>.Enumerator]]> 的一个 <![CDATA[Queue<T>]]>。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Peek">
				<summary>
					返回位于 <![CDATA[Queue<T>]]> 开始处的对象但不将其移除。
				</summary>
				<returns>位于 <![CDATA[Queue<T>]]> 的开头的对象。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.ToArray">
				<summary>
					将 <![CDATA[Queue<T>]]> 元素复制到新数组。
				</summary>
				<returns>包含从 <![CDATA[Queue<T>]]> 复制的元素的新数组。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.TrimExcess">
				<summary>
					如果元素数小于当前容量的 90%，将容量设置为 <![CDATA[Queue<T>]]> 中的实际元素数。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
				<summary>
					删除位于 <![CDATA[Queue<T>]]> 开头的对象，并将它复制到 result 参数。
				</summary>
				<param name="result">已删除的对象。</param>
				<returns>如果对象成功删除，则为 true；如果 <![CDATA[Queue<T>]]> 为空，则为 false。</returns>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
				<summary>
					返回一个值，该值指示 <![CDATA[Queue<T>]]> 的开头是否有对象；如果有，则将其复制到 result 参数。 不从 <![CDATA[Queue<T>]]> 中删除对象。
				</summary>
				<param name="result">如果存在，则为 <![CDATA[Queue<T>]]> 开头的对象；否则为 T 的默认值。</param>
				<returns>如果 <![CDATA[Queue<T>]]> 的开头有对象，则为 true；如果 <![CDATA[Queue<T>]]> 为空，则为 false。</returns>
			</member>
			<member name="T:System.Collections.Generic.Queue`1.Enumerator">
				<summary>
					枚举 <![CDATA[Queue<T>]]> 的元素。
				</summary>
			</member>
			<member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
				<summary>
					获取枚举数当前位置的元素。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
				<summary>
					释放由 <![CDATA[Queue<T>.Enumerator]]> 使用的所有资源。
				</summary>
			</member>
			<member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
				<summary>
					使枚举数前进到 <![CDATA[Queue<T>]]> 的下一个元素。
				</summary>
				<returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
			</member>
		</MF-System.Collections.Generic.Queue>
		<MF-System.Threading.Thread>
			<member name="T:System.Threading.Thread">
				<summary>
					创建和控制线程，设置其优先级并获取其状态。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
				<summary>
					初始化 Thread 类的新实例，指定允许对象在线程启动时传递给线程的委托。
				</summary>
				<param name="start">一个委托，它表示此线程开始执行时要调用的方法。</param>
			</member>
			<member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
				<summary>
					初始化 Thread 类的新实例。
				</summary>
				<param name="start">表示开始执行此线程时要调用的方法的 ThreadStart 委托。</param>
			</member>
			<member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
				<summary>
					初始化 Thread 类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小。
				</summary>
				<param name="start">表示开始执行此线程时要调用的方法的 ParameterizedThreadStart 委托。</param>
				<param name="maxStackSize">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</param>
			</member>
			<member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
				<summary>
					初始化 Thread 类的新实例，指定线程的最大堆栈大小。
				</summary>
				<param name="start">表示开始执行此线程时要调用的方法的 ThreadStart 委托。</param>
				<param name="maxStackSize">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</param>
			</member>
			<member name="P:System.Threading.Thread.CurrentThread">
				<summary>
					获取当前正在运行的线程。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.CurrentPrincipal">
				<summary>
					获取或设置线程的当前负责人（对基于角色的安全性而言）。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.Name">
				<summary>
					获取或设置线程的名称。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.ManagedThreadId">
				<summary>
					获取当前托管线程的唯一标识符。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.IsThreadPoolThread">
				<summary>
					获取指示线程是否属于托管线程池的值。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.IsBackground">
				<summary>
					获取或设置一个值，该值指示某个线程是否为后台线程。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.IsAlive">
				<summary>
					获取指示当前线程的执行状态的值。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.ExecutionContext">
				<summary>
					获取 ExecutionContext 对象，该对象包含有关当前线程的各种上下文的信息。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.CurrentUICulture">
				<summary>
					获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.CurrentCulture">
				<summary>
					获取或设置当前线程的区域性。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.ApartmentState">
				<summary>
					已弃用，请改用 GetApartmentState, SetApartmentState 或 TrySetApartmentState
				</summary>
			</member>
			<member name="P:System.Threading.Thread.Priority">
				<summary>
					获取或设置指示线程的调度优先级的值。
				</summary>
			</member>
			<member name="P:System.Threading.Thread.ThreadState">
				<summary>
					获取一个值，该值包含当前线程的状态。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.AllocateDataSlot">
				<summary>
					在所有线程上分配未命名的数据槽。 为了获得更好的性能，请改用以 ThreadStaticAttribute 特性标记的字段。
				</summary>
				<returns>所有线程上已分配的命名数据槽。</returns>
			</member>
			<member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
				<summary>
					在所有线程上分配已命名的数据槽。 为了获得更好的性能，请改用以 ThreadStaticAttribute 特性标记的字段。
				</summary>
				<param name="name">要分配的数据槽的名称。</param>
				<returns>所有线程上已分配的命名数据槽。</returns>
			</member>
			<member name="M:System.Threading.Thread.BeginCriticalRegion">
				<summary>
					通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响可能会危害应用程序域中的其他任务。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.BeginThreadAffinity">
				<summary>
					通知主机托管代码将要执行依赖于当前物理操作系统线程的标识的指令。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.EndCriticalRegion">
				<summary>
					通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响限于当前任务。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.EndThreadAffinity">
				<summary>
					通知主机托管代码已执行完依赖于当前物理操作系统线程的标识的指令。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
				<summary>
					为进程中的所有线程消除名称与槽之间的关联。 为了获得更好的性能，请改用以 ThreadStaticAttribute 特性标记的字段。
				</summary>
				<param name="name">要释放的数据槽的名称。</param>
			</member>
			<member name="M:System.Threading.Thread.GetCurrentProcessorId">
				<summary>
					获取用于指示当前线程正在哪个处理器上执行的 ID。
				</summary>
				<returns>表示缓存的处理器 ID 的整数。</returns>
			</member>
			<member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
				<summary>
					在当前线程的当前域中从当前线程上指定的槽中检索值。 为了获得更好的性能，请改用以 ThreadStaticAttribute 特性标记的字段。
				</summary>
				<param name="slot">要从其获取值的 LocalDataStoreSlot。</param>
				<returns>检索到的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.GetDomain">
				<summary>
					返回当前线程正在其中运行的当前域。
				</summary>
				<returns>表示正在运行的线程的当前应用程序域的 AppDomain。</returns>
			</member>
			<member name="M:System.Threading.Thread.GetDomainID">
				<summary>
					返回唯一的应用程序域标识符。
				</summary>
				<returns>唯一标识应用程序域的 32 位有符号整数。</returns>
			</member>
			<member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
				<summary>
					查找命名的数据槽。 为了获得更好的性能，请改用以 ThreadStaticAttribute 特性标记的字段。
				</summary>
				<param name="name">本地数据槽的名称。</param>
				<returns>为此线程分配的 LocalDataStoreSlot。</returns>
			</member>
			<member name="M:System.Threading.Thread.MemoryBarrier">
				<summary>
					按如下方式同步内存访问：执行当前线程的处理器在对指令重新排序时，不能采用先执行 MemoryBarrier() 调用之后的内存存取，再执行 MemoryBarrier() 调用之前的内存存取的方式。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.ResetAbort">
				<summary>
					取消当前线程所请求的 Abort(Object)。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
				<summary>
					在当前正在运行的线程上为此线程的当前域在指定槽中设置数据。 为了提高性能，请改用用 ThreadStaticAttribute 属性标记的字段。
				</summary>
				<param name="slot">在其中设置值的 LocalDataStoreSlot。</param>
				<param name="data">要设置的值。</param>
			</member>
			<member name="M:System.Threading.Thread.Sleep(System.Int32)">
				<summary>
					将当前线程挂起指定的毫秒数。
				</summary>
				<param name="millisecondsTimeout">挂起线程的毫秒数。 如果 millisecondsTimeout 参数的值为零，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。 如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</param>
			</member>
			<member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
				<summary>
					将当前线程挂起指定的时间。
				</summary>
				<param name="timeout">挂起线程的时间量。 如果 timeout 参数的值为 Zero，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。 如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</param>
			</member>
			<member name="M:System.Threading.Thread.SpinWait(System.Int32)">
				<summary>
					导致线程等待由 iterations 参数定义的时间量。
				</summary>
				<param name="iterations">定义线程等待的时间长短的 32 位有符号整数。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
				<summary>
					读取字段值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。
				</summary>
				<param name="address">要读取的字段。</param>
				<returns>读取的值。</returns>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
				<summary>
					向字段中写入值。 在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。
				</summary>
				<param name="address">将向其中写入值的字段。</param>
				<param name="value">要写入的值。</param>
			</member>
			<member name="M:System.Threading.Thread.Yield">
				<summary>
					导致调用线程执行准备好在当前处理器上运行的另一个线程。 由操作系统选择要执行的线程。
				</summary>
				<returns>如果操作系统转而执行另一个线程，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Threading.Thread.Abort">
				<summary>
					在调用此方法的线程上引发 ThreadAbortException，以开始终止此线程的过程。 调用此方法通常会终止线程。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.Abort(System.Object)">
				<summary>
					引发在其上调用的线程中的 ThreadAbortException 以开始处理终止线程，同时提供有关线程终止的异常信息。 调用此方法通常会终止线程。
				</summary>
				<param name="stateInfo">一个对象，它包含应用程序特定的信息（如状态），该信息可供正被中止的线程使用。</param>
			</member>
			<member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
				<summary>
					对于当前线程关闭运行时可调用包装 (RCW) 的自动清理。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.GetApartmentState">
				<summary>
					返回表示单元状态的 ApartmentState 值。
				</summary>
				<returns>其中一个表示托管线程的单元状态的 ApartmentState 值。 默认值为 Unknown。</returns>
			</member>
			<member name="M:System.Threading.Thread.GetCompressedStack">
				<summary>
					已弃用，请改用 System.Threading.CompressedStack 类
				</summary>
			</member>
			<member name="M:System.Threading.Thread.GetHashCode">
				<summary>
					返回当前线程的哈希代码。
				</summary>
				<returns>整数哈希代码值。</returns>
			</member>
			<member name="M:System.Threading.Thread.Interrupt">
				<summary>
					中断处于 WaitSleepJoin 线程状态的线程。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.Join(System.TimeSpan)">
				<summary>
					在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。
				</summary>
				<param name="timeout">设置等待线程终止的时间量的 TimeSpan。</param>
				<returns>如果线程已终止，则为 true；如果 false 参数指定的时间量已过之后还未终止线程，则为 timeout。</returns>
			</member>
			<member name="M:System.Threading.Thread.Join(System.Int32)">
				<summary>
					在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。
				</summary>
				<param name="millisecondsTimeout">等待线程终止的毫秒数。</param>
				<returns>如果线程已终止，则为 true；如果 false 参数指定的时间量已过之后还未终止线程，则为 millisecondsTimeout。</returns>
			</member>
			<member name="M:System.Threading.Thread.Join">
				<summary>
					在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.Resume">
				<summary>
					已弃用，请改用类 System.Threading中的 Monitor, Mutex, Event, 和 Semaphore 同步线程或保护资源
				</summary>
			</member>
			<member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
				<summary>
					在线程启动前设置其单元状态。
				</summary>
				<param name="state">新的单元状态。</param>
			</member>
			<member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
				<summary>
					已弃用，请改用 System.Threading.CompressedStack 类
				</summary>
			</member>
			<member name="M:System.Threading.Thread.Start(System.Object)">
				<summary>
					导致操作系统将当前实例的状态更改为 Running，并选择提供包含线程执行的方法要使用的数据的对象。
				</summary>
				<param name="parameter">一个对象，包含线程执行的方法要使用的数据。</param>
			</member>
			<member name="M:System.Threading.Thread.Start">
				<summary>
					导致操作系统将当前实例的状态更改为 Running。
				</summary>
			</member>
			<member name="M:System.Threading.Thread.Suspend">
				<summary>
					已弃用，请改用类 System.Threading中的 Monitor, Mutex, Event, 和 Semaphore 同步线程或保护资源
				</summary>
			</member>
			<member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
				<summary>
					在线程启动前设置其单元状态。
				</summary>
				<param name="state">新的单元状态。</param>
				<returns>如果设置了单元状态，则为 true；否则为 false。</returns>
			</member>
		</MF-System.Threading.Thread>
		<MF-System.Type>
			<member name="T:System.Type">
				<summary>
					表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。
				</summary>
			</member>
			<member name="F:System.Type.Delimiter">
				<summary>
					分隔 Type 的命名空间中的名称('.')。 此字段为只读。
				</summary>
			</member>
			<member name="F:System.Type.EmptyTypes">
				<summary>
					表示 Type 类型的空数组。 此字段为只读。
				</summary>
			</member>
			<member name="F:System.Type.FilterAttribute">
				<summary>
					表示用在特性上的成员筛选器。 此字段为只读。
				</summary>
			</member>
			<member name="F:System.Type.FilterName">
				<summary>
					表示用于名称的区分大小写的成员筛选器。 此字段为只读。
				</summary>
			</member>
			<member name="F:System.Type.FilterNameIgnoreCase">
				<summary>
					表示用于名称的不区分大小写的成员筛选器。 此字段为只读。
				</summary>
			</member>
			<member name="F:System.Type.Missing">
				<summary>
					表示 Type 信息中的缺少值。 此字段为只读。
				</summary>
			</member>
			<member name="P:System.Type.DefaultBinder">
				<summary>
					获取默认联编程序的引用，该程序实现的内部规则用于选择由 InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]) 调用的合适成员。
				</summary>
			</member>
			<member name="P:System.Type.IsByRef">
				<summary>
					获取一个值，该值指示 Type 是否由引用传递。
				</summary>
			</member>
			<member name="P:System.Type.IsByRefLike">
				<summary>
					获取一个值，该值指示类型是否是与 byref 类似的结构。
				</summary>
			</member>
			<member name="P:System.Type.IsClass">
				<summary>
					获取一个值，通过该值指示 Type 是否是一个类或委托；即，不是值类型或接口。
				</summary>
			</member>
			<member name="P:System.Type.IsCOMObject">
				<summary>
					获取一个值，通过该值指示 Type 是否为 COM 对象。
				</summary>
			</member>
			<member name="P:System.Type.IsConstructedGenericType">
				<summary>
					获取指示此对象是否表示构造的泛型类型的值。 你可以创建构造型泛型类型的实例。
				</summary>
			</member>
			<member name="P:System.Type.IsContextful">
				<summary>
					获取一个值，通过该值指示 Type 在上下文中是否可以被承载。
				</summary>
			</member>
			<member name="P:System.Type.IsGenericMethodParameter">
				<summary>
					获取一个值，该值指示当前 Type 是否表示泛型方法定义中的类型参数。
				</summary>
			</member>
			<member name="P:System.Type.IsExplicitLayout">
				<summary>
					获取指示当前类型的字段是否放置在显式指定的偏移量处的值。
				</summary>
			</member>
			<member name="P:System.Type.IsAutoLayout">
				<summary>
					获取指示当前类型的字段是否由公共语言运行时自动放置的值。
				</summary>
			</member>
			<member name="P:System.Type.IsGenericParameter">
				<summary>
					获取一个值，该值指示当前 Type 是否表示泛型类型或方法的定义中的类型参数。
				</summary>
			</member>
			<member name="P:System.Type.IsGenericType">
				<summary>
					获取一个值，该值指示当前类型是否是泛型类型。
				</summary>
			</member>
			<member name="P:System.Type.IsGenericTypeDefinition">
				<summary>
					获取一个值，该值指示当前 Type 是否表示可以用来构造其他泛型类型的泛型类型定义。
				</summary>
			</member>
			<member name="P:System.Type.IsEnum">
				<summary>
					获取一个值，该值指示当前的 Type 是否表示枚举。
				</summary>
			</member>
			<member name="P:System.Type.IsAutoClass">
				<summary>
					获取一个值，该值指示是否为 AutoClass 选择了字符串格式属性 Type。
				</summary>
			</member>
			<member name="P:System.Type.HasElementType">
				<summary>
					获取一个值，通过该值指示当前 Type 是包含还是引用另一类型，即当前 Type 是数组、指针还是通过引用传递。
				</summary>
			</member>
			<member name="P:System.Type.IsAnsiClass">
				<summary>
					获取一个值，该值指示是否为 AnsiClass 选择了字符串格式属性 Type。
				</summary>
			</member>
			<member name="P:System.Type.IsAbstract">
				<summary>
					获取一个值，通过该值指示 Type 是否为抽象的并且必须被重写。
				</summary>
			</member>
			<member name="P:System.Type.IsGenericTypeParameter">
				<summary>
					获取一个值，该值指示当前 Type 是否表示泛型类型定义中的类型参数。
				</summary>
			</member>
			<member name="P:System.Type.GUID">
				<summary>
					获取与 Type关联的 GUID。
				</summary>
			</member>
			<member name="P:System.Type.GenericTypeArguments">
				<summary>
					获取此类型泛型类型参数的数组。
				</summary>
			</member>
			<member name="P:System.Type.GenericParameterPosition">
				<summary>
					当 Type 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。
				</summary>
			</member>
			<member name="P:System.Type.GenericParameterAttributes">
				<summary>
					获取描述当前泛型类型参数的协变和特殊约束的 GenericParameterAttributes 标志。
				</summary>
			</member>
			<member name="P:System.Type.FullName">
				<summary>
					获取该类型的完全限定名称，包括其命名空间，但不包括程序集。
				</summary>
			</member>
			<member name="P:System.Type.DeclaringType">
				<summary>
					获取用来声明当前的嵌套类型或泛型类型参数的类型。
				</summary>
			</member>
			<member name="P:System.Type.DeclaringMethod">
				<summary>
					获取一个表示声明方法的 MethodBase（如果当前 Type 表示泛型方法的一个类型参数）。
				</summary>
			</member>
			<member name="P:System.Type.ContainsGenericParameters">
				<summary>
					获取一个值，该值指示当前 Type 对象是否具有尚未被特定类型替代的类型参数。
				</summary>
			</member>
			<member name="P:System.Type.BaseType">
				<summary>
					获取当前 Type 直接从中继承的类型。
				</summary>
			</member>
			<member name="P:System.Type.Attributes">
				<summary>
					获取与 Type 关联的属性。
				</summary>
			</member>
			<member name="P:System.Type.AssemblyQualifiedName">
				<summary>
					获取类型的程序集限定名，其中包括从中加载 Type 的程序集的名称。
				</summary>
			</member>
			<member name="P:System.Type.IsArray">
				<summary>
					获取一个值，该值指示类型是否为数组。
				</summary>
			</member>
			<member name="P:System.Type.IsImport">
				<summary>
					获取一个值，该值指示 Type 是否应用了 ComImportAttribute 属性，如果应用了该属性，则表示它是从 COM 类型库导入的。
				</summary>
			</member>
			<member name="P:System.Type.IsNested">
				<summary>
					获取一个指示当前 Type 对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。
				</summary>
			</member>
			<member name="P:System.Type.IsLayoutSequential">
				<summary>
					获取指示当前类型的字段是否按顺序（定义顺序或发送到元数据的顺序）放置的值。
				</summary>
			</member>
			<member name="P:System.Type.TypeHandle">
				<summary>
					获取当前 Type 的句柄。
				</summary>
			</member>
			<member name="P:System.Type.StructLayoutAttribute">
				<summary>
					获取一个描述当前类型的布局的 StructLayoutAttribute。
				</summary>
			</member>
			<member name="P:System.Type.ReflectedType">
				<summary>
					获取用于获取该成员的类对象。
				</summary>
			</member>
			<member name="P:System.Type.Namespace">
				<summary>
					获取 Type 的命名空间。
				</summary>
			</member>
			<member name="P:System.Type.Module">
				<summary>
					获取在其中定义当前 Type 的模块 (DLL)。
				</summary>
			</member>
			<member name="P:System.Type.MemberType">
				<summary>
					获取一个指示此成员是类型还是嵌套类型的 MemberTypes 值。
				</summary>
			</member>
			<member name="P:System.Type.IsVisible">
				<summary>
					获取一个指示 Type 是否可由程序集之外的代码访问的值。
				</summary>
			</member>
			<member name="P:System.Type.IsVariableBoundArray">
				<summary>
					获取一个值，该值指示类型是否是可表示多维数组或具有任意下限的数组的数组类型。
				</summary>
			</member>
			<member name="P:System.Type.IsValueType">
				<summary>
					获取一个值，通过该值指示 Type 是否为值类型。
				</summary>
			</member>
			<member name="P:System.Type.IsUnicodeClass">
				<summary>
					获取一个值，该值指示是否为 UnicodeClass 选择了字符串格式属性 Type。
				</summary>
			</member>
			<member name="P:System.Type.IsTypeDefinition">
				<summary>
					获取一个值，该值指示类型是否是类型定义。
				</summary>
			</member>
			<member name="P:System.Type.IsSZArray">
				<summary>
					获取一个值，该值指示类型是否是仅可表示下限为零的一维数组的数组类型。
				</summary>
			</member>
			<member name="P:System.Type.IsSpecialName">
				<summary>
					获取一个值，该值指示该类型是否具有需要特殊处理的名称。
				</summary>
			</member>
			<member name="P:System.Type.IsSignatureType">
				<summary>
					获取一个值，该值指示类型是否是签名类型。
				</summary>
			</member>
			<member name="P:System.Type.IsSerializable">
				<summary>
					获取一个值，通过该值指示 Type 是否为可序列化的。
				</summary>
			</member>
			<member name="P:System.Type.IsSecurityTransparent">
				<summary>
					获取一个值，该值指示当前类型在当前信任级别上是否是透明的而无法执行关键操作。
				</summary>
			</member>
			<member name="P:System.Type.IsSecuritySafeCritical">
				<summary>
					获取一个值，该值指示当前类型在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。
				</summary>
			</member>
			<member name="P:System.Type.IsMarshalByRef">
				<summary>
					获取一个值，该值指示 Type 是否按引用进行封送。
				</summary>
			</member>
			<member name="P:System.Type.Assembly">
				<summary>
					获取在其中声明该类型的 Assembly。 对于泛型类型，则获取在其中定义该泛型类型的 Assembly。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedAssembly">
				<summary>
					获取一个值，通过该值指示 Type 是否是嵌套的并且只能在它自己的程序集内可见。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedFamANDAssem">
				<summary>
					获取一个值，通过该值指示 Type 是否是嵌套的并且只对同时属于自己家族和自己程序集的类可见。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedFamily">
				<summary>
					获取一个值，通过该值指示 Type 是否是嵌套的并且只能在它自己的家族内可见。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedFamORAssem">
				<summary>
					获取一个值，通过该值指示 Type 是否是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见。
				</summary>
			</member>
			<member name="P:System.Type.IsInterface">
				<summary>
					获取一个值，通过该值指示 Type 是否是一个接口；即，不是类或值类型。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedPrivate">
				<summary>
					获取一个值，通过该值指示 Type 是否是嵌套的并声明为私有。
				</summary>
			</member>
			<member name="P:System.Type.IsNotPublic">
				<summary>
					获取一个值，该值指示 Type 是否声明为公共类型。
				</summary>
			</member>
			<member name="P:System.Type.IsPointer">
				<summary>
					获取一个值，通过该值指示 Type 是否为指针。
				</summary>
			</member>
			<member name="P:System.Type.IsPrimitive">
				<summary>
					获取一个值，通过该值指示 Type 是否为基元类型之一。
				</summary>
			</member>
			<member name="P:System.Type.IsPublic">
				<summary>
					获取一个值，该值指示 Type 是否声明为公共类型。
				</summary>
			</member>
			<member name="P:System.Type.IsSealed">
				<summary>
					获取一个值，该值指示 Type 是否声明为密封的。
				</summary>
			</member>
			<member name="P:System.Type.IsSecurityCritical">
				<summary>
					获取一个值，该值指示当前的类型在当前信任级别上是安全关键的还是安全可靠关键的，并因此可以执行关键操作。
				</summary>
			</member>
			<member name="P:System.Type.IsNestedPublic">
				<summary>
					获取一个值，通过该值指示类是否是嵌套的并且声明为公共的。
				</summary>
			</member>
			<member name="P:System.Type.TypeInitializer">
				<summary>
					获取该类型的初始值设定项。
				</summary>
			</member>
			<member name="P:System.Type.UnderlyingSystemType">
				<summary>
					指示表示该类型的公共语言运行时提供的类型。
				</summary>
			</member>
			<member name="M:System.Type.GetType(System.String)">
				<summary>
					获取具有指定名称的 Type，执行区分大小写的搜索。
				</summary>
				<param name="typeName">要获取的类型的程序集限定名称。 请参阅 AssemblyQualifiedName。 如果该类型位于当前正在执行的程序集中或者 mscorlib.dll/System.Private.CoreLib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
				<returns>具有指定名称的类型（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetType(System.String,System.Boolean)">
				<summary>
					获取具有指定名称的 Type，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。
				</summary>
				<param name="typeName">要获取的类型的程序集限定名称。 请参阅 AssemblyQualifiedName。 如果该类型位于当前正在执行的程序集中或者 mscorlib.dll/System.Private.CoreLib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
				<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
				<returns>具有指定名称的类型。 如果找不到该类型，则 throwOnError 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 throwOnError 的值。 请参见“异常”部分。</returns>
			</member>
			<member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
				<summary>
					获取具有指定名称的 Type，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。
				</summary>
				<param name="typeName">要获取的类型的程序集限定名称。 请参阅 AssemblyQualifiedName。 如果该类型位于当前正在执行的程序集中或者 mscorlib.dll/System.Private.CoreLib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
				<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
				<param name="ignoreCase">对 true 执行的搜索不区分大小写，则为 typeName；对 false 执行的搜索区分大小写，则为 typeName。</param>
				<returns>具有指定名称的类型。 如果找不到该类型，则 throwOnError 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 throwOnError 的值。 请参见“异常”部分。</returns>
			</member>
			<member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})">
				<summary>
					获取具有指定名称的类型，（可选）提供自定义方法以解析程序集和该类型。
				</summary>
				<param name="typeName">
					要获取的类型的名称。 如果提供了 typeResolver 参数，则类型名称可以为 typeResolver 能够解析的任何字符串。
					如果提供了 assemblyResolver 参数，或者使用了标准类型解析，则 typeName 必须为程序集限定的名称（请参见 AssemblyQualifiedName），
					除非该类型位于当前正在执行的程序集或 mscorlib.dll/System.Private.CoreLib.dll 中（在这种情况下，提供其命名空间所限定的类型名称就已足够）。
				</param>
				<param name="assemblyResolver">
					一个方法，它定位并返回 typeName 中指定的程序集。 以 assemblyResolver 对象形式传递给 AssemblyName 的程序集名称。
					如果 typeName 不包含程序集的名称，则不调用 assemblyResolver。 如果未提供 assemblyResolver，则执行标准程序集解析。
					警告 不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。
				</param>
				<param name="typeResolver">
					一个方法，它在由 typeName 或标准程序集解析返回的程序集中定位并返回 assemblyResolver 所指定的类型。
					如果未提供任何程序集，则 typeResolver 方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；false 传递给该参数。
					警告 不要通过未知的或不受信任的调用方传递方法。
				</param>
				<returns>具有指定名称的类型，如果未找到该类型，则返回 null。</returns>
			</member>
			<member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)">
				<summary>
					获取具有指定名称的类型，指定在找不到该类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。
				</summary>
				<param name="typeName">
					要获取的类型的名称。 如果提供了 typeResolver 参数，则类型名称可以为 typeResolver 能够解析的任何字符串。
					如果提供了 assemblyResolver 参数，或者使用了标准类型解析，则 typeName 必须为程序集限定的名称（请参见 AssemblyQualifiedName），
					除非该类型位于当前正在执行的程序集或 mscorlib.dll/System.Private.CoreLib.dll 中（在这种情况下，提供其命名空间所限定的类型名称就已足够）。
				</param>
				<param name="assemblyResolver">
					一个方法，它定位并返回 typeName 中指定的程序集。 以 assemblyResolver 对象形式传递给 AssemblyName 的程序集名称。
					如果 typeName 不包含程序集的名称，则不调用 assemblyResolver。 如果未提供 assemblyResolver，则执行标准程序集解析。
					警告 不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。
				</param>
				<param name="typeResolver">
					一个方法，它在由 typeName 或标准程序集解析返回的程序集中定位并返回 assemblyResolver 所指定的类型。
					如果未提供任何程序集，则该方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；false 传递给该参数。
					警告 不要通过未知的或不受信任的调用方传递方法。
				</param>
				<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
				<returns>具有指定名称的类型。 如果找不到该类型，则 throwOnError 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 throwOnError 的值。 请参见“异常”部分。</returns>
			</member>
			<member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)">
				<summary>
					获取具有指定名称的类型，指定是否执行区分大小写的搜索，在找不到类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。
				</summary>
				<param name="typeName">
					要获取的类型的名称。 如果提供了 typeResolver 参数，则类型名称可以为 typeResolver 能够解析的任何字符串。
					如果提供了 assemblyResolver 参数，或者使用了标准类型解析，则 typeName 必须为程序集限定的名称（请参见 AssemblyQualifiedName），
					除非该类型位于当前正在执行的程序集或 mscorlib.dll/System.Private.CoreLib.dll 中（在这种情况下，提供其命名空间所限定的类型名称就已足够）。
				</param>
				<param name="assemblyResolver">
					一个方法，它定位并返回 typeName 中指定的程序集。 以 assemblyResolver 对象形式传递给 AssemblyName 的程序集名称。
					如果 typeName 不包含程序集的名称，则不调用 assemblyResolver。 如果未提供 assemblyResolver，则执行标准程序集解析。
					警告 不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。
				</param>
				<param name="typeResolver">
					一个方法，它在由 typeName 或标准程序集解析返回的程序集中定位并返回 assemblyResolver 所指定的类型。
					如果未提供任何程序集，则该方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；ignoreCase 的值传递给该参数。
					警告 不要通过未知的或不受信任的调用方传递方法。
				</param>
				<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
				<param name="ignoreCase">对 typeName 执行的搜索不区分大小写，则为 true；对 typeName 执行的搜索区分大小写，则为 false。</param>
				<returns>具有指定名称的类型。 如果找不到该类型，则 throwOnError 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 throwOnError 的值。 请参见“异常”部分。</returns>
			</member>
			<member name="M:System.Type.GetTypeArray(System.Object[])">
				<summary>
					获取指定数组中对象的类型。
				</summary>
				<param name="args">要确定其类型的对象数组。</param>
				<returns>表示 Type 中相应元素的类型的 args 对象数组。</returns>
			</member>
			<member name="M:System.Type.GetTypeCode(System.Type)">
				<summary>
					获取指定 Type 的基础类型代码。
				</summary>
				<param name="type">要获取其基础代码的类型。</param>
				<returns>如果 Empty 为 type，则为基础类型代码或 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
				<summary>
					获取与指定类标识符 (CLSID) 关联的类型。
				</summary>
				<param name="clsid">要获取的类型的 CLSID。</param>
				<returns>System.__ComObject，无论 CLSID 是否有效。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
				<summary>
					获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。
				</summary>
				<param name="clsid">要获取的类型的 CLSID。</param>
				<param name="throwOnError">true 将引发所发生的任何异常。或 - false 将忽略所发生的任何异常。</param>
				<returns>System.__ComObject，无论 CLSID 是否有效。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
				<summary>
					从指定服务器获取与指定类标识符 (CLSID) 关联的类型。
				</summary>
				<param name="clsid">要获取的类型的 CLSID。</param>
				<param name="server">用于从中加载该类型的服务器。 如果服务器名称为 null，则此方法会自动恢复到本地计算机上。</param>
				<returns>System.__ComObject，无论 CLSID 是否有效。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
				<summary>
					从指定服务器获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。
				</summary>
				<param name="clsid">要获取的类型的 CLSID。</param>
				<param name="server">用于从中加载该类型的服务器。 如果服务器名称为 null，则此方法会自动恢复到本地计算机上。</param>
				<param name="throwOnError">true 将引发所发生的任何异常。或 - false 将忽略所发生的任何异常。</param>
				<returns>System.__ComObject，无论 CLSID 是否有效。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
				<summary>
					获取由指定类型句柄引用的类型。
				</summary>
				<param name="handle">引用类型的对象。</param>
				<returns>如果 RuntimeTypeHandle 的 null 属性为 Value，则为由指定的 handle 引用的类型，或者为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
				<summary>
					从指定服务器获取与指定程序标识符 (progID) 关联的类型，如果在加载该类型时遇到错误则返回空值。
				</summary>
				<param name="progID">要获取的类型的 ProgID。</param>
				<param name="server">用于从中加载该类型的服务器。 如果服务器名称为 null，则此方法会自动恢复到本地计算机上。</param>
				<returns>如果 progID 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
				<summary>
					获取与指定程序标识符 (ProgID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。
				</summary>
				<param name="progID">要获取的类型的 ProgID。</param>
				<param name="throwOnError">true 将引发所发生的任何异常。或 - false 将忽略所发生的任何异常。</param>
				<returns>如果 progID 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
				<summary>
					从指定服务器获取与指定程序标识符 (progID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。
				</summary>
				<param name="progID">要获取的 Type 的 progID。</param>
				<param name="server">用于从中加载该类型的服务器。 如果服务器名称为 null，则此方法会自动恢复到本地计算机上。</param>
				<param name="throwOnError">true 将引发所发生的任何异常。或 - false 将忽略所发生的任何异常。</param>
				<returns>如果 progID 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeFromProgID(System.String)">
				<summary>
					获取与指定程序标识符 (ProgID) 关联的类型，如果在加载 Type 时遇到错误，则返回空值。
				</summary>
				<param name="progID">要获取的类型的 ProgID。</param>
				<returns>如果 progID 是注册表中的有效项，并且有与之关联的类型，则为与指定 ProgID 关联的类型；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeHandle(System.Object)">
				<summary>
					获取指定对象的 Type 的句柄。
				</summary>
				<param name="o">要获取类型句柄的对象。</param>
				<returns>指定 Type 的 Object 的句柄。</returns>
			</member>
			<member name="M:System.Type.MakeGenericMethodParameter(System.Int32)">
				<summary>
					返回一个签名类型对象，它可传递到 GetMethod 方法的 Type[] 数组参数中来表示泛型参数引用。
				</summary>
				<param name="position">类型化参数位置。</param>
				<returns>一个签名类型对象，它可传递到 GetMethod 方法的 Type[] 数组参数中来表示泛型参数引用。</returns>
			</member>
			<member name="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)">
				<summary>
					获取具有指定名称的 Type，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。 该类型只为反射加载，而不为执行加载。
				</summary>
				<param name="typeName">要获取的 Type 的程序集限定名称。</param>
				<param name="throwIfNotFound">如果为 true，则会在找不到该类型时引发 TypeLoadException；如果为 false，则在找不到该类型时返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
				<param name="ignoreCase">如果为 true，则执行不区分大小写的 typeName 搜索；如果为 false，则执行区分大小写的 typeName 搜索。</param>
				<returns>具有指定名称的类型（如果找到的话）；否则为 null。 如果找不到该类型，则 throwIfNotFound 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 throwIfNotFound 的值。 请参见“异常”部分。</returns>
			</member>
			<member name="M:System.Type.Equals(System.Object)">
				<summary>
					确定当前 Type 的基础系统类型是否与指定 Object 的基础系统类型相同。
				</summary>
				<param name="o">该对象，其基础系统类型将与当前 Type 的基础系统类型相比较。 为了使比较成功，o 必须能够被强制转换或转换为类型 Type 的一个对象。</param>
				<returns>
					如果 true 的基础系统类型与当前 o 的基础系统类型相同，则为 Type；否则为 false。
					在以下情况下，此方法也会返回 false：
					o 为 null。o 不能强制转换或转换为 Type 对象。
				</returns>
			</member>
			<member name="M:System.Type.Equals(System.Type)">
				<summary>
					确定当前 Type 的基础系统类型是否与指定 Type 的基础系统类型相同。
				</summary>
				<param name="o">该对象，其基础系统类型将与当前 Type 的基础系统类型相比较。</param>
				<returns>如果 true 的基础系统类型与当前 o 的基础系统类型相同，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
				<summary>
					返回表示接口（由当前 Type 所实现或继承）的筛选列表的 Type 对象数组。
				</summary>
				<param name="filter">对照 filterCriteria 比较接口的委托。</param>
				<param name="filterCriteria">确定接口是否应包括在返回数组中的搜索判据。</param>
				<returns>一个 Type 对象的数组，它表示由当前 Type 实现或继承的接口的已筛选的列表；如果当前 Type 未实现或继承与筛选器相匹配的接口，则为空数组。</returns>
			</member>
			<member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
				<summary>
					返回指定成员类型的 MemberInfo 对象的筛选数组。
				</summary>
				<param name="memberType">枚举值的按位组合，它指示要搜索的成员的类型。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="filter">执行比较的委托，如果当前被检查的成员匹配 true，则返回 filterCriteria；否则返回 false。</param>
				<param name="filterCriteria">确定成员是否在 MemberInfo 对象数组中返回的搜索判据。FieldAttributes、MethodAttributes 和 MethodImplAttributes 的字段可以和该类提供的 FilterAttribute 委托一起使用。</param>
				<returns>指定成员类型的 MemberInfo 对象的筛选数组。或 - 如果当前 Type 没有与筛选条件相匹配的 memberType 类型的成员，则为空数组。</returns>
			</member>
			<member name="M:System.Type.GetArrayRank">
				<summary>
					获取数组中的维数。
				</summary>
				<returns>包含当前类型中维数的整数。</returns>
			</member>
			<member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					用指定绑定约束和指定调用约定，搜索其参数与指定参数类型及修饰符匹配的构造函数。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。</param>
				<param name="types">Type 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。或 - 获取不使用参数的构造函数的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的构造函数的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					使用指定绑定约束搜索其参数与指定自变量类型和修饰符匹配的构造函数。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="types">Type 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。或 - 获取不使用参数的构造函数的 Type 类型的空数组（即 Type[] types = new Type[0]）。或 - EmptyTypes.</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与参数类型数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的构造函数的 ConstructorInfo 对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetConstructor(System.Type[])">
				<summary>
					搜索其参数与指定数组中的类型匹配的公共实例构造函数。
				</summary>
				<param name="types">表示需要的构造函数的参数个数、顺序和类型的 Type 对象的数组。或 - Type 对象的空数组，用于获取不带参数的构造函数。 这样的空数组由 static 字段 EmptyTypes 提供。</param>
				<returns>为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetConstructors">
				<summary>
					返回为当前 Type 定义的所有公共构造函数。
				</summary>
				<returns>ConstructorInfo 对象的数组，表示当前 Type 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。 如果没有为当前 Type 定义公共实例构造函数，或者当前 Type 表示泛型类型或泛型方法的定义中的类型参数，则返回 ConstructorInfo 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定 Type 搜索为当前 BindingFlags 定义的构造函数。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>表示为当前 ConstructorInfo 定义的匹配指定绑定约束的所有构造函数的 Type 对象数组，包括类型初始值设定项（如果定义的话）。 如果当前 ConstructorInfo 没有定义构造函数，或者定义的构造函数都不符合绑定约束，或者当前 Type 表示泛型类型或泛型方法定义的类型参数，则返回 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetDefaultMembers">
				<summary>
					搜索为设置了 Type 的当前 DefaultMemberAttribute 定义的成员。
				</summary>
				<returns>表示当前 MemberInfo 的所有默认成员的 Type 对象数组。或 - 如果当前 MemberInfo 没有默认成员，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetElementType">
				<summary>
					当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 Type。
				</summary>
				<returns>当前数组、指针或引用类型包含或引用的对象的 Type；如果当前 null 不是数组或指针，不是按引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 Type。</returns>
			</member>
			<member name="M:System.Type.GetEnumName(System.Object)">
				<summary>
					返回当前枚举类型中具有指定值的常数的名称。
				</summary>
				<param name="value">要检索其名称的值。</param>
				<returns>当前枚举类型中具有指定值的成员的名称；如果未找到这样的常数，则为 null。</returns>
			</member>
			<member name="M:System.Type.GetEnumNames">
				<summary>
					返回当前枚举类型中各个成员的名称。
				</summary>
				<returns>一个数组，其中包含枚举中各个成员的名称。</returns>
			</member>
			<member name="M:System.Type.GetEnumUnderlyingType">
				<summary>
					返回当前枚举类型的基础类型。
				</summary>
				<returns>当前枚举的基础类型。</returns>
			</member>
			<member name="M:System.Type.GetEnumValues">
				<summary>
					返回当前枚举类型中各个常数的值组成的数组。
				</summary>
				<returns>包含值的数组。 该数组的元素按枚举常量的二进制值（无符号值）排序。</returns>
			</member>
			<member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，返回表示指定事件的 EventInfo 对象。
				</summary>
				<param name="name">字符串包含由当前的 Type 声明或继承的事件的名称。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>如找到，则为表示由当前 Type 声明或继承的指定公共事件的对象；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetEvent(System.String)">
				<summary>
					返回表示指定的公共事件的 EventInfo 对象。
				</summary>
				<param name="name">该字符串包含事件名称，该事件是由当前 Type 声明或继承的。</param>
				<returns>如找到，则为表示由当前 Type 声明或继承的指定公共事件的对象；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，搜索由当前 Type 声明或继承的事件。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>EventInfo 对象的数组，表示当前 Type 所声明或继承的与指定绑定约束匹配的所有事件。或 - 如果当前 EventInfo 没有事件，或者如果没有一个事件匹配绑定约束，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetEvents">
				<summary>
					返回由当前 Type 声明或继承的所有公共事件。
				</summary>
				<returns>表示由当前 EventInfo 声明或继承的所有公共事件的 Type 对象数组。或 - 如果当前 EventInfo 没有默认成员，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetField(System.String)">
				<summary>
					搜索具有指定名称的公共字段。
				</summary>
				<param name="name">包含要获取的数据字段的名称的字符串。</param>
				<returns>如找到，则为表示具有指定名称的公共字段的对象；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
				<summary>
					使用指定绑定约束搜索指定字段。
				</summary>
				<param name="name">包含要获取的数据字段的名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>表示符合指定要求的字段的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetFields">
				<summary>
					返回当前 Type 的所有公共字段。
				</summary>
				<returns>表示为当前 FieldInfo 定义的所有公共字段的 Type 对象数组。或 - 如果没有为当前 FieldInfo 定义的公共字段，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，搜索为当前 Type 定义的字段。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>表示为当前 FieldInfo 定义的匹配指定绑定约束的所有字段的 Type 对象数组。或 - 如果没有为当前 FieldInfo 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetGenericArguments">
				<summary>
					返回表示封闭式泛型类型的类型参数或泛型类型定义的类型参数的 Type 对象的数组。
				</summary>
				<returns>表示泛型类型的类型实参的 Type 对象的数组。 如果当前类型不是泛型类型，则返回一个空数组。</returns>
			</member>
			<member name="M:System.Type.GetGenericParameterConstraints">
				<summary>
					返回表示当前泛型类型参数约束的 Type 对象的数组。
				</summary>
				<returns>表示当前泛型类型参数上的约束的 Type 对象的数组。</returns>
			</member>
			<member name="M:System.Type.GetGenericTypeDefinition">
				<summary>
					返回一个表示可用于构造当前泛型类型的泛型类型定义的 Type 对象。
				</summary>
				<returns>表示可用于构造当前类型的泛型类型的 Type 对象。</returns>
			</member>
			<member name="M:System.Type.GetHashCode">
				<summary>
					返回此实例的哈希代码。
				</summary>
				<returns>此实例的哈希代码。</returns>
			</member>
			<member name="M:System.Type.GetInterface(System.String)">
				<summary>
					搜索具有指定名称的接口。
				</summary>
				<param name="name">包含要获取的接口名称的字符串。 对于泛型接口，这是重整名称。</param>
				<returns>表示具有指定名称且由当前的 Type 实现或继承的接口的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetInterface(System.String,System.Boolean)">
				<summary>
					当在派生类中重写时，搜索指定的接口，指定是否要对接口名称执行不区分大小写的搜索。
				</summary>
				<param name="name">包含要获取的接口名称的字符串。 对于泛型接口，这是重整名称。</param>
				<param name="ignoreCase">true 表示对于用来指定简单接口名称的 name 部分（该部分指定命名空间大小写必须正确）忽略其大小写。或 - false 表示对 name 的所有部分执行区分大小写的搜索。</param>
				<returns>表示具有指定名称且由当前的 Type 实现或继承的接口的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetInterfaceMap(System.Type)">
				<summary>
					返回指定接口类型的接口映射。
				</summary>
				<param name="interfaceType">要检索其映射的接口类型。</param>
				<returns>表示 interfaceType 的接口映射的对象。</returns>
			</member>
			<member name="M:System.Type.GetInterfaces">
				<summary>
					当在派生类中重写时，获取由当前 Type 实现或继承的所有接口。
				</summary>
				<returns>表示由当前 Type 实现或继承的所有接口的 Type对象数组。或 - 如果没有由当前 Type 实现或继承的接口，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
				<summary>
					使用指定绑定约束搜索指定成员类型的指定成员。
				</summary>
				<param name="name">包含要获取的成员的名称的字符串。</param>
				<param name="type">要搜索的值。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>一个表示具有指定名称的公共成员的 MemberInfo 对象数组（如果找到的话）；否则为空数组。</returns>
			</member>
			<member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
				<summary>
					使用指定绑定约束搜索指定成员。
				</summary>
				<param name="name">包含要获取的成员的名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>一个表示具有指定名称的公共成员的 MemberInfo 对象数组（如果找到的话）；否则为空数组。</returns>
			</member>
			<member name="M:System.Type.GetMember(System.String)">
				<summary>
					搜索具有指定名称的公共成员。
				</summary>
				<param name="name">包含要获取的公共成员名称的字符串。</param>
				<returns>一个表示具有指定名称的公共成员的 MemberInfo 对象数组（如果找到的话）；否则为空数组。</returns>
			</member>
			<member name="M:System.Type.GetMembers">
				<summary>
					返回为当前 Type 的所有公共成员。
				</summary>
				<returns>表示当前 MemberInfo 的所有公共成员的 Type 对象数组。或 - 如果当前 MemberInfo 没有公共成员，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，搜索为当前 Type 定义的成员。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>表示为当前 MemberInfo 定义的匹配指定绑定约束的所有成员的 Type 对象数组。或 - 如果没有为当前 Type 定义成员，或者定义的成员均与绑定约束不匹配，则为空数组。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])">
				<summary>
					搜索其参数与指定泛型参数计数及参数类型匹配的指定公共方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="genericParameterCount">方法的泛型类型参数的数目。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<returns>表示其参数与指定泛型参数计数及参数类型匹配的公共方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					搜索其参数与指定泛型参数计数、参数类型及修饰符匹配的指定公共方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="genericParameterCount">方法的泛型类型参数的数目。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示与指定泛型参数计数、参数类型及修饰符匹配的公共方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
				<summary>
					使用指定绑定约束搜索指定方法。
				</summary>
				<param name="name">包含要获取的方法名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。
				</summary>
				<param name="name">包含要获取的方法名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">该对象用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					使用指定绑定约束，搜索其参数与指定自变量类型及修饰符匹配的指定方法。
				</summary>
				<param name="name">包含要获取的方法名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Type[])">
				<summary>
					搜索其参数与指定参数类型匹配的指定公共方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<returns>表示其参数与指定参数类型匹配的公共方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					使用指定的绑定约束和指定的调用约定搜索其参数与指定泛型参数计数、参数类型及修饰符匹配的指定方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="genericParameterCount">方法的泛型类型参数的数目。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">该对象用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示与指定泛型参数计数、参数类型、修饰符、绑定约束及调用约定匹配的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String)">
				<summary>
					搜索具有指定名称的公共方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<returns>表示具有指定名称的公共方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					搜索其参数与指定参数类型及修饰符匹配的指定公共方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的公共方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					使用指定绑定约束，搜索其参数与指定泛型参数计数、参数类型及修饰符匹配的指定方法。
				</summary>
				<param name="name">包含要获取的公共方法的名称的字符串。</param>
				<param name="genericParameterCount">方法的泛型类型参数的数目。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 空的 Type 对象数组（由 EmptyTypes 字段提供），用来获取不采用参数的方法。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
				<returns>表示与指定泛型参数计数、参数类型、修饰符及绑定约束匹配的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethods">
				<summary>
					返回为当前 Type 的所有公共方法。
				</summary>
				<returns>表示为当前 MethodInfo 定义的所有公共方法的 Type 对象数组。或 - 如果没有为当前 MethodInfo 定义的公共方法，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，搜索为当前 Type 定义的方法。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>表示为当前 MethodInfo 定义的匹配指定绑定约束的所有方法的 Type 对象数组。或 - 如果没有为当前 MethodInfo 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetNestedType(System.String)">
				<summary>
					搜索具有指定名称的公共嵌套类型。
				</summary>
				<param name="name">包含要获取的嵌套类型的名称的字符串。</param>
				<returns>如找到，则为表示具有指定名称的公共嵌套类型的对象；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。
				</summary>
				<param name="name">包含要获取的嵌套类型的名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>表示符合指定要求的嵌套类型的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetNestedTypes">
				<summary>
					返回嵌套在当前的 Type 中的公共类型。
				</summary>
				<returns>Type 对象的数组，这些对象表示嵌套在当前 Type 中的公共类型（搜索是非递归的）；如果当前的 Type 中没有嵌套公共类型，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束搜索嵌套在当前 Type 中的类型。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>Type 对象数组，这些对象表示嵌套在当前 Type 中的所有与指定的绑定约束匹配的类型（搜索是非递归的）；如果没有找到与绑定约束匹配的嵌套类型，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetProperties">
				<summary>
					返回为当前 Type 的所有公共属性。
				</summary>
				<returns>表示当前 PropertyInfo 的所有公共属性的 Type 对象数组。或 - 如果当前 PropertyInfo 没有公共属性，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
				<summary>
					当在派生类中重写时，使用指定绑定约束，搜索当前 Type 的属性。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回空数组。</param>
				<returns>一个对象数组，它表示当前 Type 中与指定的绑定约束匹配的所有属性。或 - 如果当前 PropertyInfo 没有属性，或者如果没有一个属性匹配绑定约束，则为 Type 类型的空数组。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Type[])">
				<summary>
					搜索其参数与指定自变量类型匹配的指定公共属性。
				</summary>
				<param name="name">包含要获取的公共属性名的字符串。</param>
				<param name="types">一个 Type 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。或 - 获取未被索引的属性的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<returns>表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String)">
				<summary>
					搜索具有指定名称的公共属性。
				</summary>
				<param name="name">包含要获取的公共属性名的字符串。</param>
				<returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
				<summary>
					使用指定的绑定约束搜索指定属性。
				</summary>
				<param name="name">包含要获取的属性名的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<returns>表示符合指定需求的属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					使用指定的绑定约束，搜索参数与指定的自变量类型及修饰符匹配的指定属性。
				</summary>
				<param name="name">包含要获取的属性名的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="returnType">属性的返回类型。</param>
				<param name="types">一个 Type 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。或 - 获取未被索引的属性的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Type)">
				<summary>
					搜索具有指定名称和返回类型的公共属性。
				</summary>
				<param name="name">包含要获取的公共属性名的字符串。</param>
				<param name="returnType">属性的返回类型。</param>
				<returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
				<summary>
					搜索其参数与指定自变量类型匹配的指定公共属性。
				</summary>
				<param name="name">包含要获取的公共属性名的字符串。</param>
				<param name="returnType">属性的返回类型。</param>
				<param name="types">一个 Type 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。或 - 获取未被索引的属性的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<returns>表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					搜索其参数与指定自变量类型及修饰符匹配的指定公共属性。
				</summary>
				<param name="name">包含要获取的公共属性名的字符串。</param>
				<param name="returnType">属性的返回类型。</param>
				<param name="types">一个 Type 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。或 - 获取未被索引的属性的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定要求的公共属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetType">
				<summary>
					获取当前 Type。
				</summary>
				<returns>当前的 Type。</returns>
			</member>
			<member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
				<summary>
					使用指定的绑定约束和匹配的指定参数列表及区域性来调用指定成员。
				</summary>
				<param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。或 - 空字符串("")，表示调用默认成员。或 - 对于 IDispatch 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
				<param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。 查找类型无需指定。 如果省略查找的类型，则将使用 BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 Binder 对象。</param>
				<param name="target">对其调用指定成员的对象。</param>
				<param name="args">包含传递给要调用的成员的参数的数组。</param>
				<param name="culture">表示要使用的全局化区域设置的对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。或 - 要使用当前线程的 Nothing 的空引用（在 Visual Basic 中为 CultureInfo）。</param>
				<returns>一个对象，表示被调用成员的返回值。</returns>
			</member>
			<member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
				<summary>
					使用指定的绑定约束并匹配指定的参数列表，调用指定成员。
				</summary>
				<param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。或 - 空字符串("")，表示调用默认成员。或 - 对于 IDispatch 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
				<param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。 查找类型无需指定。 如果省略查找的类型，则将使用 BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 Binder 对象。</param>
				<param name="target">对其调用指定成员的对象。</param>
				<param name="args">包含传递给要调用的成员的参数的数组。</param>
				<returns>一个对象，表示被调用成员的返回值。</returns>
			</member>
			<member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
				<summary>
					当在派生类中重写时，使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。
				</summary>
				<param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。或 - 空字符串("")，表示调用默认成员。或 - 对于 IDispatch 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
				<param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。 查找类型无需指定。 如果省略查找的类型，则将使用 BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 DefaultBinder 的空引用（在 Visual Basic 中为 Nothing）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 Binder 对象。</param>
				<param name="target">对其调用指定成员的对象。</param>
				<param name="args">包含传递给要调用的成员的参数的数组。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 args 数组中的相应元素关联的特性。 参数的关联的属性存储在成员的签名中。只有在调用 COM 组件时，默认联编程序才处理此参数。</param>
				<param name="culture">表示要使用的全局化区域设置的 CultureInfo 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。或 - 要使用当前线程的 Nothing 的空引用（在 Visual Basic 中为 CultureInfo）。</param>
				<param name="namedParameters">包含参数名称的数组，args 数组中的值将传递给这些参数。</param>
				<returns>一个对象，表示被调用成员的返回值。</returns>
			</member>
			<member name="M:System.Type.IsAssignableFrom(System.Type)">
				<summary>
					确定指定类型 c 的实例是否能分配给当前类型的变量。
				</summary>
				<param name="c">要与当前类型进行比较的类型。</param>
				<returns>
					如果满足下列任一条件，则为 true：
					c 和当前实例表示相同类型。
					c 是从当前实例直接或间接派生的。 如果继承于当前实例，则 c 是从当前实例直接派生的；如果继承于从当前实例继承的接连一个或多个类，则 c 是从当前实例间接派生的。
					当前实例是 c 实现的一个接口。
					c 是一个泛型类型参数，并且当前实例表示 c 的约束之一。
					c 表示一个值类型，并且当前实例表示 <![CDATA[Nullable<c>]]>（在 Visual Basic 中为 Nullable(Of c)）。
					如果不满足上述任何一个条件或者 c 为 false，则为 null。
				</returns>
			</member>
			<member name="M:System.Type.IsEnumDefined(System.Object)">
				<summary>
					返回一个值，该值指示当前的枚举类型中是否存在指定的值。
				</summary>
				<param name="value">要测试的值。</param>
				<returns>如果指定的值是当前枚举类型的成员，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsEquivalentTo(System.Type)">
				<summary>
					确定两个 COM 类型是否具有相同的标识，以及是否符合类型等效的条件。
				</summary>
				<param name="other">要测试是否与当前类型等效的 COM 类型。</param>
				<returns>如果 COM 类型等效，则为 true；否则为 false。 如果一个类型位于为执行加载的程序集中，而另一个类型位于已加载到仅限反射上下文的程序集中，则此方法也返回 false。</returns>
			</member>
			<member name="M:System.Type.IsInstanceOfType(System.Object)">
				<summary>
					确定指定的对象是否是当前 Type 的实例。
				</summary>
				<param name="o">要与当前类型进行比较的对象。</param>
				<returns>如果满足下列任一条件，则为 true：当前 Type 位于由 o 表示的对象的继承层次结构中；当前 Type 是 o 实现的接口。 如果不属于其中任一种情况，o 为 null，或者当前 Type 为开放式泛型类型（即 ContainsGenericParameters 返回 true），则为 false。</returns>
			</member>
			<member name="M:System.Type.IsSubclassOf(System.Type)">
				<summary>
					确定当前 Type 是否派生自指定的 Type。
				</summary>
				<param name="c">要与当前类型进行比较的类型。</param>
				<returns>如果当前 Type 派生于 c，则为 true；否则为 false。 如果 Type 和当前 c 相等，此方法也返回 false。</returns>
			</member>
			<member name="M:System.Type.MakeArrayType(System.Int32)">
				<summary>
					返回 Type 对象，该对象表示一个具有指定维数的当前类型的数组。
				</summary>
				<param name="rank">数组的维数。 此数字必须小于或等于 32。</param>
				<returns>表示当前类型的指定维数的数组的对象。</returns>
			</member>
			<member name="M:System.Type.MakeArrayType">
				<summary>
					返回 Type 对象，该对象表示当前类型的一维数组（下限为零）。
				</summary>
				<returns>返回一个表示当前类型的一维数组（下限为零）的 Type 对象。</returns>
			</member>
			<member name="M:System.Type.MakeByRefType">
				<summary>
					返回表示作为 Type 参数（在 Visual Basic 中为 ref 参数）传递时的当前类型的 ByRef 对象。
				</summary>
				<returns>表示作为 Type 参数（在 Visual Basic 中为 ref 参数）传递时的当前类型的 ByRef 对象。</returns>
			</member>
			<member name="M:System.Type.MakeGenericType(System.Type[])">
				<summary>
					替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 Type 对象。
				</summary>
				<param name="typeArguments">将代替当前泛型类型的类型参数的类型数组。</param>
				<returns>Type 表示的构造类型通过以下方式形成：用 typeArguments 的元素取代当前泛型类型的类型参数。</returns>
			</member>
			<member name="M:System.Type.MakePointerType">
				<summary>
					返回表示指向当前类型的指针的 Type 对象。
				</summary>
				<returns>表示指向当前类型的指针的 Type 对象。</returns>
			</member>
			<member name="M:System.Type.ToString">
				<summary>
					返回表示当前 String 的名称的 Type。
				</summary>
				<returns>表示当前 String 的名称的 Type。</returns>
			</member>
			<member name="M:System.Type.GetAttributeFlagsImpl">
				<summary>
					在派生类中重写时，实现 Attributes 属性，并获取枚举值的按位组合（它指示与 Type 关联的特性）。
				</summary>
				<returns>表示 TypeAttributes 的属性集的 Type 对象。</returns>
			</member>
			<member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的构造函数。
				</summary>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。</param>
				<param name="types">Type 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。或 - 获取不使用参数的构造函数的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的构造函数的 ConstructorInfo 对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定泛型参数计数、参数类型和修饰符匹配的指定方法。
				</summary>
				<param name="name">包含要获取的方法名称的字符串。</param>
				<param name="genericParameterCount">方法的泛型类型参数的数目。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">该对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器以及哪个进程清理堆栈。</param>
				<param name="types">
					表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。
					或 - 一个类型为 Type （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。
					或 - null. 如果 types 为 null，则自变量不匹配。
				</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示与指定泛型参数计数、参数类型、修饰符、绑定约束及调用约定匹配的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的指定方法。
				</summary>
				<param name="name">包含要获取的方法名称的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="callConvention">该对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器以及哪个进程清理堆栈。</param>
				<param name="types">表示此方法要获取的参数的个数、顺序和类型的 Type 对象数组。或 - 一个类型为 Type （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。或 - null. 如果 types 为 null，则自变量不匹配。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
				<summary>
					当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的参数类型和修饰符匹配的指定属性。
				</summary>
				<param name="name">包含要获取的属性名的字符串。</param>
				<param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。或 - 若为 Default，则返回 null。</param>
				<param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制自变量类型和通过反射调用成员。或 - 要使用 Nothing 的空引用（在 Visual Basic 中为 DefaultBinder）。</param>
				<param name="returnType">属性的返回类型。</param>
				<param name="types">一个 Type 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。或 - 获取未被索引的属性的 Type 类型的空数组（即 Type[] types = new Type[0]）。</param>
				<param name="modifiers">ParameterModifier 对象的数组，表示与 types 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
				<returns>表示符合指定需求的属性的对象（如果找到的话）；否则为 null。</returns>
			</member>
			<member name="M:System.Type.GetTypeCodeImpl">
				<summary>
					返回此 Type 实例的基础类型代码。
				</summary>
				<returns>基础类型的类型代码。</returns>
			</member>
			<member name="M:System.Type.HasElementTypeImpl">
				<summary>
					当在派生类中重写时，实现 HasElementType 属性，确定当前 Type 是否包含另一类型或对其引用；即，当前 Type 是否是数组、指针或由引用传递。
				</summary>
				<returns>如果 true 为数组、指针或按引用传递，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsArrayImpl">
				<summary>
					在派生类中重写时，实现 IsArray 属性并确定 Type 是否为数组。
				</summary>
				<returns>如果 true 是数组，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsByRefImpl">
				<summary>
					在派生类中重写时，实现 IsByRef 属性并确定Type 是否通过引用传递。
				</summary>
				<returns>如果 Type 按引用传递，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsCOMObjectImpl">
				<summary>
					当在派生类中重写时，实现 IsCOMObject 属性并确定 Type 是否为 COM 对象。
				</summary>
				<returns>如果 true 为 COM 对象，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsContextfulImpl">
				<summary>
					实现 IsContextful 属性并确定 Type 在上下文中是否可以被承载。
				</summary>
				<returns>如果 Type 能够在某个上下文中承载，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsMarshalByRefImpl">
				<summary>
					实现 IsMarshalByRef 属性并确定 Type 是否按引用来进行封送。
				</summary>
				<returns>如果 true 是由引用封送的，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsPointerImpl">
				<summary>
					在派生类中重写时，实现 IsPointer 属性并确定 Type 是否为指针。
				</summary>
				<returns>如果 Type 是指针，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsPrimitiveImpl">
				<summary>
					在派生类中重写时，实现 IsPrimitive 属性并确定 Type 是否为基元类型之一。
				</summary>
				<returns>如果 true 为基元类型之一，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.IsValueTypeImpl">
				<summary>
					实现 IsValueType 属性并确定 Type 是否是值类型；即，它不是值类或接口。
				</summary>
				<returns>如果 true 是值类型，则为 Type；否则为 false。</returns>
			</member>
			<member name="M:System.Type.op_Equality(System.Type,System.Type)">
				<summary>
					指示两个 Type 对象是否相等。
				</summary>
				<param name="left">要比较的第一个对象。</param>
				<param name="right">要比较的第二个对象。</param>
				<returns>如果 left 等于 right，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Type.op_Inequality(System.Type,System.Type)">
				<summary>
					指示两个 Type 对象是否不相等。
				</summary>
				<param name="left">要比较的第一个对象。</param>
				<param name="right">要比较的第二个对象。</param>
				<returns>如果 left 不等于 right，则为 true；否则为 false。</returns>
			</member>
		</MF-System.Type>
		<MF-System.Activator>
			<member name="T:System.Activator">
				<summary>
					包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。 此类不能被继承。
				</summary>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type)">
				<summary>
					使用类型的无参数构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
				<summary>
					使用类型的无参数构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<param name="nonPublic">如果公共或非公共无参数构造函数可以匹配，则为 true；如果只有公共无参数构造函数可以匹配，则为 false。</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
				<summary>
					使用最符合指定参数的构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<param name="args">与要调用的构造函数的参数的编号、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（无参数构造函数）。</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
				<summary>
					使用最符合指定参数的构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<param name="args">与要调用的构造函数的参数的编号、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（无参数构造函数）。</param>
				<param name="activationAttributes">
					包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 UrlAttribute 对象的数组，该对象指定激活远程对象所需的 URL。
					此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。
				</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
				<summary>
					使用最符合指定参数的构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。 如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索。</param>
				<param name="binder">使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。 如果 binder 为 null，则使用默认联编程序。</param>
				<param name="args">与要调用的构造函数的参数的编号、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（无参数构造函数）。</param>
				<param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。 如果 culture 为 null，则使用当前线程的 CultureInfo。</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
				<summary>
					使用最符合指定参数的构造函数创建指定类型的实例。
				</summary>
				<param name="type">要创建的对象的类型。</param>
				<param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。 如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索。</param>
				<param name="binder">使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。 如果 binder 为 null，则使用默认联编程序。</param>
				<param name="args">与要调用的构造函数的参数的编号、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（无参数构造函数）。</param>
				<param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。 如果 culture 为 null，则使用当前线程的 CultureInfo。</param>
				<param name="activationAttributes">
					包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 UrlAttribute 对象的数组，该对象指定激活远程对象所需的 URL。
					此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。
				</param>
				<returns>对新创建的对象的引用。</returns>
			</member>
			<member name="M:System.Activator.CreateInstance``1">
				<summary>
					使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。
				</summary>
				<typeparam name="T">要创建的类型。</typeparam>
				<returns>对新创建的对象的引用。</returns>
			</member>
		</MF-System.Activator>
		<MF-System.Reflection.Assembly>
			<member name="T:System.Reflection.Assembly">
				<summary>
					表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.CustomAttributes">
				<summary>
					获取包含此程序集自定义属性的集合。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.DefinedTypes">
				<summary>
					获取定义在此程序集中的类型的集合。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.EntryPoint">
				<summary>
					获取此程序集的入口点。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.EscapedCodeBase">
				<summary>
					获取 URI，包括表示基本代码的转义符。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.ExportedTypes">
				<summary>
					获取此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.FullName">
				<summary>
					获取程序集的显示名称。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
				<summary>
					获取一个值，该值指示程序集是否已从全局程序集缓存加载 (仅 .NET Framework) 。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.HostContext">
				<summary>
					获取用于加载程序集的主机上下文。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
				<summary>
					获取表示公共语言运行时 (CLR) 的版本的字符串，该信息保存在包含清单的文件中。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.IsDynamic">
				<summary>
					获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.IsFullyTrusted">
				<summary>
					获取一个值，该值指示当前程序集是否是以完全信任方式加载的。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.Location">
				<summary>
					获取包含清单的已加载文件的完整路径或 UNC 位置。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.ManifestModule">
				<summary>
					获取包含当前程序集清单的模块。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.Modules">
				<summary>
					获取包含此程序集中模块的集合。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.ReflectionOnly">
				<summary>
					获取 Boolean 值，该值指示此程序集是否被加载到只反射上下文中。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.CodeBase">
				<summary>
					获取最初指定的程序集的位置，例如，在 AssemblyName 对象中指定的位置。
				</summary>
			</member>
			<member name="P:System.Reflection.Assembly.SecurityRuleSet">
				<summary>
					获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。
				</summary>
			</member>
			<member name="E:System.Reflection.Assembly.ModuleResolve">
				<summary>
					当公共语言运行时类加载程序不能通过正常方法解析对程序集的内部模块的引用时发生。
				</summary>
			</member>
			<member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
				<summary>
					创建由类型的程序集的显示名称限定的类型的名称。
				</summary>
				<param name="assemblyName">程序集的显示名称。</param>
				<param name="typeName">类型的全名。</param>
				<returns>由程序集的显示名称限定的类型的完整名称。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
				<summary>
					获取在其中定义指定类型的当前加载的程序集。
				</summary>
				<param name="type">一个对象，该对象表示将返回的程序集中的类型。</param>
				<returns>在其中定义指定类型的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetCallingAssembly">
				<summary>
					返回方法（该方法调用当前正在执行的方法）的 Assembly。
				</summary>
				<returns>方法（该方法调用当前正在执行的方法）的 Assembly 对象。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetEntryAssembly">
				<summary>
					获取默认应用程序域中的进程可执行文件。 在其他的应用程序域中，这是由 ExecuteAssembly(String) 执行的第一个可执行文件。
				</summary>
				<returns>程序集是默认应用程序域中的进程可执行文件，或是由 ExecuteAssembly(String) 执行的第一个可执行文件。 当从非托管代码调用时可返回 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetExecutingAssembly">
				<summary>
					获取包含当前执行的代码的程序集。
				</summary>
				<returns>包含当前执行的代码的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
				<summary>
					在给定程序集的 AssemblyName 的情况下，加载程序集。
				</summary>
				<param name="assemblyRef">描述要加载的程序集的对象。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.Load(System.String)">
				<summary>
					用指定的名称加载程序集。
				</summary>
				<param name="assemblyString">程序集名称的长格式或短格式。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.Load(System.Byte[])">
				<summary>
					加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。 此程序集将会加载到调用方的应用程序域中。
				</summary>
				<param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
				<summary>
					加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可以选择包括程序集的符号。 此程序集将会加载到调用方的应用程序域中。
				</summary>
				<param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
				<param name="rawSymbolStore">包含表示程序集符号的原始字节的字节数组。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadFile(System.String)">
				<summary>
					加载指定路径上的程序集文件的内容。
				</summary>
				<param name="path">要加载的文件的完全限定路径。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
				<summary>
					通过给定程序集文件名或路径、哈希值及哈希算法来加载程序集。
				</summary>
				<param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
				<param name="hashValue">计算所得的哈希代码的值。</param>
				<param name="hashAlgorithm">用于对文件进行哈希处理并生成强名称的哈希算法。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
				<summary>
					已知程序集的文件名或路径，加载程序集。
				</summary>
				<param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
				<summary>
					已弃用，请改用 Assembly.Load()
				</summary>
			</member>
			<member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)">
				<summary>
					将给定显示名称的程序集加载到只反射上下文中。
				</summary>
				<param name="assemblyString">程序集的显示名称，由 FullName 属性返回。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])">
				<summary>
					加载来自基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。 程序集被加载到调用方的应用程序域的只反射上下文中。
				</summary>
				<param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)">
				<summary>
					将给定路径的程序集加载到只反射上下文中。
				</summary>
				<param name="assemblyFile">包含程序集清单的文件的路径。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)">
				<summary>
					绕过某些安全检查，将程序集加载到加载源上下文中。
				</summary>
				<param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
				<returns>加载的程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
				<summary>
					使用区分大小写的搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。
				</summary>
				<param name="typeName">要查找类型的 FullName。</param>
				<returns>使用无参数构造函数创建的指定类型的实例；如果未找到 typeName，则为 null。 该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 BindingFlags 设置为 Public 或 Instance。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
				<summary>
					使用可选的区分大小写搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。
				</summary>
				<param name="typeName">要查找类型的 FullName。</param>
				<param name="ignoreCase">如果为 true，则忽略类型名的大小写；否则，为 false。</param>
				<returns>使用无参数构造函数创建的指定类型的实例；如果未找到 typeName，则为 null。 该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 BindingFlags 设置为 Public 或 Instance。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
				<summary>
					使用可选的区分大小写搜索并具有指定的区域性、参数和绑定及激活特性，从此程序集中查找指定的类型，并使用系统激活器创建它的实例。
				</summary>
				<param name="typeName">要查找类型的 FullName。</param>
				<param name="ignoreCase">如果为 true，则忽略类型名的大小写；否则，为 false。</param>
				<param name="bindingAttr">影响执行搜索的方式的位掩码。 此值是 BindingFlags中的位标志的组合。</param>
				<param name="binder">一个对象，它启用绑定、对自变量类型的强制、对成员的调用，以及通过反射对 MemberInfo 对象的检索。 如果 binder 为 null，则使用默认联编程序。</param>
				<param name="args">包含要传递给构造函数的自变量的数组。 此自变量数组在数量、顺序和类型方面必须与要调用的构造函数的参数匹配。 如果需要无参数构造函数，则 args 必须是空数组或 null。</param>
				<param name="culture">用于控制类型强制的 CultureInfo 的实例。 如果这是 null，则使用当前线程的 CultureInfo。 （例如，这对于将表示 1000 的字符串转换为 Double 值来说是必需的，因为不同的区域性以不同的方式表示 1000。）</param>
				<param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 UrlAttribute 对象的数组，该对象指定激活远程对象所需的 URL。 此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
				<returns>如果未找到 null，则为指定的类型实例或 typeName。 所提供的自变量用于解析类型，以及绑定用于创建实例的构造函数。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.Equals(System.Object)">
				<summary>
					确定此程序集和指定的对象是否相等。
				</summary>
				<param name="o">与该实例进行比较的对象。</param>
				<returns>如果 true 与此实例相等，则为 o；否则为 false。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
				<summary>
					获取此程序集的所有自定义属性。
				</summary>
				<param name="inherit">对于 Assembly 类型的对象，将忽略此参数。</param>
				<returns>包含此程序集自定义属性的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
				<summary>
					获取按类型指定的此程序集的自定义属性。
				</summary>
				<param name="attributeType">要为其返回自定义属性的类型。</param>
				<param name="inherit">对于 Assembly 类型的对象，将忽略此参数。</param>
				<returns>一个数组，它包含由 attributeType 指定的此程序集的自定义属性。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetCustomAttributesData">
				<summary>
					返回有关已应用于当前 Assembly（表示为 CustomAttributeData 对象）的特性的信息。
				</summary>
				<returns>CustomAttributeData 对象的泛型列表，这些对象表示有关已应用于当前程序集的特性的数据。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetExportedTypes">
				<summary>
					获取此程序集中定义的公共类型，这些公共类型在程序集外可见。
				</summary>
				<returns>一个数组，表示此程序集中定义并在程序集外可见的类型。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetFile(System.String)">
				<summary>
					获取此程序集清单的文件表中指定文件的 FileStream。
				</summary>
				<param name="name">指定文件的名称。 不包括文件的路径。</param>
				<returns>包含指定文件的流，如果找不到文件则为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetFiles">
				<summary>
					获取程序集清单文件表中的文件。
				</summary>
				<returns>包含这些文件的流数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
				<summary>
					获取程序集清单的文件表中的文件，指定是否包括资源模块。
				</summary>
				<param name="getResourceModules">true 则包括资源模块；否则，为 false。</param>
				<returns>包含这些文件的流数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetForwardedTypes">
				<summary>

				</summary>
				<returns></returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetHashCode">
				<summary>
					返回此实例的哈希代码。
				</summary>
				<returns>32 位有符号整数哈希代码。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
				<summary>
					获取属于此程序集的所有已加载模块，同时指定是否包括资源模块。
				</summary>
				<param name="getResourceModules">true 则包括资源模块；否则，为 false。</param>
				<returns>模块的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetLoadedModules">
				<summary>
					获取作为此程序集的一部分的所有加载模块。
				</summary>
				<returns>模块的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
				<summary>
					返回关于给定资源如何保持的信息。
				</summary>
				<param name="resourceName">区分大小写的资源名称。</param>
				<returns>用关于资源拓扑的信息填充的对象；如果未找到资源，则为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetManifestResourceNames">
				<summary>
					返回此程序集中的所有资源的名称。
				</summary>
				<returns>包含所有资源名称的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
				<summary>
					从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。
				</summary>
				<param name="type">其命名空间用于确定清单资源名的范围的类型。</param>
				<param name="name">所请求的清单资源的名称（区分大小写）。</param>
				<returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
				<summary>
					从此程序集加载指定的清单资源。
				</summary>
				<param name="name">所请求的清单资源的名称（区分大小写）。</param>
				<returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetModule(System.String)">
				<summary>
					获取此程序集中的指定模块。
				</summary>
				<param name="name">请求的模块的名称。</param>
				<returns>所请求的模块，若未找到该模块则为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetModules">
				<summary>
					获取作为此程序集的一部分的所有模块。
				</summary>
				<returns>模块的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
				<summary>
					获取属于此程序集的所有模块，同时指定是否包括资源模块。
				</summary>
				<param name="getResourceModules">true 则包括资源模块；否则，为 false。</param>
				<returns>模块的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetName">
				<summary>
					获取此程序集的 AssemblyName。
				</summary>
				<returns>包含此程序集的完全分析的显示名称的对象。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
				<summary>
					获取此程序集的 AssemblyName，并按 copiedName 指定的那样设置基本代码。
				</summary>
				<param name="copiedName">如果为 true，则将 CodeBase 设置为程序集被影像复制后的位置；如果为 false，则将 CodeBase 设置为原位置。</param>
				<returns>包含此程序集的完全分析的显示名称的对象。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
				<summary>
					获取序列化信息，其中包含重新实例化此程序集所需的所有数据。
				</summary>
				<param name="info">用序列化信息填充的对象。</param>
				<param name="context">序列化的目标上下文。</param>
			</member>
			<member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
				<summary>
					获取此程序集引用的所有程序集的 AssemblyName 对象。
				</summary>
				<returns>包含此程序集引用的所有程序集的完全分析的显示名称的数组。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
				<summary>
					获取指定区域性的附属程序集。
				</summary>
				<param name="culture">指定的区域性。</param>
				<returns>指定的附属程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
				<summary>
					获取指定区域性的附属程序集的指定版本。
				</summary>
				<param name="culture">指定的区域性。</param>
				<param name="version">附属程序集的版本。</param>
				<returns>指定的附属程序集。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
				<summary>
					获取程序集实例中具有指定名称的 Type 对象，带有忽略大小写和在找不到该类型时引发异常的选项。
				</summary>
				<param name="name">类型的全名。</param>
				<param name="throwOnError">true 表示在找不到该类型时引发异常；false 则表示返回 null。</param>
				<param name="ignoreCase">如果为 true，则忽略类型名的大小写；否则，为 false。</param>
				<returns>表示指定类的对象。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
				<summary>
					获取程序集实例中具有指定名称的 Type 对象，并选择在找不到该类型时引发异常。
				</summary>
				<param name="name">类型的全名。</param>
				<param name="throwOnError">true 表示在找不到该类型时引发异常；false 则表示返回 null。</param>
				<returns>表示指定类的对象。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetType(System.String)">
				<summary>
					获取程序集实例中具有指定名称的 Type 对象。
				</summary>
				<param name="name">类型的全名。</param>
				<returns>表示指定类的对象，若未找到该类则为 null。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.GetTypes">
				<summary>
					获取此程序集中定义的类型。
				</summary>
				<returns>一个数组，包含此程序集中定义的所有类型。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
				<summary>
					指示指定的属性是否已应用于该程序集。
				</summary>
				<param name="attributeType">要为此程序集检查的属性类型。</param>
				<param name="inherit">对于该类型的对象，将忽略此自变量。</param>
				<returns>如果已将该属性应用于程序集，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
				<summary>
					加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。 还加载表示此模块的符号的原始字节。
				</summary>
				<param name="moduleName">模块的名称。 此字符串必须与程序集清单中的文件名对应。</param>
				<param name="rawModule">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</param>
				<param name="rawSymbolStore">一个字节数组，包含表示模块符号的原始字节。 如果这是一个资源文件，则必须为 null。</param>
				<returns>加载的模块。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
				<summary>
					加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。
				</summary>
				<param name="moduleName">模块的名称。 此字符串必须与程序集清单中的文件名对应。</param>
				<param name="rawModule">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</param>
				<returns>加载的模块。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.ToString">
				<summary>
					返回程序集的全名，即所谓的显示名称。
				</summary>
				<returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)">
				<summary>
					指示两个 Assembly 对象是否相等。
				</summary>
				<param name="left">要与 right 进行比较的程序集。</param>
				<param name="right">要与 left 进行比较的程序集。</param>
				<returns>如果 left 等于 right，则为 true；否则为 false。</returns>
			</member>
			<member name="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)">
				<summary>
					指示两个 Assembly 对象是否不相等。
				</summary>
				<param name="left">要与 right 进行比较的程序集。</param>
				<param name="right">要与 left 进行比较的程序集。</param>
				<returns>如果 left 不等于 right，则为 true；否则为 false。</returns>
			</member>
		</MF-System.Reflection.Assembly>
	</members>
</doc>